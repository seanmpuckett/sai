/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { startFile: 0, startExpression: 1 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(r, o) {
              var code='';
              if (r) code+=r;
              code+=o.join('\n')
              MagicCheck(code);
              //console.log(code);
              code=Linker(code,true);
              if (failures.length) options.failures=failures.join('\n');
              code=GetTools()+code;
              return code;
            },
          function(code) {
             MagicCheck(code); 
             code=Linker(code);
             if (failures.length) options.failures=failures.join('\n');
             return code;
           },
          function(v) {
            if (v[0]!='fields') fail("SAI Compiler: REFERENCE requires a trait list.");
            var code='';
            for (var i in v[2]) {
              var r=v[2][i];
              References[lp+r[0]]=true; 
              if (r[1].indexOf('function')==0) {
                fail("SAI Compiler: Cannot define functions in a reference block. Sorry, maybe someday.");
              }
              code+='var '+lp+r[0]+'='+r[1]+';\n'; 
            }
            return code;
          },
          function(k, typ, v, d, s) {
              if (!v) v=quoted('0.0.0-unspecified');
              var code='',isof=[];
              var isa=quoted(k);
              addToList('lock','isa')
              addToList('freeze','isof')
              code+='var isa=prototype.isa='+isa+';\n';
              isof.push('version:'+v);
              isof.push('isa:isa');
              isof.push('context:__context');
              if (typ) {
                isof.push('type:"'+typ+'"');
              }
              code+='var $bindfail=function(m){ throw new Error("SAI: A call to "+m+" on object "+isa+" has come unbound from any instance of that object. (If this is not in error, mark the declaration of "+m+" as unbound.)"); }\n';
              code+='prototype.isof['+isa+']={'+isof.join(',')+'};\n';
              var l;
              if (l=getList('lock')) code+='prototype.__tobelocked=prototype.__tobelocked.concat('+l+');\n';
              if (l=getList('freeze')) code+='prototype.__tobefrozen=prototype.__tobefrozen.concat('+l+');\n';
              code+=d.join('\n');
              code+=s.join('\n');
              clearLists();
              return code;
            },
          function(v) { return v },
          function(v) {
             var inherit='['+v.join(',')+']';
             var code='prototype.isof[prototype.isa].inherit=prototype.__inherits='+inherit+';\n';
             return code;
            },
          function(v) {
             return 'prototype.__contracts=prototype.__contracts.concat(['+v.join(',')+']);\n';
            },
          function(v, p1, p2) {
             addInstanceVar(v);
             var prop={get: undefined, set: undefined};
             prop[p1[0]]=p1[1];
             if (p2) {
               prop[p2[0]]=p2[1]; 
             }
             var ret='Object.defineProperty(prototype,"'+v+
               '",{configurable:true,enumerable:true,get:'+prop.get+
               ',set:'+prop.set+
               '});\n';
             addToList('lock',v);
             return ret;
          },
          function(g, w, b) { 
             if (!g) g='get'; 
             if (g=='get') w=null; 
             return [g,TaskFormatter({prefix:g,as:w,property:true,body:b,kind:'function'})]; 
            },
          function(v, k) {
             v.body=k;
             return TaskFormatter(v);    
            },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:"'"+v+"'",unbound:unbound,expects:x,as:w,kind:'function'};
           },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:v,expects:x,unbound:unbound,as:w,kind:'function*'};
           },
          function(v, unbound, x, o) { 
             addInstanceVar(v);
             var vn="'"+v+"'";
             var isthis='this['+vn+']?this:$bindfail('+vn+')';
             if (unbound) {
               isthis='this';
             }
             return {
              name:vn
              ,expects:x
              ,unbound:unbound
              ,as:o
              ,nothis:true
              ,kind:'function'
              ,preface:'var $='+isthis+'; return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
              };
            },
          function(v) { return "Symbol.iterator" },
          function(v) { return "'"+v+"'" },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function'});
          },
          ";",
          peg$literalExpectation(";", false),
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:'return '+b+';',kind:'function'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function*'});
          },
          function(o, option, x) {
            var f='';
            if (option=='any') {
              f="Promise.race("+x+")";
            } else if (option=='all') {
              f="Promise.all("+x+")";
            } else {
              f=x;
            }
            
            var b=RV('^{f}.then( function(){ return $_resolve.apply($,arguments); } ).catch( function(){ $_reject.apply($,arguments); });',{f:f});

            return TaskClauseFormatter({
              as:o
              ,block:b
              ,nodefaultparam:true
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(x, o, b) {
            return TaskClauseFormatter({
              expects:x
              ,as:o
              ,block:b
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(i, t) { return [i[1],t?t:true] },
          function(i) {return i},
          function(is, i) { is.push(i); return is; },
          function(t) { return [[['','_root'],t]] },
          "..",
          peg$literalExpectation("..", false),
          function(v) { return v+';' },
          function(v) { return v.join('') },
          "|",
          peg$literalExpectation("|", false),
          function(i) { return options.pipers[i];},
          function(i) { return options.pipers[i].clauses[i].expr        },
          function(i, o) { return o },
          function(i) { return options.pipers[i].clauses[i].exprs       },
          function(i) { return options.pipers[i].clauses[i].outblock    },
          function(i) { return options.pipers[i].clauses[i].valexpr     },
          function(i) { return options.pipers[i].clauses[i].valoutblock },
          function(i) { return options.pipers[i].clauses[i].valuse      },
          function(i) { return options.pipers[i].clauses[i].use         },
          function(i) { return options.pipers[i].clauses[i].none        },
          function(i, a) {
             var opi=options.pipers[i];
              var work={
                clause: i,
                syntax: a.syntax,
                type: i+"."+a.syntax,
                args: a
              };
              var tools={
                  addlocal:function(v){ if (!v) v=tempvar(); addLocal(v); return v; },
                  replacer:RV,
                  tasker:TaskClauseFormatter
              };
              var result=opi.handler({work:work,tools:tools});
              if (result.error) fail(result.error);

              if (opi.tools.length) for (var tc=0; tc<opi.tools.length; tc++) AddTool(opi.tools[tc]);
              if (result.tools && result.tools.length) for (var tc=0; tc<result.tools.length; tc++) AddTool(result.tools[tc]);

              return result.leftright || ['',''];
           },
          function(v, o, b) {
             return {
               syntax: 'valoutblock',
               val: v,
               out: o,
               block: b
             };
           },
          function(o, b) {
             return {
               syntax: 'outblock',
               out: o,
               block: b
             };
           },
          function(v, u) {
             return {
               syntax: 'valuse',
               val: v,
               use: u
             };
           },
          function(u) {
             return {
               syntax: 'use',
               use: u
             };
           },
          function(v, x) {
             return {
               syntax: 'valexpr',
               val: v,
               expr: x
             };
           },
          function(x) {
             return {
               syntax: 'exprs',
               exprs: x
             };
           },
          function(x) {
             return {
               syntax: 'expr',
               expr: x
             };
           },
          function() {
             return {
               syntax: 'none'
             };
           },
          function(x) { return x; },
          function(i) { return options.constructs[i]; },
          function(i) {return options.constructs[i].clauses[i].exproutblock},
          function(i, ca) {return ca},
          function(i) {return options.constructs[i].clauses[i].exprout},
          function(i) {return options.constructs[i].clauses[i].exprsblock},
          function(i) {return options.constructs[i].clauses[i].exprsoutblock},
          function(i) {return options.constructs[i].clauses[i].exprusing},
          function(i) {return options.constructs[i].clauses[i].outblock},
          function(i) {return options.constructs[i].clauses[i].block},
          function(i) {return options.constructs[i].clauses[i].exprs},
          function(i) {return options.constructs[i].clauses[i].verb},
          function(i) {return options.constructs[i].clauses[i].none},
          function(i, a, cli) {
                if (cli===i && !options.constructs[i].repeats) return false;
                return options.constructs[i].clauses[cli];
              },
          function(i, a, cli) {return options.constructs[i].clauses[cli].exproutblock},
          function(i, a, cli, claa) {return claa},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprout},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprsblock},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprsoutblock},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprusing},
          function(i, a, cli) {return options.constructs[i].clauses[cli].outblock},
          function(i, a, cli) {return options.constructs[i].clauses[cli].block},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprs},
          function(i, a, cli) {return options.constructs[i].clauses[cli].verb},
          function(i, a, cli) {return options.constructs[i].clauses[cli].none},
          function(i, a, cli, cla) {return [cli,cla];},
          function(i, a, cl) {
             
               var work=[[i,a]].concat(cl);
               var work2=[];
               for (var i1=0; i1<work.length; i1++) {
                 var j=work[i1];
                 if (j[1].syntax === 'error') {
                   fail("SAI Compiler: Error in "+j[0]+" / "+i+" (this is a propogated error, look within the clause for syntax faults).",j[1].location);
                 }
                 work2.push({
                   clause: j[0],
                   syntax: j[1].syntax,
                   type: j[0]+'.'+j[1].syntax,
                   args: j[1]
                 });
               }
              var result=options.constructs[i].handler({
                clauses:work2,
                tools:{
                  addlocal:function(v){ if (!v) v=tempvar(); addLocal(v); return v; },
                  replacer:RV,
                  tasker:TaskClauseFormatter
                }
              });
              if (result.error) fail(result.error);
              return result.body;
           },
          peg$anyExpectation(),
          function() { return { syntax: 'error', location: location().start.offset }; },
          function(pl, mo, b) { return {
            syntax: 'exprsoutblock',
            exprs: pl,
            out: mo,
            block: b
          }; },
          function(x, mo, b) { return {
            syntax: 'exproutblock',
            expr: x,
            out: mo,
            block: b
          }; },
          function(x, mo) { return {
            syntax: 'exprout',
            expr: x,
            out: mo,
          }; },
          function(x, task) { return {
            syntax: 'exprusing',
            expr: x,
            using: task
          }; },
          function(mo, b) { return {
            syntax: 'outblock',
            out: mo,
            block: b
          }; },
          function(b) { return {
            syntax: 'block',
            block: b
          }; },
          function(pl) { return {
            syntax: 'exprs',
            exprs: pl
          }; },
          function(pl, b) { return {
            syntax: 'exprsblock',
            exprs: pl,
            block: b
          }; },
          function(v) { return {
            syntax: 'verb',
            verb: v
          }; },
          function() { return { 
            syntax: 'none' 
          }; },
          function() { return 'var $=this;\n' },
          function() { return ';' },
          function(value, out, block) {
                var r={this:(out?out:tempvar())};
                var code=RV('var ^{this}=',r)+value+RV(';\n'+block+'\n',r);
                return code; 
            },
          function(a, b) {
             return RV('var ^{t1}=^{v1}; var ^{t2}=^{v2}; ^{v2}=^{t1}; ^{v1}=^{t2};',{t1:tempvar(),t2:tempvar(),v1:a,v2:b});
           },
          function(t) { return t },
          function(t) { return t.join(''); },
          function(v) { return v+'=('+v+' || 0)+1;\n'; },
          function(v) { return v+'--;\n'; },
          function(v) { return 'delete '+v+';\n'; },
          ",",
          peg$literalExpectation(",", false),
          function(t, v) { return v },
          function(t, v) { return v.concat(t) },
          function(v) { return v.reduce(function(a,b){return a.concat(b)}) },
          "-",
          peg$literalExpectation("-", false),
          function(l, e) {
               fail('SAI Compiler: the "set val - expr" construct is unclear. Please use "set val to -expr" or "set val self - expr" as appropriate.');
             },
          function(l, o, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) fail("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(itselfops[o], {'1':l[i], '2':RV(e,{self:l[i]}) } )+';\n';
             }
             return code;
           },
          function(l, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) fail("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             if (l.length==1) return l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+=l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) fail("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(unops[o],{'1':l[i]})+';\n';
             }
             return code;
           },
          function(l, o) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) fail("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+= l[i]+'='+o[0]+l[i]+o[1]+';\n';
             }
             return code;
           },
          function(l, o, e) {
             fail("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function(l, e) {
             for (var i in l) {
               //console.log("local scope check "+l[i]);
               if ('$.'==l[i].substring(0,2)) CheckScope(l[i].substring(2),"local-1");
               if (lp==l[i].substring(0,lp.length)) CheckScope(l[i],"local-2");
             }
             if (l.length==1) return 'let '+l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+='let '+l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             fail("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function() { return 'local '; },
          "+",
          peg$literalExpectation("+", false),
          "**",
          peg$literalExpectation("**", false),
          "*",
          peg$literalExpectation("*", false),
          "/",
          peg$literalExpectation("/", false),
          "%",
          peg$literalExpectation("%", false),
          "<<",
          peg$literalExpectation("<<", false),
          ">>",
          peg$literalExpectation(">>", false),
          ">>>",
          peg$literalExpectation(">>>", false),
          "?>",
          peg$literalExpectation("?>", false),
          "?<",
          peg$literalExpectation("?<", false),
          "?",
          peg$literalExpectation("?", false),
          function(v) { return v+';\n'; },
          function(v) { return v+";\n"; },
          function(v) { return '$AI.drain_op('+v+');\n'; },
          function(v, a) { return [v].concat(a) },
          function(v) {
              var j=v.length;
              if (!j) fail("SAI Compiler: Expected something to assign into");
              if (j==1) {
                var pattern=accessors.firststore[v[0][0]];
                if (!pattern) fail("SAI Compiler: Couldn't construct recipient from "+v);
                return pattern[0] + v[0][1] + pattern[1];
              }
              j--;
              var code='';
              var patternbase=accessors.firstfetch;
              var i=0; while (i<j) {
                var pattern=patternbase[v[i][0]]; patternbase=accessors.nextfetch;
                if (!pattern) fail("SAI Compiler: Couldn't construct recipient from "+v);
                code+=pattern[0] + v[i][1] + pattern[1];
                i++;
              }
              var pattern=accessors.laststore[v[j][0]];
              if (!pattern) fail("SAI Compiler: Couldn't construct recipient from "+v);
              code= code+pattern[0]+v[j][1]+pattern[1];
              return code;
            },
          function(v) { return ValueCompositor(v,false) },
          function(v) { return ValueCompositor(v,true) },
          function(v) {
              var verb='',stem='';
              if (v[0][0]=='local') {
                var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
                var binding=options.globals[test];
                if (binding) {
                  v[0][0]='bound';
                  v[0][1]=binding;
                }
              }
              var patternbase=accessors.firstfetch;
              var i=0; while (i<v.length) {
                var pattern=patternbase[v[i][0]]; 
                patternbase=accessors.nextfetch;
                if (!pattern) fail("SAI Compiler: VV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
                stem+=verb;
                verb=pattern[0] + v[i][1] + pattern[1];
          //      console.log("VV"+i+": stem:"+stem+" verb:"+verb);
                i++;
              }
              return [stem,verb];
            },
          function(v) { return [['literal',v]] },
          function() { return [['super','']]; },
          function(x, y) { 
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
            },
          function(x, y) {
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
           },
          function() { return [['it','']] },
          function() { return [['key','']]},
          function() { return [['counter','']]},
          function() { return [['trial','']]},
          function() { return [['sum','']]},
          function() { return [['self','']]},
          function() { return [['error','']]},
          function(v) { return [[ 'attribute', v ]] },
          "'s",
          peg$literalExpectation("'s", false),
          function(p) { 
             return [[ 'function', p?p[1]:'' ]] 
          },
          function(v) { return [[ 'it', ''],[ 'attribute', v ]] },
          function(v) { return [[ 'it', ''],[ 'index', v ]] },
          function() { return [[ 'it', '']] },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(v) { return [[ 'index', v ]] },
          "\\",
          peg$literalExpectation("\\", false),
          function(v) { return [['index',v]] },
          ".",
          peg$literalExpectation(".", false),
          function(v) { return [[ 'paren', v ]] },
          function(v) { 
             //console.log("LLocal "+v);
             if (InstanceVars[v]) {
               usedMemberVar=v;
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v) { 
             //console.log("RLocal "+v);
             if (InstanceVars[v]) {
               usedMemberVar=v;
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) {
               v=checkLocal(lp+v,v);
             } else {
               v=lp+v;
             }
             return [[ 'local',v ]];
          },
          "$$",
          peg$literalExpectation("$$", false),
          function() { return [['arguments','']]},
          "$",
          peg$literalExpectation("$", false),
          function(v) { return [[ 'parameters','' ],['attribute',v]] },
          function() { return [[ 'parameters','' ]]},
          function(v) { return [['literal',v]]},
          "~",
          peg$literalExpectation("~", false),
          function(v) { return [['global',v]] },
          "@",
          peg$literalExpectation("@", false),
          function(v) { return [['this',''],[ 'attribute',v ]] },
          "@@",
          peg$literalExpectation("@@", false),
          function(v) { return [['currentthis',''],[ 'attribute',v ]] },
          function() { return [['currentthis','']] },
          function() { return [['this','']] },
          /^[a-zA-Z_0-9]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false),
          function(k, v) { 
               addToList('freeze',k);
               addInstanceVar(k);
               return 'prototype["'+k+'"]='+v[1]+';\n';
             },
          function(v) { 
          //    addToList('lock',i);
              addInstanceVars(v);
              var code='';
              code+='var t='+v[1]+';\nfor (var i in t) { prototype.__tobelocked.push(i); prototype[i]=t[i]; };\n'; 
              return code;
            },
          function(v) {
              var ivar=GlobVar();
              addInstanceVars(v);
              var proof='var '+ivar+'=function(){ var $=this; return '+v[1]+'; }\nfor (var i in '+ivar+'()) { prototype[i]=undefined; };\n'; 
              var sup=GlobVar();
              var setup= 'var '+sup+'=prototype.Constructor || function(){};\nprototype.Constructor=function() {\n'+sup+'.call(this);\n  var t='+ivar+'();\n  for (var i in t) if (t[i] !== undefined) this[i]=t[i];\n};\n'; 
              return proof+setup;
            },
          function(maj, min, patch) {
             return "'"+maj+"."+min+"."+patch+"'";
           },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields', '{'+w.join(',')+'}',v] },
          function(v) { return ['array',v.join(','),v] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields','{'+w.join(',')+'}',v] },
          function() { return null },
          function(v) { return ['literal',v] },
          function() { return ['literal','[]']; },
          function() { return ['literal','{}']; },
          function(v) { return ['literal','['+v.join(',')+']'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { return v[1] },
          /^[^\n},);|]/,
          peg$classExpectation(["\n", "}", ",", ")", ";", "|"], true, false),
          ")",
          peg$literalExpectation(")", false),
          function(v) { return quoted(v.join('').trim()) },
          function(v, t) { return v.concat(t) },
          function(k) { return [[k,true]] },
          function(k, v) { return [[k,v]] },
          function(v, t) { 
             var r=[]; 
             for (var i in v) r=r.concat(v[i]); 
             r=r.concat(t);  
             return r; 
          },
          function(v, t) { var r=[]; for (var i in v) r=r.concat(v[i]); r=r.concat(t); return r; },
          function(v) { return v[0][1] },
          function(o) {
             var v=[];
             for (var i in o) v.push(o[i][0][1]);
             return v;
           },
          function(k) {return k},
          function(k, v) { k.push(v); return k; },
          function(v) {
             
             CheckScope(v,"parameter/as/given");
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v, c) {return c},
          function(v, c) {
             for (var i in c) {
               v=c[i][0]+v+c[i][1];
             }
             return v;
           },
          function() { // test 'sow *'
               return ['$AI.iterate_op(',')'];
             },
          function() { // test 'keys comp*'
               return ['$AI.keys_op(',')'];
             },
          function() { // test 'values comp*'
               return ['$AI.values_op(',')'];
             },
          function(x) {
             return ['$AI.concat_op(' , ','+x+')' ];
           },
          function() { return ['$AI.collect_op(',')']; },
          function() { return ['$AI.enlist_op(',')']; },
          function() { return ['$AI.entrait_op(',')']; },
          function(x) { return x },
          function(o, b) {
              if (!o) o=[lp+'a',lp+'b'];
              var block=RV('function('+o[0]+','+o[1]+'){'+b+'}');
              return ['$AI.sort_op(' , ','+block+')']; 
            },
          function(x) {
             return ['$AI.sort_op(' , ','+x+')' ];
            },
          function(x) { // test 'thru inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'}',{this:'$_v',key:'$_k'});
               return ['$AI.map_op(' , ','+block+' )']; 
            },
          function(o, b) { // test 'thru block'
               var block=RV('function(^{this},^{key}){'+b+'; return ^{this};}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.map_op(' , ','+block+' )']; 
            },
          function(x) { // test 'thru using'
             return ['$AI.map_op(' , ','+x+')' ];
            },
          function(x) { // test 'audit inline *'
               var block=RV('function(^{this},^{key}){ '+x+'; }',{this:'$_v',key:'$_k'});
               return ['$AI.audit_op(' , ','+block+' )']; 
            },
          function(o, b) { // test 'audit block*'
               var block=RV('function(^{this},^{key}){'+b+' }',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.audit_op(' , ','+block+' )']; 
            },
          function(x) { // test 'audit using*'
             return ['$AI.audit_op(' , ','+x+')' ];
            },
          function(into, o, b) {
              if (!o) o=[];
              if (!o[0]) o[0]=lp+'sum'; 
              if (!o[1]) o[1]='$_v';
              if (!o[2]) o[2]='$_k';
              b+='return ^{sum};\n';
              var block=RV('function(^{sum},^{this},^{key}){'+b+'}',{sum:o[0],this:o[1],key:o[2]});
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+block+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+block+','+into+')' ];
              }
            },
          function(into, b) {
              var block=RV('function(^{sum},^{this},^{key}){ return '+b+';}',{sum:lp+'sum',this:'$_v',key:'$_k'});
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+block+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+block+','+into+')' ];
              }
            },
          function(into, x) {
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+x+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+x+','+into+')' ];
              }
            },
          function(x) { // test 'filter inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'; }',{this:'$_v',key:'$_k'});
               //console.log("filter comp exp");
               return ['$AI.filter_op(' , ','+block+' )']; 
            },
          function(o, b) {
               var block=RV('function(^{this},^{key}){'+b+'}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.filter_op(' , ','+block+')']; 
            },
          function(x) {
              return ['$AI.filter_op(' , ','+x+')' ];
            },
          function(x) { // test 'alter inline*'
               var block=RV('function(^{this}){ return '+x+'; }',{this:'$_v'});
               return [ '$AI.alter_op(' , ','+block+')']; 
            },
          function(o, b) { // test 'alter block*'
               var block=RV('function(^{this}){'+b+'; return ^{this}; }',{this:o?o[0]:'$_v'});
               return [ '$AI.alter_op(' , ','+block+')']; 
            },
          function(x) { // test 'alter using'
               return [ '$AI.alter_op(' , ','+x+')']; 
            },
          function(x) { // test 'observe inline'
               var block=RV('function(^{this}){ '+x+'; }',{this:'$_v'});
               return [ '$AI.observe_op(' , ','+block+')']; 
            },
          function(o, b) { // test 'observe block'
               var block=RV('function(^{this}){'+b+'; }',{this:o?o[0]:'$_v'});
               return [ '$AI.observe_op(' , ','+block+')']; 
            },
          function(x) { // test 'observe using'
               return [ '$AI.observe_op(' , ','+x+')']; 
            },
          function(q) {
             var code='({<>})';
             q=[].concat(q);
             var expr={quality:[],having:[],by:[],map:[],limit:[]};
             for (var i in q) { 
               for (var j=0; j<q[i].length; j+=2) {
                 expr[q[i][j]].push(q[i][j+1]); 
               }
             }
             var conds=[];
             if (expr.quality.length) {
               for (var i in expr.quality) { 
                 conds.push(expr.quality[i]); 
                }
             }
             if (expr.having.length) {
               var conds=conds.concat(expr.having.map(function(c){ return '('+c+')';}));
             }
             if (conds.length) {
               code=RV('$AI.filter_op(^{source},function($_v,$_k){ return ^{block}; })',{source:code,block:conds.join(' && '),this:'$_v',key:'$_k'});
             }
             if (expr.limit.length && expr.limit[0].extract && expr.by.length) { // first/last singleton with a sort
               code='$AI.reduce_op('+code+',function(a,b) { if (undefined===a) return b; var r; ';
               expr.by[0][1]*=expr.limit[0].sort; // flip sort if looking for "last"
               var conds=expr.by.map(function(c){
                 c[0]=c[0]||'^{this}';
                 var x1=RV(c[0],{this:'a'});
                 var x2=RV(c[0],{this:'b'});
                 return RV('r=$AI.compare_op(^{x1},^{x2}); if (r<0) return ^{lt}; if (r>0) return ^{gt};\n',{x1:x1,x2:x2,lt:(c[1]>0?'a':'b'),gt:(c[1]>0?'b':'a')});
               });
               code+=conds.join(' ')+'return a; },undefined)';     
             } else {
               if (expr.by.length) {
                 code='$AI.sort_op('+code+',function(a,b) { var aa,bb; ';
                 var conds=expr.by.map(function(c){
                   c[0]=c[0]||'^{this}';
                   var x1=RV('aa='+c[0]+'; ',{this:'a'});
                   var x2=RV('bb='+c[0]+'; ',{this:'b'});
                   return x1+x2+RV('if (aa<bb) return ^{lt}; if (aa>bb) return ^{gt}; ',{c:c[0],lt:-c[1],gt:c[1]});
                 });
                 code+=conds.join(' ')+'return 0; })';
               }
               if (expr.limit.length) {
                 var l=expr.limit[0];
                 if (l.slice) {
                   code='$AI.slice_op('+code+','+l.start+','+l.len+')';
                 }
                 if (l.extract) { 
                   code='$AI.element_op('+code+',0)';
                 }
                 if (l.count) {
                   code='$AI.count_op('+code+')';
                 }
               }
             } 
             return code.split('{<>}');
           },
          function() { return ['limit',{extract:true,sort:1}]; },
          function() { return ['limit',{extract:true,slice:true,start:-1}]; },
          function(s, c) { return ['limit',{slice:true,start:s,len:c}]; },
          function(s) { return ['limit',{slice:true,start:undefined,len:s}]; },
          function() { return ['limit',{count:true}]; },
          function(v) { return ['quality', '^{this}["'+v+'"]'] },
          function(v) { return ['quality', '(!^{this}["'+v+'"])'] },
          function(v) { return ['having',v] },
          function(d) { return ['by',[null,d?d:1]] },
          function(v, d) { return ['by',[v,d?d:1]] },
          function(v) { return ['by',[v,-1],'limit',{extract:true,sort:1}]},
          function(v) { return ['by',[v,1],'limit',{extract:true,sort:1}]},
          function() { return 1 },
          function() { return -1 },
          function(l, o, r) { return '('+l+o+r+')' },
          function(c, l) { return '($AI.xor_op('+c+','+l+'))' },
          function(l, f) { return '(!('+l+' && '+f+'))' },
          function(l, f) { return '(!('+l+' || '+f+'))' },
          "??",
          peg$literalExpectation("??", false),
          "::",
          peg$literalExpectation("::", false),
          function(c, l, r) { 
               return RV('((^{c})?(^{l}):(^{r}))',{c:c,l:l,r:r}); 
             },
          function() { return '&&' },
          function() { return '||' },
          function(l, o, r) { return o+'('+l+','+r+')' },
          ">=",
          peg$literalExpectation(">=", false),
          function() { return '>=' },
          ">",
          peg$literalExpectation(">", false),
          function() { return '>' },
          "=",
          peg$literalExpectation("=", false),
          function() { return '==' },
          function() { return '!==' },
          function() { return '===' },
          "<=",
          peg$literalExpectation("<=", false),
          function() { return '<=' },
          "<",
          peg$literalExpectation("<", false),
          function() { return '<' },
          "!=",
          peg$literalExpectation("!=", false),
          function() { return '!=' },
          function() { return '$AI.max_op' },
          function() { return '$AI.min_op' },
          "<=>",
          peg$literalExpectation("<=>", false),
          function() { return '$AI.compare_op' },
          function() {return '|' },
          function() {return '&'},
          function() { return '^'},
          function(l, r) { // test '**'
             return 'Math.pow('+l+','+r+')' 
           },
          function(l, op, x) {
             var p=undefined;
             if (x) {
               p=x[1];
             }
             return '('+op+').call($,('+l+'),'+p+')';
           },
          function(l, r) { // test 'overlay *'
             return '$AI.overlay_op('+l+','+r+')' 
           },
          function(l, r) { // test 'select *'
             return '$AI.select_op('+l+','+r+')' 
           },
          function(l, r) { // test 'delete *'
             return '$AI.delete_op($AI.clone_op('+l+'),'+r+')' 
           },
          function(l, r) { 
             return '$AI.expects_op('+l+','+r+')' 
           },
          function(l, r) { 
             return '('+l+').isof['+r+']'; 
           },
          function(l, v) {  // test 'default*'
               SafetyFetch=true; 
               return RV('((undefined!==($_b=^{l}))?$_b:^{v})',{l:l,v:v}); 
             },
          function(v) { return '(0-('+v+'))' },
          function(v) { return '(~('+v+'))' },
          function(v) { return '(!('+v+'))' },
          function(v) { return 'typeof ('+v+')'; },
          function(v) { return 'isNaN('+v+')'; },
          function(v) { return '($AI.number_op('+v+'))'; },
          function(v) { return '(undefined!=='+v+')' },
          function(v) { return '$AI.clone_op('+v+')'; },
          function(v) { return  'function(){return ('+v+').apply($,arguments);}'; },
          function(o) { return o },
          "(",
          peg$literalExpectation("(", false),
          function(v, o) { 
             if (o) {
               addLocal(o);
               return RV('(^{out}='+v+')',{out:o}); 
             } else {
               return '('+v+')'; 
             }
            },
          /^[igm]/,
          peg$classExpectation(["i", "g", "m"], false, false),
          function(x, m) {
             var re= '/'+x.join('')+'/'+m.join('');
             return re;
           },
          "\\/",
          peg$literalExpectation("\\/", false),
          /^[^\n\r\/]/,
          peg$classExpectation(["\n", "\r", "/"], true, false),
          /^[.([|]/,
          peg$classExpectation([".", "(", "[", "|"], false, false),
          function(v) {var hop=ResWords.hasOwnProperty(v);return hop;},
          function(v) { return v; },
          /^[a-zA-Z_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
          function(v1, v2) { return v1+v2.join('') },
          function() { return 'NaN' },
          function() { return 'Infinity' },
          function() { return 'it' },
          function(v) {
             return AssembleVerb(v);
           },
          "'d",
          peg$literalExpectation("'d", false),
          function(v, b, o) {
            return AssembleVerb([{ base:b, verb:'.'+v, param:(o?o[1]:'')}]);
          },
          function(v, o) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$'+(o?(','+o[1]):'') }]; 
               return [{ base:v[0], verb:v[1], param:(o?o[1]:'') }]
            },
          function(v) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$' }]; 
               return [{ base:v[0], verb:v[1], param:'' }]
             },
          function(v, c) {
             c[0].base=v;
             return AssembleVerb(c);
           },
          function(l) { 
               return l ;
             },
          function(c) {
               return {left:c[0], right: c[1]}
            },
          function(i, o) {
               return {verb:'.'+i, param:(o?o[1]:''), test:true}; 
            },
          function(v, o) { 
             return '$AI.create_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) { 
             return '$AI.singleton_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) {
             return 'new '+v+'('+(o?o[1]:'')+')'; 
           },
          /^[a-zA-Z0-9_\/]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "/"], false, false),
          function(n) { return n.join('') },
          "o",
          peg$literalExpectation("o", false),
          function(v) { return v*(Math.PI/180) },
          "0b",
          peg$literalExpectation("0b", false),
          /^[0-1]/,
          peg$classExpectation([["0", "1"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*2+Number(v[i++]));
             return r.toString();
           },
          "0o",
          peg$literalExpectation("0o", false),
          /^[0-7]/,
          peg$classExpectation([["0", "7"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*8+Number(v[i++]));
             return r.toString();
           },
          "0x",
          peg$literalExpectation("0x", false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*16+v[i++]);
             return r;
           },
          "0",
          peg$literalExpectation("0", false),
          function() { return 0; },
          "1",
          peg$literalExpectation("1", false),
          function() { return 1; },
          "2",
          peg$literalExpectation("2", false),
          function() { return 2; },
          "3",
          peg$literalExpectation("3", false),
          function() { return 3; },
          "4",
          peg$literalExpectation("4", false),
          function() { return 4; },
          "5",
          peg$literalExpectation("5", false),
          function() { return 5; },
          "6",
          peg$literalExpectation("6", false),
          function() { return 6; },
          "7",
          peg$literalExpectation("7", false),
          function() { return 7; },
          "8",
          peg$literalExpectation("8", false),
          function() { return 8; },
          "9",
          peg$literalExpectation("9", false),
          function() { return 9; },
          "a",
          peg$literalExpectation("a", false),
          "A",
          peg$literalExpectation("A", false),
          function() { return 10; },
          "b",
          peg$literalExpectation("b", false),
          "B",
          peg$literalExpectation("B", false),
          function() { return 11; },
          "c",
          peg$literalExpectation("c", false),
          "C",
          peg$literalExpectation("C", false),
          function() { return 12; },
          "d",
          peg$literalExpectation("d", false),
          "D",
          peg$literalExpectation("D", false),
          function() { return 13; },
          "e",
          peg$literalExpectation("e", false),
          "E",
          peg$literalExpectation("E", false),
          function() { return 14; },
          "f",
          peg$literalExpectation("f", false),
          "F",
          peg$literalExpectation("F", false),
          function() { return 15; },
          function(r, x) { return r+'e'+x },
          function(w, f) { return Number(w+'.'+f) },
          function(v) { return -v },
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          function(v) { return parseInt(v.join('')) },
          "'",
          peg$literalExpectation("'", false),
          function(v) { return assembleLiteral(v) },
          "\"",
          peg$literalExpectation("\"", false),
          "`",
          peg$literalExpectation("`", false),
          /^[^'\n]/,
          peg$classExpectation(["'", "\n"], true, false),
          function(v) { return [true,v] },
          /^[^"\n]/,
          peg$classExpectation(["\"", "\n"], true, false),
          "'''",
          peg$literalExpectation("'''", false),
          function(v) { return v},
          function(v) { return v.join("+'\\n'+"); },
          "^",
          peg$literalExpectation("^", false),
          function() { return [true, "\\"+"x5e"] },
          /^[^\n]/,
          peg$classExpectation(["\n"], true, false),
          function() { return [true,'\\'+"'"] },
          function() { return [true,'\\'+'"'] },
          function() { return [true,'\\'+'$'] },
          "&#123;",
          peg$literalExpectation("&#123;", false),
          function() { return [true,'\\'+'&#123;'] },
          "&#125;",
          peg$literalExpectation("&#125;", false),
          function() { return [true,'\\'+'&#125;'] },
          "n",
          peg$literalExpectation("n", false),
          function() { return [true,'\\'+'n'] },
          "r",
          peg$literalExpectation("r", false),
          function() { return [true,'\\'+'r'] },
          "t",
          peg$literalExpectation("t", false),
          function() { return [true,'\\'+'t'] },
          function() { return [true,'\\'+'b'] },
          function() { return [true,'\\'+'f'] },
          "x",
          peg$literalExpectation("x", false),
          /^[0-9a-fA-F]/,
          peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
          function(a, b) { return [true,'\\'+'x'+a+b ] },
          "u",
          peg$literalExpectation("u", false),
          function(a, b, c, d) { return [true,'\\'+'u'+a+b+c+d] },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function(a) { return [true,'\\'+'u{'+a.join('')+'}' ] },
          "${",
          peg$literalExpectation("${", false),
          function(v) { return [false,v] },
          /^[^a-zA-Z0-9_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], true, false),
          "...",
          peg$literalExpectation("...", false),
          /^[ ]/,
          peg$classExpectation([" "], false, false),
          "//",
          peg$literalExpectation("//", false),
          /^[^\r\n]/,
          peg$classExpectation(["\r", "\n"], true, false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "__source",
          peg$literalExpectation("__source", false),
          "__offset",
          peg$literalExpectation("__offset", false),
          "__column",
          peg$literalExpectation("__column", false),
          "__line",
          peg$literalExpectation("__line", false),
          "adopt",
          peg$literalExpectation("adopt", false),
          "all",
          peg$literalExpectation("all", false),
          "and",
          peg$literalExpectation("and", false),
          "andb",
          peg$literalExpectation("andb", false),
          "any",
          peg$literalExpectation("any", false),
          "arguments",
          peg$literalExpectation("arguments", false),
          "array",
          peg$literalExpectation("array", false),
          "as",
          peg$literalExpectation("as", false),
          "asc",
          peg$literalExpectation("asc", false),
          "audit",
          peg$literalExpectation("audit", false),
          "bind",
          peg$literalExpectation("bind", false),
          "blank",
          peg$literalExpectation("blank", false),
          "by",
          peg$literalExpectation("by", false),
          "catch",
          peg$literalExpectation("catch", false),
          "chain",
          peg$literalExpectation("chain", false),
          "collect",
          peg$literalExpectation("collect", false),
          "copy",
          peg$literalExpectation("copy", false),
          "concat",
          peg$literalExpectation("concat", false),
          "contract",
          peg$literalExpectation("contract", false),
          "count",
          peg$literalExpectation("count", false),
          "counter",
          peg$literalExpectation("counter", false),
          "create",
          peg$literalExpectation("create", false),
          "dec",
          peg$literalExpectation("dec", false),
          "default",
          peg$literalExpectation("default", false),
          "delete",
          peg$literalExpectation("delete", false),
          "desc",
          peg$literalExpectation("desc", false),
          "do",
          peg$literalExpectation("do", false),
          "else",
          peg$literalExpectation("else", false),
          "empty",
          peg$literalExpectation("empty", false),
          "enum",
          peg$literalExpectation("enum", false),
          "enlist",
          peg$literalExpectation("enlist", false),
          "entrait",
          peg$literalExpectation("entrait", false),
          "error",
          peg$literalExpectation("error", false),
          "exists",
          peg$literalExpectation("exists", false),
          "expects",
          peg$literalExpectation("expects", false),
          "fields",
          peg$literalExpectation("fields", false),
          "first",
          peg$literalExpectation("first", false),
          "from",
          peg$literalExpectation("from", false),
          "get",
          peg$literalExpectation("get", false),
          "given",
          peg$literalExpectation("given", false),
          "has",
          peg$literalExpectation("has", false),
          "highest",
          peg$literalExpectation("highest", false),
          "Infinity",
          peg$literalExpectation("Infinity", false),
          "instance",
          peg$literalExpectation("instance", false),
          "into",
          peg$literalExpectation("into", false),
          "inc",
          peg$literalExpectation("inc", false),
          "inherit",
          peg$literalExpectation("inherit", false),
          "isnt",
          peg$literalExpectation("isnt", false),
          "isNaN",
          peg$literalExpectation("isNaN", false),
          "is",
          peg$literalExpectation("is", false),
          "isof",
          peg$literalExpectation("isof", false),
          "iterate",
          peg$literalExpectation("iterate", false),
          "Iterator",
          peg$literalExpectation("Iterator", false),
          "it",
          peg$literalExpectation("it", false),
          "keys",
          peg$literalExpectation("keys", false),
          "key",
          peg$literalExpectation("key", false),
          "last",
          peg$literalExpectation("last", false),
          "limit",
          peg$literalExpectation("limit", false),
          "list",
          peg$literalExpectation("list", false),
          "local",
          peg$literalExpectation("local", false),
          "lowest",
          peg$literalExpectation("lowest", false),
          "me",
          peg$literalExpectation("me", false),
          "my",
          peg$literalExpectation("my", false),
          "main",
          peg$literalExpectation("main", false),
          "NaN",
          peg$literalExpectation("NaN", false),
          "nand",
          peg$literalExpectation("nand", false),
          "new",
          peg$literalExpectation("new", false),
          "nop",
          peg$literalExpectation("nop", false),
          "nor",
          peg$literalExpectation("nor", false),
          "not",
          peg$literalExpectation("not", false),
          "notb",
          peg$literalExpectation("notb", false),
          "number",
          peg$literalExpectation("number", false),
          "null",
          peg$literalExpectation("null", false),
          "object",
          peg$literalExpectation("object", false),
          "observe",
          peg$literalExpectation("observe", false),
          "orphan",
          peg$literalExpectation("orphan", false),
          "or",
          peg$literalExpectation("or", false),
          "orb",
          peg$literalExpectation("orb", false),
          "true",
          peg$literalExpectation("true", false),
          "false",
          peg$literalExpectation("false", false),
          "promise",
          peg$literalExpectation("promise", false),
          "process",
          peg$literalExpectation("process", false),
          "reference",
          peg$literalExpectation("reference", false),
          "select",
          peg$literalExpectation("select", false),
          "self",
          peg$literalExpectation("self", false),
          "set",
          peg$literalExpectation("set", false),
          "singleton",
          peg$literalExpectation("singleton", false),
          "sum",
          peg$literalExpectation("sum", false),
          "swap",
          peg$literalExpectation("swap", false),
          "super",
          peg$literalExpectation("super", false),
          "task",
          peg$literalExpectation("task", false),
          "then",
          peg$literalExpectation("then", false),
          "thru",
          peg$literalExpectation("thru", false),
          "traits",
          peg$literalExpectation("traits", false),
          "trial",
          peg$literalExpectation("trial", false),
          "try",
          peg$literalExpectation("try", false),
          "to",
          peg$literalExpectation("to", false),
          "typeof",
          peg$literalExpectation("typeof", false),
          "unbound",
          peg$literalExpectation("unbound", false),
          "undefined",
          peg$literalExpectation("undefined", false),
          "update",
          peg$literalExpectation("update", false),
          "using",
          peg$literalExpectation("using", false),
          "values",
          peg$literalExpectation("values", false),
          "via",
          peg$literalExpectation("via", false),
          "with",
          peg$literalExpectation("with", false),
          "xor",
          peg$literalExpectation("xor", false),
          "xorb",
          peg$literalExpectation("xorb", false),
          "!",
          peg$literalExpectation("!", false),
          "#",
          peg$literalExpectation("#", false),
          ":",
          peg$literalExpectation(":", false),
          function() { return ':' },
          "%%INDENT%%",
          peg$literalExpectation("%%INDENT%%", false),
          "%%DEDENT%%",
          peg$literalExpectation("%%DEDENT%%", false)
        ],

        peg$bytecode = [
          peg$decode("%;\xEE/M#;\".\" &\"/?$$;#/&#0#*;#&&&#/)$8#: #\"! )(#'#(\"'#&'#"),
          peg$decode("%;\x9D/1#;\xEF/($8\":!\"!!)(\"'#&'#"),
          peg$decode("%;\u014A/C#;\xEC/:$;\x80/1$;\xEF/($8$:\"$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0141/\xA4#;\xEC/\x9B$;\xC8/\x92$;\xEC/\x89$;\u0137.# &;\u014E.\" &\"/u$;\xEC/l$;\x7F.\" &\"/^$;\xEC/U$;\xEF/L$$;$0#*;$&/<$$;%0#*;%&/,$8+:#+%(&$! )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;&./ &;'.) &;(.# &;~/' 8!:$!! ).# &;\xEF"),
          peg$decode("%;*/' 8!:$!! ).# &;\xEF"),
          peg$decode("%;\u0126/C#;\xEC/:$;\x84/1$;\xEF/($8$:%$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u010A/C#;\xEC/:$;\x84/1$;\xEF/($8$:&$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC8/A#;)/8$;).\" &\"/*$8#:'##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\xEC/k#;\u011E.# &;\u014D/\\$;\xEC/S$;\x9B.\" &\"/E$;\xEC/<$;2/3$;\xEF/*$8':('#%#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;+/;#;2/2$;\xEF/)$8#:)#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;\xC8/\xA2#;\xEC/\x99$;\u0158.\" &\"/\x8B$;\xEC/\x82$;\u015A.\" &\"/t$;\xEC/k$;\u0152/b$;\xEC/Y$;1.\" &\"/K$;\xEC/B$;\x9B.\" &\"/4$;\xEC/+$8,:*,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u013B &%;,/\xA2#;\xEC/\x99$;\u0158.\" &\"/\x8B$;\xEC/\x82$;\u015A.\" &\"/t$;\xEC/k$;\u0149/b$;\xEC/Y$;1.\" &\"/K$;\xEC/B$;\x9B.\" &\"/4$;\xEC/+$8,:+,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAC &%;\xC8/\xA2#;\xEC/\x99$;\u0158.\" &\"/\x8B$;\xEC/\x82$;\u015A.\" &\"/t$;\xEC/k$;\u0148/b$;\xEC/Y$;1.\" &\"/K$;\xEC/B$;\x9B.\" &\"/4$;\xEC/+$8,:,,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u012C/' 8!:-!! )./ &%;\xC8/' 8!:.!! )"),
          peg$decode("%;1.\" &\"/S#;\xEC/J$;\x9B.\" &\"/<$;\xEC/3$;2/*$8%:/%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xEC/g$;\x9B.\" &\"/Y$;\xEC/P$20\"\"6071.\" &\"/<$;\xEC/3$;\x9D/*$8':2'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;1.\" &\"/S#;\xEC/J$;\x9B.\" &\"/<$;\xEC/3$;2/*$8%:3%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xEC/g$;\x9B.\" &\"/Y$;\xEC/P$20\"\"6071.\" &\"/<$;\xEC/3$;\x9D/*$8':3'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9B.\" &\"/Z#;\xEC/Q$;\xFC.) &;\xF9.# &;\xF8/<$;\xEC/3$;\x9D/*$8%:4%#$\" )(%'#($'#(#'#(\"'#&'#.b &%;1.\" &\"/S#;\xEC/J$;\x9B.\" &\"/<$;\xEC/3$;2/*$8%:5%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;y/I#;\xEC/@$;\x85.\" &\"/2$;\xEC/)$8$:6$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u011A/\x8D#;\xEC/\x84$$%;0/:#;\u0167/1$;\xEC/($8#:7#!\")(#'#(\"'#&'#0D*%;0/:#;\u0167/1$;\xEC/($8#:7#!\")(#'#(\"'#&'#&/2$;0/)$8$:8$\"! )($'#(#'#(\"'#&'#.M &%;\u011A/C#;\xEC/:$;\x85/1$;\xEC/($8$:9$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEC/j#;\xEF/a$;\u0169/X$;\xEF/O$;3/F$;\u016A/=$%<;\xEF=/##&'!&&#/($8':$'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.h &%;\xEC/^#2:\"\"6:7;/O$;\xEC/F$;5/=$%<;\xEF=/##&'!&&#/($8%:<%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;4/&#0#*;4&&&#/' 8!:=!! )"),
          peg$decode("%;5/1#;\xEF/($8\":$\"!!)(\"'#&'#"),
          peg$decode(";@.; &;O.5 &;M./ &;N.) &;L.# &;["),
          peg$decode("%2>\"\"6>7?/\u01AB#;\xEC/\u01A2$;\xC9/\u0199$9:@ ! -\"\"&!&#/\u0185$;\xEC/\u017C$%9:A !#-\"\"&!&#/2#;=/)$8\":B\"\"% )(\"'#&'#.\u0143 &%9:C !#-\"\"&!&#/2#;</)$8\":B\"\"% )(\"'#&'#.\u0119 &%9:D !#-\"\"&!&#/2#;8/)$8\":B\"\"% )(\"'#&'#.\xEF &%9:E !#-\"\"&!&#/2#;;/)$8\":B\"\"% )(\"'#&'#.\xC5 &%9:F !#-\"\"&!&#/2#;7/)$8\":B\"\"% )(\"'#&'#.\x9B &%9:G !#-\"\"&!&#/2#;9/)$8\":B\"\"% )(\"'#&'#.q &%9:H !#-\"\"&!&#/2#;:/)$8\":B\"\"% )(\"'#&'#.G &%9:I !#-\"\"&!&#/2#;>/)$8\":B\"\"% )(\"'#&'#/)$8&:J&\"# )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC3/S#;\xEC/J$;\x9B.\" &\"/<$;\xEC/3$;2/*$8%:K%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9B.\" &\"/2#;2/)$8\":L\"\"! )(\"'#&'#"),
          peg$decode("%;\xC3/M#;\xEC/D$;\u015D/;$;\xEB/2$;\xC3/)$8%:M%\"$ )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015D/:#;\xEB/1$;\xC3/($8#:N#! )(#'#(\"'#&'#"),
          peg$decode("%;\xC3/;#;\xEC/2$;?/)$8#:O#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\x80/' 8!:P!! )"),
          peg$decode("%;?/' 8!:Q!! )"),
          peg$decode("%;\xEC/& 8!:R! )"),
          peg$decode("%;\x9D/' 8!:S!! )._ &%;\u016C/U#;\xEC/L$;\x9D/C$;\xEC/:$;\u016D/1$;\xEC/($8&:S&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC9/\u0610#9:T ! -\"\"&!&#/\u05FC$;\xEC/\u05F3$%9:U !#-\"\"&!&#/2#;C/)$8\":V\"\"% )(\"'#&'#.\u0197 &%9:W !#-\"\"&!&#/2#;D/)$8\":V\"\"% )(\"'#&'#.\u016D &%9:X !#-\"\"&!&#/2#;I/)$8\":V\"\"% )(\"'#&'#.\u0143 &%9:Y !#-\"\"&!&#/2#;B/)$8\":V\"\"% )(\"'#&'#.\u0119 &%9:Z !#-\"\"&!&#/2#;E/)$8\":V\"\"% )(\"'#&'#.\xEF &%9:[ !#-\"\"&!&#/2#;F/)$8\":V\"\"% )(\"'#&'#.\xC5 &%9:\\ !#-\"\"&!&#/2#;G/)$8\":V\"\"% )(\"'#&'#.\x9B &%9:] !#-\"\"&!&#/2#;H/)$8\":V\"\"% )(\"'#&'#.q &%9:^ !#-\"\"&!&#/2#;J/)$8\":V\"\"% )(\"'#&'#.G &%9:_ !#-\"\"&!&#/2#;K/)$8\":V\"\"% )(\"'#&'#/\u044C$$%;\xEF/\u0222#;\xC8/\u0219$9:` #'$ -\"\"&!&#/\u0203$;\xEC/\u01FA$%9:a #*'#-\"\"&!&#/4#;C/+$8\":b\"$,)% )(\"'#&'#.\u01BB &%9:c #*'#-\"\"&!&#/4#;D/+$8\":b\"$,)% )(\"'#&'#.\u018D &%9:d #*'#-\"\"&!&#/4#;I/+$8\":b\"$,)% )(\"'#&'#.\u015F &%9:e #*'#-\"\"&!&#/4#;B/+$8\":b\"$,)% )(\"'#&'#.\u0131 &%9:f #*'#-\"\"&!&#/4#;E/+$8\":b\"$,)% )(\"'#&'#.\u0103 &%9:g #*'#-\"\"&!&#/4#;F/+$8\":b\"$,)% )(\"'#&'#.\xD5 &%9:h #*'#-\"\"&!&#/4#;G/+$8\":b\"$,)% )(\"'#&'#.\xA7 &%9:i #*'#-\"\"&!&#/4#;H/+$8\":b\"$,)% )(\"'#&'#.y &%9:j #*'#-\"\"&!&#/4#;J/+$8\":b\"$,)% )(\"'#&'#.K &%9:k #*'#-\"\"&!&#/4#;K/+$8\":b\"$,)% )(\"'#&'#/+$8%:l%$*'# )(%'#($'#(#'#(\"'#&'#0\u022C*%;\xEF/\u0222#;\xC8/\u0219$9:` #'$ -\"\"&!&#/\u0203$;\xEC/\u01FA$%9:a #*'#-\"\"&!&#/4#;C/+$8\":b\"$,)% )(\"'#&'#.\u01BB &%9:c #*'#-\"\"&!&#/4#;D/+$8\":b\"$,)% )(\"'#&'#.\u018D &%9:d #*'#-\"\"&!&#/4#;I/+$8\":b\"$,)% )(\"'#&'#.\u015F &%9:e #*'#-\"\"&!&#/4#;B/+$8\":b\"$,)% )(\"'#&'#.\u0131 &%9:f #*'#-\"\"&!&#/4#;E/+$8\":b\"$,)% )(\"'#&'#.\u0103 &%9:g #*'#-\"\"&!&#/4#;F/+$8\":b\"$,)% )(\"'#&'#.\xD5 &%9:h #*'#-\"\"&!&#/4#;G/+$8\":b\"$,)% )(\"'#&'#.\xA7 &%9:i #*'#-\"\"&!&#/4#;H/+$8\":b\"$,)% )(\"'#&'#.y &%9:j #*'#-\"\"&!&#/4#;J/+$8\":b\"$,)% )(\"'#&'#.K &%9:k #*'#-\"\"&!&#/4#;K/+$8\":b\"$,)% )(\"'#&'#/+$8%:l%$*'# )(%'#($'#(#'#(\"'#&'#&/*$8%:m%#$! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$1\"\"5!7n0(*1\"\"5!7n&/& 8!:o! )"),
          peg$decode("%;\x80/S#;\xEC/J$;\x9B.\" &\"/<$;\xEC/3$;2/*$8%:p%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9D/S#;\xEC/J$;\x9B.\" &\"/<$;\xEC/3$;2/*$8%:q%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9D/I#;\xEC/@$;\x9B.\" &\"/2$;\xEC/)$8$:r$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9D/M#;\xEC/D$;\u015D/;$;\xEB/2$;\xC3/)$8%:s%\"$ )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9B.\" &\"/;#;\xEC/2$;2/)$8#:t#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xEC/1#;2/($8\":u\"! )(\"'#&'#"),
          peg$decode("%;\x80/' 8!:v!! )"),
          peg$decode("%;\xEC/D#;\x80/;$;\xEC/2$;2/)$8$:w$\"\" )($'#(#'#(\"'#&'#"),
          peg$decode("%;\xCC/' 8!:x!! )"),
          peg$decode("%;\xEC/<#%<;\xEF=/##&'!&&#/'$8\":y\" )(\"'#&'#"),
          peg$decode("%;\u0143/0#;\xEC/'$8\":z\" )(\"'#&'#.: &%;\u013B/0#;\xEC/'$8\":{\" )(\"'#&'#"),
          peg$decode("%;\u0160/S#;\xEB/J$;\x9D/A$;\x99.\" &\"/3$;2/*$8%:|%#\"! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0150/M#;\xEB/D$;^/;$;\xEB/2$;^/)$8%:}%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u014D/:#;\xEC/1$;P/($8#:~#! )(#'#(\"'#&'#.\u016A &%;\u014D/^#;\xEB/U$;\xEF/L$;\u0169/C$;\xEF/:$;R/1$;\u016A/($8':\x7F'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u011F &%;\u0133/:#;\xEC/1$;T/($8#:~#! )(#'#(\"'#&'#.\xF8 &%;\u0133/^#;\xEB/U$;\xEF/L$;\u0169/C$;\xEF/:$;V/1$;\u016A/($8':\x7F'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAD &%;\u0125/C#;\xEC/:$;b/1$;\xEC/($8$:\x80$!!)($'#(#'#(\"'#&'#.} &%;\u010E/C#;\xEC/:$;b/1$;\xEC/($8$:\x81$!!)($'#(#'#(\"'#&'#.M &%;\u0110/C#;\xEC/:$;b/1$;\xEC/($8$:\x82$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;S/\xA4#;\xEC/\x9B$$%2\x83\"\"6\x837\x84/D#;\xEC/;$;S/2$;\xEC/)$8$:\x85$\"'!)($'#(#'#(\"'#&'#0T*%2\x83\"\"6\x837\x84/D#;\xEC/;$;S/2$;\xEC/)$8$:\x85$\"'!)($'#(#'#(\"'#&'#&/)$8#:\x86#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;P/1#;\xEF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;Q/&#0#*;Q&&&#/' 8!:\x87!! )"),
          peg$decode("%;_/S#;\xEC/J$2\x88\"\"6\x887\x89/;$;\xEC/2$;\x9D/)$8%:\x8A%\"$ )(%'#($'#(#'#(\"'#&'#.\u011D &%;_/N#;\xEC/E$;Z/<$;\xEC/3$;\x9D/*$8%:\x8B%#$\" )(%'#($'#(#'#(\"'#&'#.\xE2 &%;\\/\x88#;\xEC/\x7F$;\u0158.\" &\".S &%<;\u011D=/##&'!&&#.A &%<;\u0163=/##&'!&&#./ &%<;\u0106=/##&'!&&#/;$;\xEC/2$;\x9D/)$8%:\x8C%\"$ )(%'#($'#(#'#(\"'#&'#.m &%;_/;#;\xEC/2$;Y/)$8#:\x8D#\"\" )(#'#(\"'#&'#.E &%;_/;#;\xEC/2$;6/)$8#:\x8E#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;W/\xA4#;\xEC/\x9B$$%2\x83\"\"6\x837\x84/D#;\xEC/;$;W/2$;\xEC/)$8$:\x85$\"'!)($'#(#'#(\"'#&'#0T*%2\x83\"\"6\x837\x84/D#;\xEC/;$;W/2$;\xEC/)$8$:\x85$\"'!)($'#(#'#(\"'#&'#&/)$8#:\x86#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;T/1#;\xEF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;U/&#0#*;U&&&#/' 8!:\x87!! )"),
          peg$decode("%;_/N#;\xEC/E$;Z/<$;\xEC/3$;\x9D/*$8%:\x8F%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;\\/\x88#;\xEC/\x7F$;\u0158.\" &\".S &%<;\u011D=/##&'!&&#.A &%<;\u0163=/##&'!&&#./ &%<;\u0106=/##&'!&&#/;$;\xEC/2$;\x9D/)$8%:\x90%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;_/;#;\xEC/2$;Y/)$8#:\x91#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\u0133/0#;\xEB/'$8\":\x92\" )(\"'#&'#"),
          peg$decode("2\x88\"\"6\x887\x89./ &;\u0110.) &;\u013E.# &;\u013D"),
          peg$decode("2\x93\"\"6\x937\x94.\xE9 &2\x88\"\"6\x887\x89.\xDD &2\x95\"\"6\x957\x96.\xD1 &2\x97\"\"6\x977\x98.\xC5 &2\x99\"\"6\x997\x9A.\xB9 &2\x9B\"\"6\x9B7\x9C.\xAD &2\x9D\"\"6\x9D7\x9E.\xA1 &2\x9F\"\"6\x9F7\xA0.\x95 &2\xA1\"\"6\xA17\xA2.\x89 &;\xFB.\x83 &;\u0145.} &;\u0162.w &;\xFA.q &;\u0144.k &;\u0161.e &;\u0139._ &;\u013C.Y &2\xA3\"\"6\xA37\xA4.M &2\xA5\"\"6\xA57\xA6.A &;\u015C.; &;\u0110.5 &;\u010F./ &2\xA7\"\"6\xA77\xA8.# &;\u0109"),
          peg$decode("%;\xCD/' 8!:\xA9!! ).A &%;\xCC/' 8!:\xAA!! )./ &%;\xCF/' 8!:\xAB!! )"),
          peg$decode("%;^/B#$;]0#*;]&/2$;\xEC/)$8#:\xAC#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%2\x83\"\"6\x837\x84/:#;\xEC/1$;^/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;e/' 8!:\xAD!! )"),
          peg$decode("%;b/9#$;`0#*;`&/)$8\":\xAC\"\"! )(\"'#&'#"),
          peg$decode("%2\x83\"\"6\x837\x84/:#;\xEC/1$;b/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;}/' 8!:\xAE!! )"),
          peg$decode("%;f/' 8!:\xAE!! )"),
          peg$decode("%;f/' 8!:\xAF!! )"),
          peg$decode("%;g/' 8!:\xB0!! )"),
          peg$decode(";o.G &;h.A &;j.; &;i.5 &;n./ &;l.) &;k.# &;p"),
          peg$decode(";o.G &;h.A &;j.; &;i.5 &;n./ &;m.) &;k.# &;p"),
          peg$decode(";f.\xAD &%;\u0152/C#;\xEB/:$;-/1$;\xEC/($8$:\xB1$!!)($'#(#'#(\"'#&'#.} &%;\u0149/C#;\xEB/:$;./1$;\xEC/($8$:\xB1$!!)($'#(#'#(\"'#&'#.M &%;\u0148/C#;\xEB/:$;//1$;\xEC/($8$:\xB1$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0151/0#;\xEC/'$8\":\xB2\" )(\"'#&'#"),
          peg$decode("%;|/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xB3\"\"! )(\"'#&'#"),
          peg$decode("%;t/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xB3\"\"! )(\"'#&'#"),
          peg$decode("%;{/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xB3\"\"! )(\"'#&'#"),
          peg$decode("%;w/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xB3\"\"! )(\"'#&'#"),
          peg$decode("%;x/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xB3\"\"! )(\"'#&'#"),
          peg$decode("%;y/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xB4\"\"! )(\"'#&'#"),
          peg$decode("%;q/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xB4\"\"! )(\"'#&'#"),
          peg$decode("%;v.# &;z/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xB4\"\"! )(\"'#&'#"),
          peg$decode("%;\u012D/0#;\xEB/'$8\":\xB5\" )(\"'#&'#.\xCB &%;\u012F/0#;\xEB/'$8\":\xB6\" )(\"'#&'#.\xAE &%;\u010C/0#;\xEB/'$8\":\xB7\" )(\"'#&'#.\x91 &%;\u0156/0#;\xEB/'$8\":\xB8\" )(\"'#&'#.t &%;\u014F/0#;\xEB/'$8\":\xB9\" )(\"'#&'#.W &%;\u014C/0#;\xEB/'$8\":\xBA\" )(\"'#&'#.: &%;\u0118/0#;\xEB/'$8\":\xBB\" )(\"'#&'#"),
          peg$decode("%;\u0164/1#;\xC9/($8\":\xBC\"! )(\"'#&'#.J &%2\xBD\"\"6\xBD7\xBE/:#;\xEB/1$;\xC9/($8#:\xBC#! )(#'#(\"'#&'#"),
          peg$decode("%;\u016C/Z#;\xEC/Q$;\x80.\" &\"/C$;\xEC/:$;\u016D/1$;\xEC/($8&:\xBF&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0164/F#%<;\u0164=.##&&!&'#/1$;\xC9/($8#:\xC0#! )(#'#(\"'#&'#.d &%;\u0164/1#;\xDF/($8\":\xC1\"! )(\"'#&'#.F &%;\u0164/<#%<;\u0164=.##&&!&'#/'$8\":\xC2\" )(\"'#&'#"),
          peg$decode("%2\xC3\"\"6\xC37\xC4/R#;\xEC/I$;\x9D/@$;\xEC/7$2\xC5\"\"6\xC57\xC6/($8%:\xC7%!\")(%'#($'#(#'#(\"'#&'#.e &%2\xC8\"\"6\xC87\xC9/1#;a/($8\":\xCA\"! )(\"'#&'#.A &%2\xCB\"\"6\xCB7\xCC/1#;\xDF/($8\":\xC7\"! )(\"'#&'#"),
          peg$decode("%;\u016C/L#;\xEC/C$;\x9D/:$;\xEC/1$;\u016D/($8%:\xCD%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC8/' 8!:\xCE!! )"),
          peg$decode("%;\xC8/' 8!:\xCF!! )"),
          peg$decode("%2\xD0\"\"6\xD07\xD1/& 8!:\xD2! ).u &%;\xFD/0#;\xEC/'$8\":\xD2\" )(\"'#&'#.X &%2\xD3\"\"6\xD37\xD4/1#;\xC9/($8\":\xD5\"! )(\"'#&'#.4 &%2\xD3\"\"6\xD37\xD4/& 8!:\xD6! )"),
          peg$decode("%;\xCA/' 8!:\xD7!! )"),
          peg$decode("%2\xD8\"\"6\xD87\xD9/1#;\xC9/($8\":\xDA\"! )(\"'#&'#"),
          peg$decode("%2\xDB\"\"6\xDB7\xDC/1#;\xC9/($8\":\xDD\"! )(\"'#&'#.\xC5 &%;\u0136/:#;\xEB/1$;\xC9/($8#:\xDD#! )(#'#(\"'#&'#.\x9E &%2\xDE\"\"6\xDE7\xDF/1#;\xC9/($8\":\xE0\"! )(\"'#&'#.z &%2\xDE\"\"6\xDE7\xDF/& 8!:\xE1! ).c &%2\xDB\"\"6\xDB7\xDC/& 8!:\xE2! ).L &%;\u0135/B#%<4\xE3\"\"5!7\xE4=.##&&!&'#/'$8\":\xE2\" )(\"'#&'#"),
          peg$decode(";q.Y &;x.S &;y.M &;|.G &;t.A &%;\xD5/' 8!:\xB1!! )./ &%;\xE2/' 8!:\xB1!! )"),
          peg$decode("%;\u011F/V#;\xEC/M$;\xC8/D$;\xEC/;$;\x81/2$;\xEF/)$8&:\xE5&\"#!)(&'#(%'#($'#(#'#(\"'#&'#.} &%;\u011F/C#;\xEC/:$;\x83/1$;\xEF/($8$:\xE6$!!)($'#(#'#(\"'#&'#.M &%;\u0123/C#;\xEC/:$;\x83/1$;\xEF/($8$:\xE7$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xDF/N#;\u0164/E$;\xDF/<$;\u0164/3$;\xDF/*$8%:\xE8%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0168/^#;\xEC/U$;\xEF/L$;\u0169/C$;\xEF/:$;\x98/1$;\u016A/($8':\xE9'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xD1 &%;\u0168/^#;\xEC/U$;\xEF/L$;\u0169/C$;\xEF/:$;\x8E/1$;\u016A/($8':\xEA'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x86 &%;\x8C/<#20\"\"6071.\" &\"/($8\":\xEA\"!!)(\"'#&'#.] &%;\x96/<#20\"\"6071.\" &\"/($8\":\xEB\"!!)(\"'#&'#.4 &%20\"\"6071/& 8!:\xEC! )"),
          peg$decode("%;\xEC/1#;\x9D/($8\":\xED\"! )(\"'#&'#"),
          peg$decode("%;\xEC/9#;\u0114/0$;\xEC/'$8#:\xEE# )(#'#(\"'#&'#.\u02EB &%;\xEC/9#;\u0103/0$;\xEC/'$8#:\xEF# )(#'#(\"'#&'#.\u02C5 &%;\xEC/c#;\u0132/Z$;\xEC/Q$;\x88/H$;\xEC/?$;\u0166.\" &\"/1$;\xEC/($8':\xF0'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0275 &%;\xEC/g#;\u0132/^$;\xEC/U$;\xEF/L$;\u0169/C$;\xEF/:$;\x8A/1$;\u016A/($8(:\xF0(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0221 &%;\xEC/c#;\u0155/Z$;\xEC/Q$;\x91/H$;\xEC/?$;\u0166.\" &\"/1$;\xEC/($8':\xF1'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01D1 &%;\xEC/g#;\u0155/^$;\xEC/U$;\xEF/L$;\u0169/C$;\xEF/:$;\x93/1$;\u016A/($8(:\xF2(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u017D &%;\xEC/i#;\u0168.# &;\u011B/Z$;\xEC/Q$;\x96/H$;\xEC/?$;\u0166.\" &\"/1$;\xEC/($8':\xF3'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0127 &%;\xEC/m#;\u0168.# &;\u011B/^$;\xEC/U$;\xEF/L$;\u0169/C$;\xEF/:$;\x98/1$;\u016A/($8(:\xF4(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xCD &%;\xEC/i#;\u0168.# &;\xFE/Z$;\xEC/Q$;\x8C/H$;\xEC/?$;\u0166.\" &\"/1$;\xEC/($8':\xF0'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xEC/m#;\u0168.# &;\xFE/^$;\xEC/U$;\xEF/L$;\u0169/C$;\xEF/:$;\x8E/1$;\u016A/($8(:\xF0(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEC/i#;\u0168.# &;\u011B/Z$;\xEC/Q$;\x96/H$;\xEC/?$;\u0166.\" &\"/1$;\xEC/($8':\xF3'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xEC/m#;\u0168.# &;\u011B/^$;\xEC/U$;\xEF/L$;\u0169/C$;\xEF/:$;\x98/1$;\u016A/($8(:\xF4(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEC/i#;\u0168.# &;\u0132/Z$;\xEC/Q$;\x88/H$;\xEC/?$;\u0166.\" &\"/1$;\xEC/($8':$'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xEC/m#;\u0168.# &;\u0132/^$;\xEC/U$;\xEF/L$;\u0169/C$;\xEF/:$;\x8A/1$;\u016A/($8(:$(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u016B/:#;\xEC/1$;\x9D/($8#:$#! )(#'#(\"'#&'#._ &%;\x82/' 8!:\xF5!! ).M &;\xE5.G &;\xD5.A &;\u0146.; &;\u0147.5 &;\u015B./ &;\u0140.) &;\xE2.# &;\x86"),
          peg$decode("%$4\xF6\"\"5!7\xF7/,#0)*4\xF6\"\"5!7\xF7&&&#/m#%<2>\"\"6>7?.G &2\x83\"\"6\x837\x84.; &2\xF8\"\"6\xF87\xF9./ &20\"\"6071.# &;\xEF=/##&'!&&#/($8\":\xFA\"!!)(\"'#&'#"),
          peg$decode("%;\x85/C#;\xEC/:$;\u0167/1$;\xEC/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x870#*;\x87&/2#;\x85/)$8\":\xFB\"\"! )(\"'#&'#"),
          peg$decode("%%<;\u016A=.##&&!&'#/:#;\x88/1$;\xEF/($8#:$#!!)(#'#(\"'#&'#"),
          peg$decode("%$;\x89/&#0#*;\x89&&&#/' 8!:\x87!! )"),
          peg$decode("%;\x9D/C#;\xEC/:$;\u0167/1$;\xEC/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x8B0#*;\x8B&/2#;\x9D/)$8\":\xFB\"\"! )(\"'#&'#"),
          peg$decode("%;\x8C/1#;\xEF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x8D/&#0#*;\x8D&&&#/' 8!:\x87!! )"),
          peg$decode("%;\u0165/:#;\xC7/1$;\xEC/($8#:\xFC#!!)(#'#(\"'#&'#.N &%;\xC7/D#;\xEB/;$;\x85/2$;\xEC/)$8$:\xFD$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x8F/C#;\xEC/:$;\u0167/1$;\xEC/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x900#*;\x90&/2#;\x8F/)$8\":\xFE\"\"! )(\"'#&'#"),
          peg$decode("%;\x91/1#;\xEF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x92/&#0#*;\x92&&&#/' 8!:\x87!! )"),
          peg$decode("%;\u0165/:#;\xC7/1$;\xEC/($8#:\xFC#!!)(#'#(\"'#&'#.T &%;\xC7/J#;\xEB/A$;\x9D.# &;\u0115/2$;\xEC/)$8$:\xFD$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x94/C#;\xEC/:$;\u0167/1$;\xEC/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x950#*;\x95&/2#;\x94/)$8\":\xFF\"\"! )(\"'#&'#"),
          peg$decode("%;\x96/1#;\xEF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x97/&#0#*;\x97&&&#/' 8!:\x87!! )"),
          peg$decode("%;\xFF/C#;\xEC/:$;\x9C/1$;\xEC/($8$:\u0100$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9B/' 8!:\u0101!! )"),
          peg$decode("%;\xFF.# &;\u011F/\xA8#;\xEC/\x9F$$%;\x9C/C#;\xEC/:$;\u0167/1$;\xEC/($8$:\u0102$!#)($'#(#'#(\"'#&'#0M*%;\x9C/C#;\xEC/:$;\u0167/1$;\xEC/($8$:\u0102$!#)($'#(#'#(\"'#&'#&/;$;\xEC/2$;x/)$8%:\u0103%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC8/' 8!:\u0104!! )"),
          peg$decode(";\x9E"),
          peg$decode("%;\xB9/t#;\xEC/k$$%;\x9F/2#;\xEC/)$8\":\u0105\"\"%!)(\"'#&'#0<*%;\x9F/2#;\xEC/)$8\":\u0105\"\"%!)(\"'#&'#&/)$8#:\u0106#\"\" )(#'#(\"'#&'#"),
          peg$decode(";6./ &;\xB3.) &;\xAD.# &;\xA5"),
          peg$decode("%;\u012B/& 8!:\u0107! )"),
          peg$decode("%;\u012E/& 8!:\u0108! )"),
          peg$decode("%;\u015E/& 8!:\u0109! )"),
          peg$decode("%;\u0109/:#;\xEB/1$;\x9D/($8#:\u010A#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0107/& 8!:\u010B! ).? &%;\u0116/& 8!:\u010C! ).. &%;\u0117/& 8!:\u010D! )"),
          peg$decode("%;\u0104/:#;\xEB/1$;\xA6/($8#:\u010E#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9A.\" &\"/2#;2/)$8\":\u010F\"\"! )(\"'#&'#.D &%;\u015D/:#;\xEB/1$;\xC3/($8#:\u0110#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0154/:#;\xEB/1$;\xA8/($8#:\u010E#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9D/' 8!:\u0111!! ).\xAA &%;\u016C/U#;\xEC/L$;\x9D/C$;\xEC/:$;\u016D/1$;\xEC/($8&:\u0111&!#)(&'#(%'#($'#(#'#(\"'#&'#.h &%;\x9A.\" &\"/2#;2/)$8\":\u0112\"\"! )(\"'#&'#.D &%;\u015D/:#;\xEB/1$;\xC3/($8#:\u0113#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0101/:#;\xEB/1$;\xAA/($8#:\u010E#! )(#'#(\"'#&'#"),
          peg$decode("%;\u016C/U#;\xEC/L$;\x9D/C$;\xEC/:$;\u016D/1$;\xEC/($8&:\u0114&!#)(&'#(%'#($'#(#'#(\"'#&'#.z &%;\x9D/' 8!:\u0114!! ).h &%;\x9A.\" &\"/2#;2/)$8\":\u0115\"\"! )(\"'#&'#.D &%;\u015D/:#;\xEB/1$;\xC3/($8#:\u0116#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0124/:#;\xEB/1$;\xAC/($8#:\u010E#! )(#'#(\"'#&'#"),
          peg$decode("%;\xCB/A#;\x9A.\" &\"/3$;2/*$8#:\u0117##\"! )(#'#(\"'#&'#.m &%;\xCB/2#;\x9D/)$8\":\u0118\"\"! )(\"'#&'#.N &%;\xCB/D#;\u015D/;$;\xEB/2$;\xC3/)$8$:\u0119$\"# )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0120/:#;\xEB/1$;\xAE/($8#:\u010E#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9D/' 8!:\u011A!! ).h &%;\x9A.\" &\"/2#;2/)$8\":\u011B\"\"! )(\"'#&'#.D &%;\u015D/:#;\xEB/1$;\xC3/($8#:\u011C#! )(#'#(\"'#&'#"),
          peg$decode("%;\u014D/:#;\xEB/1$;\xB0/($8#:\u010E#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9D/' 8!:\u011D!! ).h &%;\x9A.\" &\"/2#;2/)$8\":\u011E\"\"! )(\"'#&'#.D &%;\u015D/:#;\xEB/1$;\xC3/($8#:\u011F#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0142/:#;\xEB/1$;\xB2/($8#:\u010E#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9D/' 8!:\u0120!! ).h &%;\x9A.\" &\"/2#;2/)$8\":\u0121\"\"! )(\"'#&'#.D &%;\u015D/:#;\xEB/1$;\xC3/($8#:\u0122#! )(#'#(\"'#&'#"),
          peg$decode("%;\xEC/k#$;\xB5./ &;\xB6.) &;\xB7.# &;\xB4/8#05*;\xB5./ &;\xB6.) &;\xB7.# &;\xB4&&&#/1$;\xEC/($8#:\u0123#!!)(#'#(\"'#&'#"),
          peg$decode("%;\u011C/0#;\xEC/'$8\":\u0124\" )(\"'#&'#.\xDC &%;\u0130/0#;\xEC/'$8\":\u0125\" )(\"'#&'#.\xBF &%;\u0131/h#;\xEC/_$;\xB9/V$;\xEC/M$;\u0167/D$;\xEC/;$;\xB9/2$;\xEC/)$8(:\u0126(\"%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.j &%;\u0131/C#;\xEC/:$;\xB9/1$;\xEC/($8$:\u0127$!!)($'#(#'#(\"'#&'#.: &%;\u010B/0#;\xEC/'$8\":\u0128\" )(\"'#&'#"),
          peg$decode("%;\u0165/:#;\xC7/1$;\xEC/($8#:\u0129#!!)(#'#(\"'#&'#.M &%;\u0163/C#;\u0165/:$;\xC7/1$;\xEC/($8$:\u012A$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0120/C#;\xEC/:$;\xB9/1$;\xEC/($8$:\u012B$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0104/C#;\xEC/:$;\xB8/1$;\xEC/($8$:\u012C$!!)($'#(#'#(\"'#&'#.\xBC &%;\u0104/R#;\xEC/I$;\xB9/@$;\xB8.\" &\"/2$;\xEC/)$8%:\u012D%\"\"!)(%'#($'#(#'#(\"'#&'#.} &%;\u0121/C#;\xEC/:$;\xB9/1$;\xEC/($8$:\u012E$!!)($'#(#'#(\"'#&'#.M &%;\u0134/C#;\xEC/:$;\xB9/1$;\xEC/($8$:\u012F$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0100/0#;\xEC/'$8\":\u0130\" )(\"'#&'#.: &%;\u0111/0#;\xEC/'$8\":\u0131\" )(\"'#&'#"),
          peg$decode("%;\xBB/N#;\xEC/E$;\xBA/<$;\xEC/3$;\xB9/*$8%:\u0132%#$\" )(%'#($'#(#'#(\"'#&'#.\u0154 &%;\xBB/M#;\xEC/D$;\u0161/;$;\xEC/2$;\xB9/)$8%:\u0133%\"$ )(%'#($'#(#'#(\"'#&'#.\u011A &%;\xBB/M#;\xEC/D$;\u0139/;$;\xEC/2$;\xB9/)$8%:\u0134%\"$ )(%'#($'#(#'#(\"'#&'#.\xE0 &%;\xBB/M#;\xEC/D$;\u013C/;$;\xEC/2$;\xB9/)$8%:\u0135%\"$ )(%'#($'#(#'#(\"'#&'#.\xA6 &%;\xBB/~#;\xEC/u$2\u0136\"\"6\u01367\u0137/f$;\xEC/]$;\xB9/T$;\xEC/K$2\u0138\"\"6\u01387\u0139/<$;\xEC/3$;\xB9/*$8):\u013A)#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xBB/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xFA/0#;\xEB/'$8\":\u013B\" )(\"'#&'#.: &%;\u0144/0#;\xEB/'$8\":\u013C\" )(\"'#&'#"),
          peg$decode("%;\xBE/N#;\xEC/E$;\xBD/<$;\xEC/3$;\xBB/*$8%:\u013D%#$\" )(%'#($'#(#'#(\"'#&'#.v &%;\xBE/N#;\xEC/E$;\xBC/<$;\xEC/3$;\xBB/*$8%:\u0132%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xBE/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%2\u013E\"\"6\u013E7\u013F/& 8!:\u0140! ).\u0106 &%2\u0141\"\"6\u01417\u0142/B#%<2\u0141\"\"6\u01417\u0142=.##&&!&'#/'$8\":\u0143\" )(\"'#&'#.\xD1 &%2\u0144\"\"6\u01447\u0145/& 8!:\u0146! ).\xBA &%;\u0127/0#;\xEB/'$8\":\u0147\" )(\"'#&'#.\x9D &%;\u0129/0#;\xEB/'$8\":\u0148\" )(\"'#&'#.\x80 &%2\u0149\"\"6\u01497\u014A/& 8!:\u014B! ).i &%2\u014C\"\"6\u014C7\u014D/B#%<2\u014C\"\"6\u014C7\u014D=.##&&!&'#/'$8\":\u014E\" )(\"'#&'#.4 &%2\u014F\"\"6\u014F7\u0150/& 8!:\u0151! )"),
          peg$decode("%2\xA3\"\"6\xA37\xA4/& 8!:\u0152! ).K &%2\xA5\"\"6\xA57\xA6/& 8!:\u0153! ).4 &%2\u0154\"\"6\u01547\u0155/& 8!:\u0156! )"),
          peg$decode("%;\xC0/N#;\xEC/E$;\xBF/<$;\xEC/3$;\xBE/*$8%:\u0132%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xC0/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("2\x93\"\"6\x937\x94.\x80 &2\x88\"\"6\x887\x89.t &%;\u0145/0#;\xEB/'$8\":\u0157\" )(\"'#&'#.W &%;\xFB/0#;\xEB/'$8\":\u0158\" )(\"'#&'#.: &%;\u0162/0#;\xEB/'$8\":\u0159\" )(\"'#&'#"),
          peg$decode(";\xC1.\u022A &%;\xC3/N#;\xEC/E$;\xC2/<$;\xEC/3$;\xC0/*$8%:\u0132%#$\" )(%'#($'#(#'#(\"'#&'#.\u01EF &%;\xC3/S#;\xEC/J$2\x95\"\"6\x957\x96/;$;\xEC/2$;\xC0/)$8%:\u015A%\"$ )(%'#($'#(#'#(\"'#&'#.\u01AF &%;\xC3/e#;\xEC/\\$;\u015F/S$;\xEC/J$;\xC3/A$;\xEC/8$;\x80.\" &\"/*$8':\u015B'#&\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.\u015D &%;\xC3/M#;\xEC/D$;\u015C/;$;\xEB/2$;\xC0/)$8%:\u015C%\"$ )(%'#($'#(#'#(\"'#&'#.\u0123 &%;\xC3/M#;\xEC/D$;\u014B/;$;\xEB/2$;\xC0/)$8%:\u015D%\"$ )(%'#($'#(#'#(\"'#&'#.\xE9 &%;\xC3/M#;\xEC/D$;\u0110/;$;\xEB/2$;\xC0/)$8%:\u015E%\"$ )(%'#($'#(#'#(\"'#&'#.\xAF &%;\xC3/M#;\xEC/D$;\u011A/;$;\xEB/2$;\xC0/)$8%:\u015F%\"$ )(%'#($'#(#'#(\"'#&'#.u &%;\xC3/M#;\xEC/D$;\u012A/;$;\xEB/2$;\xC0/)$8%:\u0160%\"$ )(%'#($'#(#'#(\"'#&'#.; &%;\xC3/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xC3/M#;\xEC/D$;\u010F/;$;\xEC/2$;\xC0/)$8%:\u0161%\"$ )(%'#($'#(#'#(\"'#&'#.x &%;\xC3/n#;\xEC/e$2\xA7\"\"6\xA77\xA8/V$%<2\xA7\"\"6\xA77\xA8=.##&&!&'#/;$;\xEC/2$;\xC0/)$8&:\u0161&\"% )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2\x97\"\"6\x977\x98.Y &2\x99\"\"6\x997\x9A.M &2\x9B\"\"6\x9B7\x9C.A &2\xA1\"\"6\xA17\xA2.5 &2\x9F\"\"6\x9F7\xA0.) &2\x9D\"\"6\x9D7\x9E"),
          peg$decode("%2\x88\"\"6\x887\x89/C#;\xEC/:$;\xC3/1$;\xEC/($8$:\u0162$!!)($'#(#'#(\"'#&'#.\u038B &%;\u013E/C#;\xEB/:$;\xC3/1$;\xEC/($8$:\u0163$!!)($'#(#'#(\"'#&'#.\u035B &%;\u013D/C#;\xEB/:$;\xC3/1$;\xEC/($8$:\u0164$!!)($'#(#'#(\"'#&'#.\u032B &%;\u0159/C#;\xEB/:$;\xC3/1$;\xEC/($8$:\u0165$!!)($'#(#'#(\"'#&'#.\u02FB &%;\u0128/C#;\xEB/:$;\xC3/1$;\xEC/($8$:\u0166$!!)($'#(#'#(\"'#&'#.\u02CB &%;\u013F/:#;\xEB/1$;\xC3/($8#:\u0167#! )(#'#(\"'#&'#.\u02A4 &%;\u0119/C#;\xEB/:$;\xC3/1$;\xEC/($8$:\u0168$!!)($'#(#'#(\"'#&'#.\u0274 &%;\u0108/C#;\xEB/:$;\xC3/1$;\xEC/($8$:\u0169$!!)($'#(#'#(\"'#&'#.\u0244 &%;\u0152/C#;\xEB/:$;-/1$;\xEC/($8$:$$!!)($'#(#'#(\"'#&'#.\u0214 &%;\u0149/C#;\xEB/:$;./1$;\xEC/($8$:$$!!)($'#(#'#(\"'#&'#.\u01E4 &%;\u0148/C#;\xEB/:$;//1$;\xEC/($8$:$$!!)($'#(#'#(\"'#&'#.\u01B4 &%;\u0163/H#;\xEB.\" &\"/:$;\xCC/1$;\xEC/($8$:$$!!)($'#(#'#(\"'#&'#.\u017F &%;\u011D/C#;\xEB/:$;\xCC/1$;\xEC/($8$:$$!!)($'#(#'#(\"'#&'#.\u014F &%;\u0102/C#;\xEB/:$;\xC3/1$;\xEC/($8$:\u016A$!!)($'#(#'#(\"'#&'#.\u011F &;\xCD.\u0119 &%2\xA7\"\"6\xA77\xA8/:#;c/1$;\xEC/($8#:$#!!)(#'#(\"'#&'#.\xEC &%;b/1#;\xEC/($8\":$\"!!)(\"'#&'#.\xCE &;\xCF.\xC8 &%;\x82/' 8!:\xF5!! ).\xB6 &%;\xD2/1#;\xEC/($8\":\u016B\"!!)(\"'#&'#.\x98 &%2\u016C\"\"6\u016C7\u016D/j#;\xEC/a$;\x9D/X$;\xEC/O$;\x99.\" &\"/A$2\xF8\"\"6\xF87\xF9/2$;\xEC/)$8':\u016E'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xC4/1#;\xEC/($8\":\u010E\"!!)(\"'#&'#"),
          peg$decode("%2\x99\"\"6\x997\x9A/\x7F#$;\xC5.# &;\xC6/,#0)*;\xC5.# &;\xC6&&&#/]$2\x99\"\"6\x997\x9A/N$$4\u016F\"\"5!7\u01700)*4\u016F\"\"5!7\u0170&/2$;\xEC/)$8%:\u0171%\"#!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2\u0172\"\"6\u01727\u0173"),
          peg$decode("4\u0174\"\"5!7\u0175"),
          peg$decode("%;\xC8/C#%<4\u0176\"\"5!7\u0177=.##&&!&'#/($8\":$\"!!)(\"'#&'#.# &;\xE2"),
          peg$decode("%;\xC9/<#9:\u0178 ! -\"\"&#&!/($8\":\u0179\"!!)(\"'#&'#"),
          peg$decode("%4\u017A\"\"5!7\u017B/E#$4\xE3\"\"5!7\xE40)*4\xE3\"\"5!7\xE4&/)$8\":\u017C\"\"! )(\"'#&'#"),
          peg$decode(";\xD5.] &;\xE2.W &;\u0146.Q &;\u0147.K &;\u015B.E &;\u0140.? &%;\u0138/& 8!:\u017D! ).. &%;\u0122/& 8!:\u017E! )"),
          peg$decode("%;\u012D/0#;\xEB/'$8\":\u017F\" )(\"'#&'#.# &;\x9D"),
          peg$decode("%;\xCE/' 8!:\u0180!! )"),
          peg$decode("%;\xC8/b#2\u0181\"\"6\u01817\u0182/S$;\xEC/J$;\xC3/A$;\xEC/8$;\x80.\" &\"/*$8&:\u0183&#%\" )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;d/@#;\xEC/7$;\x80.\" &\"/)$8#:\u0184#\"\" )(#'#(\"'#&'#.; &%;d/1#;\xEC/($8\":\u0185\"!!)(\"'#&'#"),
          peg$decode("%;\u0106/M#;\xEC/D$;\x9D/;$;\xEC/2$;\xD0/)$8%:\u0186%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEF/Y#;\u0169/P$;\xEF/G$$;\xD1/&#0#*;\xD1&&&#/1$;\u016A/($8%:\u0187%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9F/:#;\xEC/1$;\xEF/($8#:\u0188#!\")(#'#(\"'#&'#.\\ &%;\xC8/R#;\xEC/I$;\x80.\" &\"/;$;\xEC/2$;\xEF/)$8%:\u0189%\"$\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u010D/R#;\xEC/I$;\xC3/@$;\xEC/7$;\x80.\" &\"/)$8%:\u018A%\"\" )(%'#($'#(#'#(\"'#&'#.\x9B &%;\u014E/R#;\xEC/I$;\xC3/@$;\xEC/7$;\x80.\" &\"/)$8%:\u018B%\"\" )(%'#($'#(#'#(\"'#&'#.\\ &%;\u013A/R#;\xEC/I$;\xC3/@$;\xEC/7$;\x80.\" &\"/)$8%:\u018C%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%<;\xEF=/##&'!&&#.G &%<;\xF3=/##&'!&&#.5 &%<2\xF8\"\"6\xF87\xF9=/##&'!&&#"),
          peg$decode("%$4\u018D\"\"5!7\u018E/,#0)*4\u018D\"\"5!7\u018E&&&#/' 8!:\u018F!! )"),
          peg$decode(";\xD8.S &;\xD9.M &;\xD7.G &%;\xD6/7#2\u0190\"\"6\u01907\u0191/($8\":\u0192\"!!)(\"'#&'#.# &;\xD6"),
          peg$decode(";\xDC./ &;\xDD.) &;\xDE.# &;\u0138"),
          peg$decode("%2\u0193\"\"6\u01937\u0194/J#$4\u0195\"\"5!7\u0196/,#0)*4\u0195\"\"5!7\u0196&&&#/($8\":\u0197\"! )(\"'#&'#"),
          peg$decode("%2\u0198\"\"6\u01987\u0199/J#$4\u019A\"\"5!7\u019B/,#0)*4\u019A\"\"5!7\u019B&&&#/($8\":\u019C\"! )(\"'#&'#"),
          peg$decode("%2\u019D\"\"6\u019D7\u019E/1#;\xDA/($8\":\u0179\"! )(\"'#&'#"),
          peg$decode("%$;\xDB/&#0#*;\xDB&&&#/' 8!:\u019F!! )"),
          peg$decode("%2\u01A0\"\"6\u01A07\u01A1/& 8!:\u01A2! ).\u01BE &%2\u01A3\"\"6\u01A37\u01A4/& 8!:\u01A5! ).\u01A7 &%2\u01A6\"\"6\u01A67\u01A7/& 8!:\u01A8! ).\u0190 &%2\u01A9\"\"6\u01A97\u01AA/& 8!:\u01AB! ).\u0179 &%2\u01AC\"\"6\u01AC7\u01AD/& 8!:\u01AE! ).\u0162 &%2\u01AF\"\"6\u01AF7\u01B0/& 8!:\u01B1! ).\u014B &%2\u01B2\"\"6\u01B27\u01B3/& 8!:\u01B4! ).\u0134 &%2\u01B5\"\"6\u01B57\u01B6/& 8!:\u01B7! ).\u011D &%2\u01B8\"\"6\u01B87\u01B9/& 8!:\u01BA! ).\u0106 &%2\u01BB\"\"6\u01BB7\u01BC/& 8!:\u01BD! ).\xEF &%2\u01BE\"\"6\u01BE7\u01BF.) &2\u01C0\"\"6\u01C07\u01C1/& 8!:\u01C2! ).\xCC &%2\u01C3\"\"6\u01C37\u01C4.) &2\u01C5\"\"6\u01C57\u01C6/& 8!:\u01C7! ).\xA9 &%2\u01C8\"\"6\u01C87\u01C9.) &2\u01CA\"\"6\u01CA7\u01CB/& 8!:\u01CC! ).\x86 &%2\u01CD\"\"6\u01CD7\u01CE.) &2\u01CF\"\"6\u01CF7\u01D0/& 8!:\u01D1! ).c &%2\u01D2\"\"6\u01D27\u01D3.) &2\u01D4\"\"6\u01D47\u01D5/& 8!:\u01D6! ).@ &%2\u01D7\"\"6\u01D77\u01D8.) &2\u01D9\"\"6\u01D97\u01DA/& 8!:\u01DB! )"),
          peg$decode("%;\xDD.# &;\xDE/A#2\u01D2\"\"6\u01D27\u01D3/2$;\xDE/)$8#:\u01DC#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xDE/;#;\u0164/2$;\xE0/)$8#:\u01DD#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\xDF.A &%2\x88\"\"6\x887\x89/1#;\xDF/($8\":\u01DE\"! )(\"'#&'#"),
          peg$decode("%$4\u01DF\"\"5!7\u01E0/,#0)*4\u01DF\"\"5!7\u01E0&&&#/' 8!:\u01E1!! )"),
          peg$decode("%$4\u01DF\"\"5!7\u01E0/,#0)*4\u01DF\"\"5!7\u01E0&&&#/' 8!:=!! )"),
          peg$decode("%2\u01E2\"\"6\u01E27\u01E3/S#$;\xE8.# &;\xE30)*;\xE8.# &;\xE3&/7$2\u01E2\"\"6\u01E27\u01E3/($8#:\u01E4#!!)(#'#(\"'#&'#.c &%2\u01E5\"\"6\u01E57\u01E6/S#$;\xE8.# &;\xE40)*;\xE8.# &;\xE4&/7$2\u01E5\"\"6\u01E57\u01E6/($8#:\u01E4#!!)(#'#(\"'#&'#"),
          peg$decode(";\xE5.\xE5 &%2\u01E7\"\"6\u01E77\u01E8/1#;\xE6/($8\":$\"! )(\"'#&'#.\xC1 &%2\u01E2\"\"6\u01E27\u01E3/_#$;\xE8.) &;\xE9.# &;\xE30/*;\xE8.) &;\xE9.# &;\xE3&/7$2\u01E2\"\"6\u01E27\u01E3/($8#:\u01E4#!!)(#'#(\"'#&'#.o &%2\u01E5\"\"6\u01E57\u01E6/_#$;\xE8.) &;\xE9.# &;\xE40/*;\xE8.) &;\xE9.# &;\xE4&/7$2\u01E5\"\"6\u01E57\u01E6/($8#:\u01E4#!!)(#'#(\"'#&'#"),
          peg$decode("%4\u01E9\"\"5!7\u01EA/' 8!:\u01EB!! )"),
          peg$decode("%4\u01EC\"\"5!7\u01ED/' 8!:\u01EB!! )"),
          peg$decode("%2\u01EE\"\"6\u01EE7\u01EF/\xAA#;\xEC/\xA1$;\xEF/\x98$;\u0169/\x8F$;\xEF/\x86$$%;\xE6/1#;\xF0/($8\":\u01F0\"!!)(\"'#&'#0;*%;\xE6/1#;\xF0/($8\":\u01F0\"!!)(\"'#&'#&/F$;\u016A/=$%<;\xEF=/##&'!&&#/($8(:\u01F1(!\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%%<;\u016A=.##&&!&'#/e#$;\xE8.) &;\xE9.# &;\xE70/*;\xE8.) &;\xE9.# &;\xE7&/=$%<;\xEF=/##&'!&&#/($8#:\u01E4#!!)(#'#(\"'#&'#"),
          peg$decode("%2\u01F2\"\"6\u01F27\u01F3/& 8!:\u01F4! ).5 &%4\u01F5\"\"5!7\u01F6/' 8!:\u01EB!! )"),
          peg$decode("%2\xC8\"\"6\xC87\xC9/6#2\u01E2\"\"6\u01E27\u01E3/'$8\":\u01F7\" )(\"'#&'#.\u02AA &%2\xC8\"\"6\xC87\xC9/6#2\u01E5\"\"6\u01E57\u01E6/'$8\":\u01F8\" )(\"'#&'#.\u0281 &%2\xC8\"\"6\xC87\xC9/6#2\xD3\"\"6\xD37\xD4/'$8\":\u01F9\" )(\"'#&'#.\u0258 &%2\xC8\"\"6\xC87\xC9/6#2\u01FA\"\"6\u01FA7\u01FB/'$8\":\u01FC\" )(\"'#&'#.\u022F &%2\xC8\"\"6\xC87\xC9/6#2\u01FD\"\"6\u01FD7\u01FE/'$8\":\u01FF\" )(\"'#&'#.\u0206 &%2\xC8\"\"6\xC87\xC9/6#2\u0200\"\"6\u02007\u0201/'$8\":\u0202\" )(\"'#&'#.\u01DD &%2\xC8\"\"6\xC87\xC9/6#2\u0203\"\"6\u02037\u0204/'$8\":\u0205\" )(\"'#&'#.\u01B4 &%2\xC8\"\"6\xC87\xC9/6#2\u0206\"\"6\u02067\u0207/'$8\":\u0208\" )(\"'#&'#.\u018B &%2\xC8\"\"6\xC87\xC9/6#2\u01C3\"\"6\u01C37\u01C4/'$8\":\u0209\" )(\"'#&'#.\u0162 &%2\xC8\"\"6\xC87\xC9/6#2\u01D7\"\"6\u01D77\u01D8/'$8\":\u020A\" )(\"'#&'#.\u0139 &%2\xC8\"\"6\xC87\xC9/V#2\u020B\"\"6\u020B7\u020C/G$4\u020D\"\"5!7\u020E/8$4\u020D\"\"5!7\u020E/)$8$:\u020F$\"! )($'#(#'#(\"'#&'#.\xF0 &%2\xC8\"\"6\xC87\xC9/v#2\u0210\"\"6\u02107\u0211/g$4\u020D\"\"5!7\u020E/X$4\u020D\"\"5!7\u020E/I$4\u020D\"\"5!7\u020E/:$4\u020D\"\"5!7\u020E/+$8&:\u0212&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\x87 &%2\xC8\"\"6\xC87\xC9/w#2\u0210\"\"6\u02107\u0211/h$2\u0213\"\"6\u02137\u0214/Y$$4\u020D\"\"5!7\u020E/,#0)*4\u020D\"\"5!7\u020E&&&#/7$2\u0215\"\"6\u02157\u0216/($8%:\u0217%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2\u0218\"\"6\u02187\u0219/I#;\xEC/@$;\x9D/7$2\u0215\"\"6\u02157\u0216/($8$:\u021A$!!)($'#(#'#(\"'#&'#"),
          peg$decode("$;\xED/&#0#*;\xED&&&#"),
          peg$decode(";\xED.5 &%<4\u021B\"\"5!7\u021C=/##&'!&&#"),
          peg$decode("$;\xED0#*;\xED&"),
          peg$decode("%;\xF0/2#2\u021D\"\"6\u021D7\u021E/#$+\")(\"'#&'#.) &4\u021F\"\"5!7\u0220"),
          peg$decode("$;\xF00#*;\xF0&"),
          peg$decode("$;\xF0/&#0#*;\xF0&&&#"),
          peg$decode("%2\u0221\"\"6\u02217\u0222/H#$4\u0223\"\"5!7\u02240)*4\u0223\"\"5!7\u0224&/,$;\xF1/#$+#)(#'#(\"'#&'#.# &;\xF1"),
          peg$decode("4\u0225\"\"5!7\u0226"),
          peg$decode("2\u0213\"\"6\u02137\u0214"),
          peg$decode("2\u0215\"\"6\u02157\u0216"),
          peg$decode("2\u0227\"\"6\u02277\u0228"),
          peg$decode("2\u0229\"\"6\u02297\u022A"),
          peg$decode("2\u022B\"\"6\u022B7\u022C"),
          peg$decode("2\u022D\"\"6\u022D7\u022E"),
          peg$decode("2\u022F\"\"6\u022F7\u0230"),
          peg$decode("2\u0231\"\"6\u02317\u0232"),
          peg$decode("2\u0233\"\"6\u02337\u0234"),
          peg$decode("2\u0235\"\"6\u02357\u0236"),
          peg$decode("2\u0237\"\"6\u02377\u0238"),
          peg$decode("2\u0239\"\"6\u02397\u023A"),
          peg$decode("2\u023B\"\"6\u023B7\u023C"),
          peg$decode("2\u023D\"\"6\u023D7\u023E"),
          peg$decode("2\u023F\"\"6\u023F7\u0240"),
          peg$decode("2\u0241\"\"6\u02417\u0242"),
          peg$decode("2\u0243\"\"6\u02437\u0244"),
          peg$decode("2\u0245\"\"6\u02457\u0246"),
          peg$decode("2\u0247\"\"6\u02477\u0248"),
          peg$decode("2\u0249\"\"6\u02497\u024A"),
          peg$decode("2\u024B\"\"6\u024B7\u024C"),
          peg$decode("2\u024D\"\"6\u024D7\u024E"),
          peg$decode("2\u024F\"\"6\u024F7\u0250"),
          peg$decode("2\u0251\"\"6\u02517\u0252"),
          peg$decode("2\u0253\"\"6\u02537\u0254"),
          peg$decode("2\u0255\"\"6\u02557\u0256"),
          peg$decode("2\u0257\"\"6\u02577\u0258"),
          peg$decode("2\u0259\"\"6\u02597\u025A"),
          peg$decode("2\u025B\"\"6\u025B7\u025C"),
          peg$decode("2\u025D\"\"6\u025D7\u025E"),
          peg$decode("2\u025F\"\"6\u025F7\u0260"),
          peg$decode("2\u0261\"\"6\u02617\u0262"),
          peg$decode("2\u0263\"\"6\u02637\u0264"),
          peg$decode("2\u0265\"\"6\u02657\u0266"),
          peg$decode("2\u0267\"\"6\u02677\u0268"),
          peg$decode("2\u0269\"\"6\u02697\u026A"),
          peg$decode("2\u026B\"\"6\u026B7\u026C"),
          peg$decode("2\u026D\"\"6\u026D7\u026E"),
          peg$decode("2\u026F\"\"6\u026F7\u0270"),
          peg$decode("2\u0271\"\"6\u02717\u0272"),
          peg$decode("2\u0273\"\"6\u02737\u0274"),
          peg$decode("2\u0275\"\"6\u02757\u0276"),
          peg$decode("2\u0277\"\"6\u02777\u0278"),
          peg$decode("2\u0279\"\"6\u02797\u027A"),
          peg$decode("2\u027B\"\"6\u027B7\u027C"),
          peg$decode("2\u027D\"\"6\u027D7\u027E"),
          peg$decode("2\u027F\"\"6\u027F7\u0280"),
          peg$decode("2\u0281\"\"6\u02817\u0282"),
          peg$decode("2\u0283\"\"6\u02837\u0284"),
          peg$decode("2\u0285\"\"6\u02857\u0286"),
          peg$decode("2\u0287\"\"6\u02877\u0288"),
          peg$decode("2\u0289\"\"6\u02897\u028A"),
          peg$decode("2\u028B\"\"6\u028B7\u028C"),
          peg$decode("2\u028D\"\"6\u028D7\u028E"),
          peg$decode("2\u028F\"\"6\u028F7\u0290"),
          peg$decode("2\u0291\"\"6\u02917\u0292"),
          peg$decode("2\u0293\"\"6\u02937\u0294"),
          peg$decode("2\u0295\"\"6\u02957\u0296"),
          peg$decode("2\u0297\"\"6\u02977\u0298"),
          peg$decode("2\u0299\"\"6\u02997\u029A"),
          peg$decode("2\u029B\"\"6\u029B7\u029C"),
          peg$decode("2\u029D\"\"6\u029D7\u029E"),
          peg$decode("2\u029F\"\"6\u029F7\u02A0"),
          peg$decode("2\u02A1\"\"6\u02A17\u02A2"),
          peg$decode("2\u02A3\"\"6\u02A37\u02A4"),
          peg$decode("2\u02A5\"\"6\u02A57\u02A6"),
          peg$decode("2\u02A7\"\"6\u02A77\u02A8"),
          peg$decode("2\u02A9\"\"6\u02A97\u02AA"),
          peg$decode("2\u02AB\"\"6\u02AB7\u02AC"),
          peg$decode("2\u02AD\"\"6\u02AD7\u02AE"),
          peg$decode("2\u02AF\"\"6\u02AF7\u02B0"),
          peg$decode("2\u02B1\"\"6\u02B17\u02B2"),
          peg$decode("2\u02B3\"\"6\u02B37\u02B4"),
          peg$decode("2\u02B5\"\"6\u02B57\u02B6"),
          peg$decode("2\u02B7\"\"6\u02B77\u02B8"),
          peg$decode("2\u02B9\"\"6\u02B97\u02BA"),
          peg$decode("2\u02BB\"\"6\u02BB7\u02BC"),
          peg$decode("2\u02BD\"\"6\u02BD7\u02BE"),
          peg$decode("2\u02BF\"\"6\u02BF7\u02C0"),
          peg$decode("2\u02C1\"\"6\u02C17\u02C2"),
          peg$decode("2\u02C3\"\"6\u02C37\u02C4"),
          peg$decode("2\u02C5\"\"6\u02C57\u02C6"),
          peg$decode("2\u02C7\"\"6\u02C77\u02C8"),
          peg$decode("2\u02C9\"\"6\u02C97\u02CA"),
          peg$decode("2\u02CB\"\"6\u02CB7\u02CC"),
          peg$decode("2\u02CD\"\"6\u02CD7\u02CE"),
          peg$decode("2\u02CF\"\"6\u02CF7\u02D0"),
          peg$decode("2\u02D1\"\"6\u02D17\u02D2"),
          peg$decode("2\u02D3\"\"6\u02D37\u02D4"),
          peg$decode("2\u02D5\"\"6\u02D57\u02D6"),
          peg$decode("2\u02D7\"\"6\u02D77\u02D8"),
          peg$decode("2\u02D9\"\"6\u02D97\u02DA"),
          peg$decode("2\u02DB\"\"6\u02DB7\u02DC"),
          peg$decode("2\u02DD\"\"6\u02DD7\u02DE"),
          peg$decode("2\u02DF\"\"6\u02DF7\u02E0"),
          peg$decode("2\u02E1\"\"6\u02E17\u02E2"),
          peg$decode("2\u02E3\"\"6\u02E37\u02E4"),
          peg$decode("2\u02E5\"\"6\u02E57\u02E6"),
          peg$decode("2\u02E7\"\"6\u02E77\u02E8"),
          peg$decode("2\u02E9\"\"6\u02E97\u02EA"),
          peg$decode("2\u02EB\"\"6\u02EB7\u02EC"),
          peg$decode("2\u02ED\"\"6\u02ED7\u02EE"),
          peg$decode("2\u02EF\"\"6\u02EF7\u02F0"),
          peg$decode("2\u02F1\"\"6\u02F17\u02F2"),
          peg$decode("2\u02F3\"\"6\u02F37\u02F4"),
          peg$decode("2\u02F5\"\"6\u02F57\u02F6"),
          peg$decode("2\u02F7\"\"6\u02F77\u02F8"),
          peg$decode("2\u02F9\"\"6\u02F97\u02FA"),
          peg$decode("2\u02FB\"\"6\u02FB7\u02FC"),
          peg$decode("2\u02FD\"\"6\u02FD7\u02FE"),
          peg$decode("2\u02FF\"\"6\u02FF7\u0300"),
          peg$decode("2\u0301\"\"6\u03017\u0302"),
          peg$decode("2\u0303\"\"6\u03037\u0304"),
          peg$decode("2\u0305\"\"6\u03057\u0306"),
          peg$decode("2\xCB\"\"6\xCB7\xCC"),
          peg$decode("2\u0307\"\"6\u03077\u0308"),
          peg$decode("20\"\"6071"),
          peg$decode("2\x83\"\"6\x837\x84"),
          peg$decode("%2\u0309\"\"6\u03097\u030A/B#%<2\u0309\"\"6\u03097\u030A=.##&&!&'#/'$8\":\u030B\" )(\"'#&'#"),
          peg$decode("2\u030C\"\"6\u030C7\u030D"),
          peg$decode("2\u030E\"\"6\u030E7\u030F"),
          peg$decode("2\u0144\"\"6\u01447\u0145"),
          peg$decode("2\u016C\"\"6\u016C7\u016D"),
          peg$decode("2\xF8\"\"6\xF87\xF9")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 334 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      var _bindings={};
      var _locals={};
      var reCache={};
      var Entity=false;
      var FunctionChain=false;
      var SafetyFetch=false;
      var References={};
      var InstanceVars={};
      var UnresolvedLocals={};
      var readOnlyReference=true;
      var usedMemberVar=false;
      var DynamicTaskClauseFormatter=undefined;

      var failures=[];
      function fail(msg,loc) { failures.push(msg+" at:"+(loc?loc:location().start.offset)); }

      var filetools={};
      function AddTool(text) {
        filetools[text]=true;
      }
      function GetTools() {
        var tools='';
        for (var tool in filetools) {
          tools=tools+tool;
        }
        return tools;
      }

      var ResWords={},ResWordsA=(
        "andb,and,array,as,asc,audit,"+
        "bind,blank,by,"+
        "chain,create,collect,concat,copy,count,"+
        "default,delete,desc,"+
        "empty,enlist,entrait,enum,exists,expects,"+
        "false,fields,first,from,"+
        "get,"+
        "has,highest,"+
        "into,is,isnt,isNaN,iterate,"+
        "keys,"+
        "last,limit,list,lowest,"+
        "me,my,"+
        "NaN,nand,new,nor,notb,not,number,null,"+
        "observe,orb,or,"+
        "promise,process,"+
        "self,set,singleton,swap,"+
        "task,trial,throw,thru,to,traits,true,typeof,"+
        "undefined,update,using,"+
        "values,via,"+
        "xorb,xor").split(/,/);
      for (var i=0; i<ResWordsA.length; i++) ResWords[ResWordsA[i]]=1;
      
      var _db=false;
      var lp='_'; // prefix for bareword variables
      var LeakedMagic=/\^\{([a-z0-9]+)\}/;
      
      if (undefined===options.constructs) options.constructs={};
      
      function addInstanceVar(v) {
        if (!InstanceVars[v]) {
          //console.log("Added instance var "+v)
          CheckScope(v,"instance");
          InstanceVars[v]=true;
        }
      }

      function addInstanceVars(v) {
        var vt='return '+v[1]+';';
        try {
          var inst=new Function(vt)();
          for (var i in inst) {
            addInstanceVar(i);
          }
        } catch (e) {
          fail(e.message+"\n\nSAI compiler: Instance/Given variables can only be initialized with simple literal values. For more complex initialization, use Instantiate (but still declare them with instance).\n\nYour vars: "+v[1]);
        }
      }
      
      function checkUsedMemberVar(v) {
        if (usedMemberVar) {
          fail("SAI compiler: object task "+v+" is declared as unbound but uses a bareword access to "+usedMemberVar);
        }
        usedMemberVar=false;
      }

      function CheckScope(v,context) {
        //console.log("check scope "+context+": "+v);
        if (References[v]) {
          var message="SAI compiler: variable "+v+" is a Reference variable and cannot be used as a "+context+".";
          //console.log(message);
          fail(message);
        }
        if (InstanceVars[v]) {
          var message="SAI compiler: variable "+v+" is an Instance variable and cannot be used as a "+context+".";
          //console.log(message);
          fail(message);
        }
      }
      
      function addLocal(v,a) { 
        if (_db) console.log("request local "+v+" - "+a);
        if (References[v]) return;
        if (_bindings[v]) return;
        _locals._hasLocals=true;
        if (!_locals[v]) {
          _locals[v]=a?(v+a):v;
        } else if (a) {
          _locals[v]=v+a;
        }
        if (_db) console.log("  added local "+v+" - "+_locals[v]);
      }
      
      function checkLocal(v,name) {
        if (References[v]) return v;
        if (_bindings[v]) return v;
        if (!_locals[v]) {
          UnresolvedLocals[v]=name;
          return '^[U,b,?,'+v+','+name+','+location().start.offset+']';
        }
        return v;
      }
      
      function Linker(code,final) {
        var p=/\^\[U,(.),([^,]+),([^,]+),([^,]+),([^\]]+)\]/g;
        return code.replace(p,function(x,bound,task,v,name,loc) {
          if (References[v]) return v;
          if (_bindings[v]) return v;
          if (_locals[v]) return v;
          if (InstanceVars[name]) {
            usedMemberVar=name;
            if (bound=='u') {
              checkUsedMemberVar(task+"(u)");
            }
            return '$.'+name;
          }
          if (final) {
            //console.log(JSON.stringify(InstanceVars));
            //console.log('SAI Compiler: local variable "'+name+'" used without initialization at:'+loc);
            fail('SAI Compiler: local variable "'+name+'" used without initialization',loc);
          } 
          return x; // unchanged
        });
      }
      
      function removeLocal(v) {
        if (_db) console.log("removed local "+v);
        delete _locals[v];
      }
      
      function getLocals() { 
        if (!_locals._hasLocals) return ''; 
        var k=[]; 
        for (var i in _locals) if (i!=='_hasLocals') {
          if (i!=_locals[i]) {
            k.push(_locals[i]);
          } else {
            k.unshift(_locals[i]);
          }
        } 
        var finalk=[];
        var klookup={};
        if (_db) {
          console.log("references");
          console.log(References);
          console.log("locals");
          console.log(_locals);
        }
        for (var i in k) {
          //console.log(k[i]);
          if (!References[k[i]]) finalk.push(k[i]);
          klookup[k[i]]=k;
        }
    //    for (var i in UnresolvedLocals) {
    //      if (!klookup[i] && !References[i]) {
    //        error("SAI compiler: local variable used before initialization (beware forward declarations): "+UnresolvedLocals[i]);
    //      }
    //    }
        //console.log(finalk);
        var r='var '+finalk.join(',')+';\n'; 
        _locals={};
        UnresolvedLocals={};
        return r; 
      }

      function rep(list,val) {
        var j;
        for (var i in list) {
          if (j==val[list[i]]) list[i]=j;
        }
      }
     
      function RV(code,varnames) {
        if (!varnames) varnames={};
        if (!code) fail("SAI compiler: RV has undefined code; likely a syntax error; perhaps you need to use 'self'");
        if (!code.replace) {
          code=code.toString();
        }
        var repl=function(key) {
          var val=varnames[key];
          if (undefined===val || null===val || false===val) {
            val=tempvar();
            addLocal(val);
          }
          var re=reCache[key]; if (!re) re=reCache[i]=new RegExp('\\^\\{'+key+'\\}','g');
          //console.log(" -- replace "+key+" with "+val)
          code=code.replace(re,val);
        };
        //console.log("###############################")
        //console.log(code);
        //console.log("........................");
        //console.log(varnames);
        var completed={};
        var precedence=['block','this','key','list','counter'];
        for (var j in precedence) {
          var i=precedence[j];
          if (varnames.hasOwnProperty(i)) {
            //console.log("intercept "+i+" with "+varnames[i]);
            repl(i);
            completed[i]=true;
          }
        }
        for (var i in varnames) {
          if (undefined===completed[i]) {
            repl(i);
          }
        }
        //console.log(code)
        //console.log("---------------------------------")
        return code;
      }
      
      var varnum=0;
      function tempvar() {
        var v="$"+(varnum++);
        return v;
      }
      
      function quoted(v) {
        return "'"+v.replace(/\'/g,"\\\'")+"'";
      }
      
      var accessors = {
        firstfetch: { // [0]+key+[1]
          this: [ '$' , '' ],
          currentthis: [ 'this' , ''],
          local: [ '' , '' ], 
          arguments: [ 'arguments','' ],
          parameters: [ 'p','' ],
          it: [ '^{this}','' ],
          key: [ '^{key}','' ],
          counter: [ '^{counter}','' ],
          trial: [ '^{trial}','' ],
          sum: [ '^{sum}','' ],
          error: [ '^{error}','' ],
          self: [ '^{self}','' ],
          super: [ '^{super}','' ],
          paren: [ '', '' ],
          bound: [ '' , '' ],
          global: [ '' , '' ],
          function: [ '' , '' ],
          literal: ['','']
        },
        nextfetch: { // +[0]+key+[1]
          function: [ '(' , ')' ],
          attribute: [ '.' , '' ], 
          index: [ '[' , ']' ],
        },
        firststore: { //[0]+key+[1]
          function: [ '' , '' ],
          paren: [ '', '' ],
          local: [ '' , ''  ],
          error: [ '^{error}','' ],
          attribute: [ '^{this}.' ,  '' ],
          self: [ '^{self}','' ],
          sum: [ '^{sum}' , '' ],
          property: [ '$["' , '"]' ], 
          parameter: [ 'p["','"]' ],
        },
        laststore: { // +[0]+key+[1]
          attribute: [ '.' , '' ], 
          index: [ '[' , ']'  ],
        }
      };

      function safetyFetch(root,leaf) {
        SafetyFetch=true;
        return '(undefined===($_b=('+root+'))?undefined:($_b'+leaf+'))';
      }

      function ValueCompositor(v,safe) {
        //console.log("Value Compositor...");
        //console.log(v);
        var code='';
        if (v[0][0]=='local') {
          var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
          var binding=options.globals[test];
          if (binding) {
            v[0][0]='bound';
            v[0][1]=binding;
          }
        }
        if (v[0][0]=='local') {
          code+=VarUse(v[0][1]);
        }
        var patternbase=accessors.firstfetch;
        var i=0; while (i<v.length) {
          var pattern=patternbase[v[i][0]]; 
          patternbase=accessors.nextfetch;
          if (!pattern) error("SAI Compiler: RV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
          var leaf=pattern[0] + v[i][1] + pattern[1];
          if (i>0 && safe) {
            code=safetyFetch(code,leaf);
          } else {
            code=code+leaf;
          }
          i++;
        }
        return code;
      }

      var itselfops = {
        '+': '^{1} += ^{2}' , // test 'self +'
        '-': '^{1} -= ^{2}' , // test 'self -'
        
        '*': '^{1} *= ^{2}' , // test 'self *'
        '/': '^{1} /= ^{2}' , // test 'self /'
        '%': '^{1} %= ^{2}' , // test 'self %'
        '<<': '^{1} <<= ^{2}' , // 
        '>>': '^{1} >>= ^{2}' , // 
        '>>>': '^{1} >>>= ^{2}' , // 
        '**': '^{1} = Math.pow(^{1},^{2})' , // test 'self **'

        xorb: '^{1} ^= ^{2}' , // test 'self xorb'
        andb: '^{1} &= ^{2}' , // test 'self andb'
        orb: '^{1} |= ^{2}' , // test 'self orb'

        and: '^{1} = ^{1} && ^{2}', // test 'self and'
        or: '^{1} = ^{1} || ^{2}', // test 'self or'
        xor: '^{1} = $AI.xor_op(^{1},^{2})',  // test 'self xor'
        nand: '^{1} = (!((^{1})&&(^{2})))', // test 'self nand'
        nor: '^{1} = (!((^{1})||(^{2})))', // test 'self nor'

        '?>': '^{1} = Math.max(^{1},^{2})', // test 'self ?>'
        '?<': '^{1} = Math.min(^{1},^{2})', // test 'self ?<'
        
        update: '^{1} = $AI.update_op(^{1},^{2})', // test 'self update'
        delete: '$AI.delete_op(^{1},^{2})', // test 'self delete*'
        default: 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        '?': 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        concat: '^{1} = $AI.concat_op(^{1},^{2}, true)', // test 'self concat inplace*'
      };

      var unops={
        '-': '^{1}=-(^{1})' , // test 'self negate'
        'not': '^{1}=!(^{1})', // test 'self not'
        'notb': '^{1}=~(^{1})', // test 'self notb'
        'inc': '^{1}=(^{1} || 0)+1;', // test 'self inc'
        'dec': '^{1}--', // test 'self dec'
        'delete': 'delete ^{1}', // test 'self delete'
        'collect': '^{1} = $AI.collect_op(^{1})' // test 'self collect*'
      };  

      
      function assembleLiteral(v) {
        var build='';
        var result=[];
        for (var i in v) {
          var c=v[i];
          if (c[0]) {
            build+=c[1];
          } else {
            if (build.length) result.push(quoted(build));
            build='';
            if (!result.length) result.push(quoted(''));
            result.push(c[1]);
          }
        }
        if (build.length) result.push(quoted(build));
        if (!result.length) result=[quoted('')];
        return result.join('+');
      }

      var Lists={};
      function addToList(list,e) {
        var list=Lists[list] || (Lists[list]=[]);
        list.push(e);
      }
      function getList(list) {
        var list=Lists[list] || (Lists[list]=[]);
        if (list.length) {
          return '["'+list.join('","')+'"]';
        } 
        return '[]';
      }
      function clearLists() {
        Lists={};
      }
        
      function GetExpectsTester(x,name) {
        var l =[];
        for (var i in x) {
          var t=x[i][1] || 'true';
          var p='"'+x[i][0][1]+'":'+x[i][1];
          l.push(p);
        }
        return '$AI.expectsThrow(p,{'+l.join(',')+'},'+quoted(name)+');\n';
      }
      
      
      // expects
      // as
      // kind
      // body
      // preface
      // appendix
      function TaskClauseFormatter(o) {
        var params=[];
        if (!o.nodefaultparam) {
          params.push('p');
        }
        var expects='',locals=[];//$unused=this';
        if (o.expects && o.as) fail("SAI compile: cannot have both EXPECTS and AS in a function declaration");
        if (o.expects && o.expects.length) {
          expects=GetExpectsTester(o.expects,'in-line');
        } else if (o.as) {
          for (var i in o.as) {
            if (i==0) {
              locals.push(o.as[i][0][1]+'='+params[0]);
            } else {
              params.push(o.as[i][0][1]);
            }
          }
        }
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var finallocals=[];
        for (var i in locals) if (!References[locals[i]]) finallocals.push(locals[i]);
        locals=locals.length?('var '+finallocals.join(',')+';'):'';
        var code = o.kind+'('+params.join(',')+'){'+o.preface+locals+expects+'{'+o.block+'}'+o.postface+'}';
        if (o.execute) code+='()';
        return code;
      }

      
      // prefix (v0)
      // name (v1)
      // as (v2)
      // expects (v3)
      // kind 
      // body (k)
      function TaskFormatter(o) {
        
        var fn=(o.prefix?o.prefix+'_':'')+o.name;
        var params='p';
        var paramspec=o.as||[];
        
        for (var i in paramspec) {
          var pname=paramspec[i][0][1];
          if (i==0) {
            addLocal(pname,'=p');
          } else {
            removeLocal(pname);
            params+=','+pname;
          }
        }

        if (SafetyFetch) { addLocal('$_b'); SafetyFetch=false; }
        if (FunctionChain) { addLocal('$_c'); addLocal('$_d'); FunctionChain=false; }
        if (!o.nothis) {
          if (o.unbound || o.property) {
            addLocal('$','=this');
          } else {
            addLocal('$','=this['+fn+']?this:$bindfail('+fn+')');
          }
        }
        var head='', tail='';
        var sup=GlobVar();
        if (o.prefix!='get' && o.prefix!='set') {
          addToList('lock',fn.substring(1,fn.length-1));
          head='var '+sup+'=prototype['+fn+'] || function(){};\n';
          head+='prototype['+fn+']=';
          tail=';\n';
        }
      
        if (o.unbound) {
          o.body=o.body.replace(/\^\[U,b,\?/g, "^[U,u,"+o.name);
        }
        o.body=Linker(o.body,false);
        if (o.unbound) {
          checkUsedMemberVar(fn+'(t)');
        } usedMemberVar=false;
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var fun=o.kind+'('+params+') {\n'+o.preface+getLocals();
        if (o.expects) {
          fun+=GetExpectsTester(o.expects,fn);
        }
        fun+='{'+o.body+'}'+o.postface; // function body
        fun+='}';
      
        if (o.name) {
          if (fun.indexOf('^{this}')>-1) fail("SAI Compiler: Cannot use unrooted . accessor without a context\n\n"+fun);
        }
        var r=RV(head+fun+tail,{this:false,super:sup});

        return r;

      }

      function VerbCat(v) {
    //       console.log("VerbCat");
    //       console.log(v);
         if (v.left) {
           return v.left+v.base+v.right;
    //     } else if (v.call) {
    //       if (test) {
    //         return RV('((undefined===($_c=^{verb}(($_d=^{base}),^{param})))?$_d:$_c)',v);
    //       } else {
    //         return v.verb+'('+v.base+(v.param?(','+v.param):'')+')';
    //       }
         } else {
           if (v.test) {
             return RV('((undefined===($_c=(($_d=^{base})^{verb}(^{param}))))?$_d:$_c)',v);
           } else {
             return v.base+v.verb+'('+v.param+')';
           }
         }
      }
     
      function AssembleVerb(v) {
         FunctionChain=true;
         if (v.length==1) {
    //       console.log("AV 1");
    //       console.log(v[0]);
           return VerbCat(v[0]);
         }
         var base=v[0].base;
         for (var i in v) {
           v[i].base=base;
           v[i].test=true;
           base=VerbCat(v[i]);
         }
         return base;
      }
      
      function EnumCheck(v) {
        var start=1;
        for (var i in v) {
          if (v[i][1]==='enum') {
            v[i][1]=start++;
          } else {
            var n=parseInt(v[i][1],10);
            if (!isNaN(n)) {
              start=n+1;
            }
          }
        }
        return v;
      }
      
      function GlobVar() {
        return '$'+(options.persist.globalcount++)+'g';
      }
      function VarUse(v) {
        return '';
        //return [].concat(v).map(function(v) { return ' /*:VAR:'+v+':*/ '});
      }
      function FixVars(code) {
      }

      function MagicCheck(code) {
        var lm=LeakedMagic.exec(code);
        if (lm) fail("SAI Compiler: Pronoun '"+lm[1]+"' used in the wrong place (but I can't tell you where yet, please search for your use of this variable and make sure it is contained within a construct that uses it.)");
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()