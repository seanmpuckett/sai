/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { startFile: 0, startExpression: 1 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(r, o) {
              var code='';
              if (r) code+=r;
              code+=o.join('\n')
              MagicCheck(code);
              //console.log(code);
              code=Linker(code,true);
              if (failures.length) options.failures=failures.join('\n');
              code=GetTools()+code;
              return code;
            },
          function(code) {
             MagicCheck(code); 
             code=Linker(code);
             if (failures.length) options.failures=failures.join('\n');
             return code;
           },
          function(v) {
            if (v[0]!='fields') fail("SAI Compiler: REFERENCE requires a trait list.");
            var code='';
            for (var i in v[2]) {
              var r=v[2][i];
              References[lp+r[0]]=true; 
              if (r[1].indexOf('function')==0) {
                fail("SAI Compiler: Cannot define functions in a reference block. Sorry, maybe someday.");
              }
              code+='var '+lp+r[0]+'='+r[1]+';\n'; 
            }
            return code;
          },
          function(k, typ, v, d, s) {
              if (!v) v=quoted('0.0.0-unspecified');
              var code='',isof=[];
              var isa=quoted(k);
              addToList('lock','isa')
              addToList('freeze','isof')
              code+='var isa=prototype.isa='+isa+';\n';
              isof.push('version:'+v);
              isof.push('isa:isa');
              isof.push('context:__context');
              if (typ) {
                isof.push('type:"'+typ+'"');
              }
              code+='var $bindfail=function(m){ throw new Error("SAI: A call to "+m+" on object "+isa+" has come unbound from any instance of that object. (If this is not in error, mark the declaration of "+m+" as unbound.)"); }\n';
              code+='prototype.isof['+isa+']={'+isof.join(',')+'};\n';
              var l;
              if (l=getList('lock')) code+='prototype.__tobelocked=prototype.__tobelocked.concat('+l+');\n';
              if (l=getList('freeze')) code+='prototype.__tobefrozen=prototype.__tobefrozen.concat('+l+');\n';
              code+=d.join('\n');
              code+=s.join('\n');
              clearLists();
              return code;
            },
          function(v) { return v },
          function(v) {
             var inherit='['+v.join(',')+']';
             var code='prototype.isof[prototype.isa].inherit=prototype.__inherits='+inherit+';\n';
             return code;
            },
          function(v) {
             return 'prototype.__contracts=prototype.__contracts.concat(['+v.join(',')+']);\n';
            },
          function(v, p1, p2) {
             addInstanceVar(v);
             var prop={get: undefined, set: undefined};
             prop[p1[0]]=p1[1];
             if (p2) {
               prop[p2[0]]=p2[1]; 
             }
             var ret='Object.defineProperty(prototype,"'+v+
               '",{configurable:true,enumerable:true,get:'+prop.get+
               ',set:'+prop.set+
               '});\n';
             addToList('lock',v);
             return ret;
          },
          function(g, w, b) { 
             if (!g) g='get'; 
             if (g=='get') w=null; 
             return [g,TaskFormatter({prefix:g,as:w,property:true,body:b,kind:'function'})]; 
            },
          function(v, k) {
             v.body=k;
             return TaskFormatter(v);    
            },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:"'"+v+"'",unbound:unbound,expects:x,as:w,kind:'function'};
           },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:v,expects:x,unbound:unbound,as:w,kind:'function*'};
           },
          function(v, unbound, x, o) { 
             addInstanceVar(v);
             var vn="'"+v+"'";
             var isthis='this['+vn+']?this:$bindfail('+vn+')';
             if (unbound) {
               isthis='this';
             }
             return {
              name:vn
              ,expects:x
              ,unbound:unbound
              ,as:o
              ,nothis:true
              ,kind:'function'
              ,preface:'var $='+isthis+'; return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
              };
            },
          function(v) { return "Symbol.iterator" },
          function(v) { return "'"+v+"'" },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function'});
          },
          ";",
          peg$literalExpectation(";", false),
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:'return '+b+';',kind:'function'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function*'});
          },
          function(o, option, x) {
            var f='';
            if (option=='any') {
              f="Promise.race("+x+")";
            } else if (option=='all') {
              f="Promise.all("+x+")";
            } else {
              f=x;
            }
            
            var b=RV('^{f}.then( function(){ return $_resolve.apply($,arguments); } ).catch( function(){ $_reject.apply($,arguments); });',{f:f});

            return TaskClauseFormatter({
              as:o
              ,block:b
              ,nodefaultparam:true
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(x, o, b) {
            return TaskClauseFormatter({
              expects:x
              ,as:o
              ,block:b
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(i, t) { return [i[1],t?t:true] },
          function(i) {return i},
          function(is, i) { is.push(i); return is; },
          function(t) { return [[['','_root'],t]] },
          "..",
          peg$literalExpectation("..", false),
          function(v) { return v+';' },
          function(v) { return v.join('') },
          function(p) {
             var left='',right='';
             for (var i=0; i<p.length; i++) {
               left=p[i][0]+left;
               right=right+p[i][1];
             }
             return [left,right];
           },
          "|",
          peg$literalExpectation("|", false),
          function(i) { return options.pipers[i];},
          function(i) { return options.pipers[i].clauses[i].expr        },
          function(i, o) { return o },
          function(i) { return options.pipers[i].clauses[i].exprs       },
          function(i) { return options.pipers[i].clauses[i].outblock    },
          function(i) { return options.pipers[i].clauses[i].valexpr     },
          function(i) { return options.pipers[i].clauses[i].valoutblock },
          function(i) { return options.pipers[i].clauses[i].valuse      },
          function(i) { return options.pipers[i].clauses[i].use         },
          function(i) { return options.pipers[i].clauses[i].none        },
          function(i, a, cli) { return options.pipers[i].clauses[cli]; },
          function(i, a, cli) { return options.pipers[i].clauses[cli].expr        },
          function(i, a, cli, o) { return o },
          function(i, a, cli) { return options.pipers[i].clauses[cli].exprs       },
          function(i, a, cli) { return options.pipers[i].clauses[cli].outblock    },
          function(i, a, cli) { return options.pipers[i].clauses[cli].valexpr     },
          function(i, a, cli) { return options.pipers[i].clauses[cli].valoutblock },
          function(i, a, cli) { return options.pipers[i].clauses[cli].valuse      },
          function(i, a, cli) { return options.pipers[i].clauses[cli].use         },
          function(i, a, cli) { return options.pipers[i].clauses[cli].none        },
          function(i, a, cli, cla) {return [cli,cla];},
          function(i, a, cl) {

             var opi=options.pipers[i];
             var clauses=[[i,a]].concat(cl);
             var work=[];
             for (var i=0; i<clauses.length; i++) {
                var cl=clauses[i];
                var w={
                  clause: cl[0],
                  syntax: cl[1].syntax,
                  type: cl[0]+"."+cl[1].syntax,
                  args: cl[1]
                };
                work[i]=w;
              }
              var tools={
                  addlocal:function(v){ if (!v) v=tempvar(); addLocal(v); return v; },
                  replacer:RV,
                  tasker:TaskClauseFormatter
              };
              var result=opi.handler({work:work[0],clauses:work,tools:tools});
              if (result.error) fail(result.error);

              if (opi.tools.length) for (var tc=0; tc<opi.tools.length; tc++) AddTool(opi.tools[tc]);
              if (result.tools && result.tools.length) for (var tc=0; tc<result.tools.length; tc++) AddTool(result.tools[tc]);

              return result.leftright || ['',''];
           },
          function(v, o, b) {
             return {
               syntax: 'valoutblock',
               val: v,
               out: o,
               block: b
             };
           },
          function(o, b) {
             return {
               syntax: 'outblock',
               out: o,
               block: b
             };
           },
          function(v, u) {
             return {
               syntax: 'valuse',
               val: v,
               use: u
             };
           },
          function(u) {
             return {
               syntax: 'use',
               use: u
             };
           },
          function(v, x) {
             return {
               syntax: 'valexpr',
               val: v,
               expr: x
             };
           },
          function(x) {
             return {
               syntax: 'exprs',
               exprs: x
             };
           },
          function(x) {
             return {
               syntax: 'expr',
               expr: x
             };
           },
          function() {
             return {
               syntax: 'none'
             };
           },
          function(i) { return options.constructs[i]; },
          function(i) {return options.constructs[i].clauses[i].exproutblock},
          function(i, ca) {return ca},
          function(i) {return options.constructs[i].clauses[i].exprout},
          function(i) {return options.constructs[i].clauses[i].exprsblock},
          function(i) {return options.constructs[i].clauses[i].exprsoutblock},
          function(i) {return options.constructs[i].clauses[i].exprusing},
          function(i) {return options.constructs[i].clauses[i].exprsusing},
          function(i) {return options.constructs[i].clauses[i].outblock},
          function(i) {return options.constructs[i].clauses[i].block},
          function(i) {return options.constructs[i].clauses[i].exprs},
          function(i) {return options.constructs[i].clauses[i].verb},
          function(i) {return options.constructs[i].clauses[i].none},
          function(i, a, cli) {
                if (cli===i && !options.constructs[i].repeats) return false;
                return options.constructs[i].clauses[cli];
              },
          function(i, a, cli) {return options.constructs[i].clauses[cli].exproutblock},
          function(i, a, cli, claa) {return claa},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprout},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprsblock},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprsoutblock},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprusing},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprsusing},
          function(i, a, cli) {return options.constructs[i].clauses[cli].outblock},
          function(i, a, cli) {return options.constructs[i].clauses[cli].block},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprs},
          function(i, a, cli) {return options.constructs[i].clauses[cli].verb},
          function(i, a, cli) {return options.constructs[i].clauses[cli].none},
          function(i, a, cl) {
             
               var opi=options.constructs[i];
               var work=[[i,a]].concat(cl);
               var work2=[];
               for (var i1=0; i1<work.length; i1++) {
                 var j=work[i1];
                 if (j[1].syntax === 'error') {
                   fail("SAI Compiler: Error in "+j[0]+" / "+i+" (this is a propogated error, look within the clause for syntax faults).",j[1].location);
                 }
                 work2.push({
                   clause: j[0],
                   syntax: j[1].syntax,
                   type: j[0]+'.'+j[1].syntax,
                   args: j[1]
                 });
               }
              var result=opi.handler({
                clauses:work2,
                tools:{
                  addlocal:function(v){ if (!v) v=tempvar(); addLocal(v); return v; },
                  replacer:RV,
                  tasker:TaskClauseFormatter
                }
              });
              if (result.error) fail(result.error);
              if (opi.tools && opi.tools.length) for (var tc=0; tc<opi.tools.length; tc++) AddTool(opi.tools[tc]);
              if (result.tools && result.tools.length) for (var tc=0; tc<result.tools.length; tc++) AddTool(result.tools[tc]);
              return result.body;
           },
          peg$anyExpectation(),
          function() { return { syntax: 'error', location: location().start.offset }; },
          function(pl, mo, b) { return {
            syntax: 'exprsoutblock',
            exprs: pl,
            out: mo,
            block: b
          }; },
          function(x, mo, b) { return {
            syntax: 'exproutblock',
            expr: x,
            out: mo,
            block: b
          }; },
          function(x, mo) { return {
            syntax: 'exprout',
            expr: x,
            out: mo,
          }; },
          function(x, task) { return {
            syntax: 'exprusing',
            expr: x,
            using: task
          }; },
          function(pl, task) { return {
            syntax: 'exprsusing',
            exprs: pl,
            using: task
          }; },
          function(mo, b) { return {
            syntax: 'outblock',
            out: mo,
            block: b
          }; },
          function(b) { return {
            syntax: 'block',
            block: b
          }; },
          function(pl) { return {
            syntax: 'exprs',
            exprs: pl
          }; },
          function(pl, b) { return {
            syntax: 'exprsblock',
            exprs: pl,
            block: b
          }; },
          function(v) { return {
            syntax: 'verb',
            verb: v
          }; },
          function() { return { 
            syntax: 'none' 
          }; },
          function() { return ';' },
          function(a, b) {
             return RV('var ^{t1}=^{v1}; var ^{t2}=^{v2}; ^{v2}=^{t1}; ^{v1}=^{t2};',{t1:tempvar(),t2:tempvar(),v1:a,v2:b});
           },
          function(t) { return t },
          function(t) { return t.join(''); },
          function(v) { return v+'=('+v+' || 0)+1;\n'; },
          function(v) { return v+'--;\n'; },
          function(v) { return 'delete '+v+';\n'; },
          ",",
          peg$literalExpectation(",", false),
          function(t, v) { return v },
          function(t, v) { return v.concat(t) },
          function(v) { return v.reduce(function(a,b){return a.concat(b)}) },
          "-",
          peg$literalExpectation("-", false),
          function(l, e) {
               fail('SAI Compiler: the "set val - expr" construct is unclear. Please use "set val to -expr" or "set val self - expr" as appropriate.');
             },
          function(l, o, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) fail("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(itselfops[o], {'1':l[i], '2':RV(e,{self:l[i]}) } )+';\n';
             }
             return code;
           },
          /^[^a-zA-Z0-9_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], true, false),
          function(l, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) fail("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             if (l.length==1) return l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+=l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) fail("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(unops[o],{'1':l[i]})+';\n';
             }
             return code;
           },
          function(l, o) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) fail("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             var a=tempvar();
             addLocal(a);
             for (var i in l) {
               code+=a+'='+l[i]+'; '+l[i]+'='+o[0]+a+o[1]+';\n';
             }
             return code;
           },
          function(l, o, e) {
             fail("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function(l, e) {
             for (var i in l) {
               //console.log("local scope check "+l[i]);
               if ('$.'==l[i].substring(0,2)) CheckScope(l[i].substring(2),"local-1");
               if (lp==l[i].substring(0,lp.length)) CheckScope(l[i],"local-2");
             }
             if (l.length==1) return 'let '+l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+='let '+l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             fail("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function() { return 'local '; },
          "+",
          peg$literalExpectation("+", false),
          "**",
          peg$literalExpectation("**", false),
          "*",
          peg$literalExpectation("*", false),
          "/",
          peg$literalExpectation("/", false),
          "%",
          peg$literalExpectation("%", false),
          "<<",
          peg$literalExpectation("<<", false),
          ">>",
          peg$literalExpectation(">>", false),
          ">>>",
          peg$literalExpectation(">>>", false),
          "?>",
          peg$literalExpectation("?>", false),
          "?<",
          peg$literalExpectation("?<", false),
          "?",
          peg$literalExpectation("?", false),
          function(v) { return v+';\n'; },
          function(v) { return v+";\n"; },
          function(v) { return '$AI.drain_op('+v+');\n'; },
          function(v, a) { return [v].concat(a) },
          function(v) {
              var j=v.length;
              if (!j) fail("SAI Compiler: Expected something to assign into");
              if (j==1) {
                var pattern=accessors.firststore[v[0][0]];
                if (!pattern) fail("SAI Compiler: Couldn't construct recipient from "+v);
                return pattern[0] + v[0][1] + pattern[1];
              }
              j--;
              var code='';
              var patternbase=accessors.firstfetch;
              var i=0; while (i<j) {
                var pattern=patternbase[v[i][0]]; patternbase=accessors.nextfetch;
                if (!pattern) fail("SAI Compiler: Couldn't construct recipient from "+v);
                code+=pattern[0] + v[i][1] + pattern[1];
                i++;
              }
              var pattern=accessors.laststore[v[j][0]];
              if (!pattern) fail("SAI Compiler: Couldn't construct recipient from "+v);
              code= code+pattern[0]+v[j][1]+pattern[1];
              return code;
            },
          function(v) { return ValueCompositor(v,false) },
          function(v) { return ValueCompositor(v,true) },
          function(v) {
              var verb='',stem='';
              if (v[0][0]=='local') {
                var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
                var binding=options.globals[test];
                if (binding) {
                  v[0][0]='bound';
                  v[0][1]=binding;
                }
              }
              var patternbase=accessors.firstfetch;
              var i=0; while (i<v.length) {
                var pattern=patternbase[v[i][0]]; 
                patternbase=accessors.nextfetch;
                if (!pattern) fail("SAI Compiler: VV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
                stem+=verb;
                verb=pattern[0] + v[i][1] + pattern[1];
          //      console.log("VV"+i+": stem:"+stem+" verb:"+verb);
                i++;
              }
              return [stem,verb];
            },
          function(v) { return [['literal',v]] },
          function() { return [['super','']]; },
          function(x, y) { 
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
            },
          function(x, y) {
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
           },
          function() { return [['it','']] },
          function() { return [['key','']]},
          function() { return [['counter','']]},
          function() { return [['trial','']]},
          function() { return [['sum','']]},
          function() { return [['self','']]},
          function() { return [['error','']]},
          function(v) { return [[ 'attribute', v ]] },
          "'s",
          peg$literalExpectation("'s", false),
          function(p) { 
             return [[ 'function', p?p[1]:'' ]] 
          },
          function(v) { return [[ 'it', ''],[ 'attribute', v ]] },
          function(v) { return [[ 'it', ''],[ 'index', v ]] },
          function() { return [[ 'it', '']] },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(v) { return [[ 'index', v ]] },
          "\\",
          peg$literalExpectation("\\", false),
          function(v) { return [['index',v]] },
          ".",
          peg$literalExpectation(".", false),
          function(v) { return [[ 'paren', v ]] },
          function(v) { 
             //console.log("LLocal "+v);
             if (InstanceVars[v]) {
               usedMemberVar=v;
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v) { 
             //console.log("RLocal "+v);
             if (InstanceVars[v]) {
               usedMemberVar=v;
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) {
               v=checkLocal(lp+v,v);
             } else {
               v=lp+v;
             }
             return [[ 'local',v ]];
          },
          "$$",
          peg$literalExpectation("$$", false),
          function() { return [['arguments','']]},
          "$",
          peg$literalExpectation("$", false),
          function(v) { return [[ 'parameters','' ],['attribute',v]] },
          function() { return [[ 'parameters','' ]]},
          function(v) { return [['literal',v]]},
          "~",
          peg$literalExpectation("~", false),
          function(v) { return [['global',v]] },
          "@",
          peg$literalExpectation("@", false),
          function(v) { return [['this',''],[ 'attribute',v ]] },
          "@@",
          peg$literalExpectation("@@", false),
          function(v) { return [['currentthis',''],[ 'attribute',v ]] },
          function() { return [['currentthis','']] },
          function() { return [['this','']] },
          function(k, v) { 
               addToList('freeze',k);
               addInstanceVar(k);
               return 'prototype["'+k+'"]='+v[1]+';\n';
             },
          function(v) { 
          //    addToList('lock',i);
              addInstanceVars(v);
              var code='';
              code+='var t='+v[1]+';\nfor (var i in t) { prototype.__tobelocked.push(i); prototype[i]=t[i]; };\n'; 
              return code;
            },
          function(v) {
              var ivar=GlobVar();
              addInstanceVars(v);
              var proof='var '+ivar+'=function(){ var $=this; return '+v[1]+'; }\nfor (var i in '+ivar+'()) { prototype[i]=undefined; };\n'; 
              var sup=GlobVar();
              var setup= 'var '+sup+'=prototype.Constructor || function(){};\nprototype.Constructor=function() {\n'+sup+'.call(this);\n  var t='+ivar+'();\n  for (var i in t) if (t[i] !== undefined) this[i]=t[i];\n};\n'; 
              return proof+setup;
            },
          function(maj, min, patch) {
             return "'"+maj+"."+min+"."+patch+"'";
           },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields', '{'+w.join(',')+'}',v] },
          function(v) { return ['array',v.join(','),v] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields','{'+w.join(',')+'}',v] },
          function() { return null },
          function(v) { return ['literal',v] },
          function() { return ['literal','[]']; },
          function() { return ['literal','{}']; },
          function(v) { return ['literal','['+v.join(',')+']'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { return v[1] },
          /^[^\n},);|]/,
          peg$classExpectation(["\n", "}", ",", ")", ";", "|"], true, false),
          ")",
          peg$literalExpectation(")", false),
          function(v) { return quoted(v.join('').trim()) },
          function(v, t) { return v.concat(t) },
          function(k) { return [[k,true]] },
          function(k, v) { return [[k,v]] },
          function(v, t) { 
             var r=[]; 
             for (var i in v) r=r.concat(v[i]); 
             r=r.concat(t);  
             return r; 
          },
          function(v, t) { var r=[]; for (var i in v) r=r.concat(v[i]); r=r.concat(t); return r; },
          function(v) { return v[0][1] },
          function(o) {
             var v=[];
             for (var i in o) v.push(o[i][0][1]);
             return v;
           },
          function(k) {return k},
          function(k, v) { k.push(v); return k; },
          function(v) {
             
             CheckScope(v,"parameter/as/given");
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v, c) {
             if (c) {  
               v=c[0]+v+c[1];
             }
             return v;
           },
          function(l, o, r) { return '('+l+o+r+')' },
          function(l, r) { return '($AI.xor_op('+l+','+r+'))' },
          function(l, r) { return '(!('+l+' && '+r+'))' },
          function(l, r) { return '(!('+l+' || '+r+'))' },
          "??",
          peg$literalExpectation("??", false),
          "::",
          peg$literalExpectation("::", false),
          function(l, a, b) { 
               return RV('((^{l})?(^{a}):(^{b}))',{l:l,a:a,b:b}); 
             },
          function(l) { return l },
          function(l, result) { return result; },
          function() { return '&&' },
          function() { return '||' },
          function(l, o, r) { return o+'('+l+','+r+')' },
          ">=",
          peg$literalExpectation(">=", false),
          function() { return '>=' },
          ">",
          peg$literalExpectation(">", false),
          function() { return '>' },
          "=",
          peg$literalExpectation("=", false),
          function() { return '==' },
          function() { return '!==' },
          function() { return '===' },
          "<=",
          peg$literalExpectation("<=", false),
          function() { return '<=' },
          "<",
          peg$literalExpectation("<", false),
          function() { return '<' },
          "!=",
          peg$literalExpectation("!=", false),
          function() { return '!=' },
          function() { return '$AI.max_op' },
          function() { return '$AI.min_op' },
          "<=>",
          peg$literalExpectation("<=>", false),
          function() { return '$AI.compare_op' },
          function() {return '|' },
          function() {return '&'},
          function() { return '^'},
          function(l, v) {  // test 'default*'
                   SafetyFetch=true; 
                   return RV('((undefined!==($_b=^{l}))?$_b:^{v})',{l:l,v:v}); 
                 },
          function(l, r) { // test '**'
                 return 'Math.pow('+l+','+r+')' 
               },
          function(l, op, x) {
                 var p=undefined;
                 if (x) {
                   p=x[1];
                 }
                 return '('+op+').call($,('+l+'),'+p+')';
               },
          function(l, r) { 
                 return '('+l+').isof['+r+']'; 
               },
          function(v) { return '(0-('+v+'))' },
          function(v) { return '(~('+v+'))' },
          function(v) { return '(!('+v+'))' },
          function(v) { return 'typeof ('+v+')'; },
          function(v) { return 'isNaN('+v+')'; },
          function(v) { return '($AI.number_op('+v+'))'; },
          function(v) { return '(undefined!=='+v+')' },
          function(v) { return '$AI.clone_op('+v+')'; },
          function(v) { return  'function(){return ('+v+').apply($,arguments);}'; },
          function(o) { return o },
          "<-",
          peg$literalExpectation("<-", false),
          function(v) { return v; },
          function(v, o) { 
             if (o) {
               addLocal(o);
               return RV('(^{out}='+v+')',{out:o}); 
             } else {
               return '('+v+')'; 
             }
            },
          function(x) { return x },
          /^[igm]/,
          peg$classExpectation(["i", "g", "m"], false, false),
          function(x, m) {
             var re= '/'+x.join('')+'/'+m.join('');
             return re;
           },
          "\\/",
          peg$literalExpectation("\\/", false),
          /^[^\n\r\/]/,
          peg$classExpectation(["\n", "\r", "/"], true, false),
          /^[.([|]/,
          peg$classExpectation([".", "(", "[", "|"], false, false),
          function(v) {var hop=ResWords.hasOwnProperty(v);return hop;},
          /^[a-zA-Z_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
          /^[a-zA-Z_0-9]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false),
          function(v1, v2) { return v1+v2.join('') },
          function() { return 'NaN' },
          function() { return 'Infinity' },
          function() { return 'it' },
          function(v) {
             return AssembleVerb(v);
           },
          "'d",
          peg$literalExpectation("'d", false),
          function(v, b, o) {
            return AssembleVerb([{ base:b, verb:'.'+v, param:(o?o[1]:'')}]);
          },
          function(v, o) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$'+(o?(','+o[1]):'') }]; 
               return [{ base:v[0], verb:v[1], param:(o?o[1]:'') }]
            },
          function(v) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$' }]; 
               return [{ base:v[0], verb:v[1], param:'' }]
             },
          function(v, c) {
             c[0].base=v;
             return AssembleVerb(c);
           },
          function(l) { 
               return l ;
             },
          function(c) {
               return {left:c[0], right: c[1]}
            },
          function(i, o) {
               return {verb:'.'+i, param:(o?o[1]:''), test:true}; 
            },
          function(v, o) { 
             return '$AI.create_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) { 
             return '$AI.singleton_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) {
             return 'new '+v+'('+(o?o[1]:'')+')'; 
           },
          /^[a-zA-Z0-9_\/]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "/"], false, false),
          function(n) { return n.join('') },
          "o",
          peg$literalExpectation("o", false),
          function(v) { return v*(Math.PI/180) },
          "0b",
          peg$literalExpectation("0b", false),
          /^[0-1]/,
          peg$classExpectation([["0", "1"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*2+Number(v[i++]));
             return r.toString();
           },
          "0o",
          peg$literalExpectation("0o", false),
          /^[0-7]/,
          peg$classExpectation([["0", "7"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*8+Number(v[i++]));
             return r.toString();
           },
          "0x",
          peg$literalExpectation("0x", false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*16+v[i++]);
             return r;
           },
          "0",
          peg$literalExpectation("0", false),
          function() { return 0; },
          "1",
          peg$literalExpectation("1", false),
          function() { return 1; },
          "2",
          peg$literalExpectation("2", false),
          function() { return 2; },
          "3",
          peg$literalExpectation("3", false),
          function() { return 3; },
          "4",
          peg$literalExpectation("4", false),
          function() { return 4; },
          "5",
          peg$literalExpectation("5", false),
          function() { return 5; },
          "6",
          peg$literalExpectation("6", false),
          function() { return 6; },
          "7",
          peg$literalExpectation("7", false),
          function() { return 7; },
          "8",
          peg$literalExpectation("8", false),
          function() { return 8; },
          "9",
          peg$literalExpectation("9", false),
          function() { return 9; },
          "a",
          peg$literalExpectation("a", false),
          "A",
          peg$literalExpectation("A", false),
          function() { return 10; },
          "b",
          peg$literalExpectation("b", false),
          "B",
          peg$literalExpectation("B", false),
          function() { return 11; },
          "c",
          peg$literalExpectation("c", false),
          "C",
          peg$literalExpectation("C", false),
          function() { return 12; },
          "d",
          peg$literalExpectation("d", false),
          "D",
          peg$literalExpectation("D", false),
          function() { return 13; },
          "e",
          peg$literalExpectation("e", false),
          "E",
          peg$literalExpectation("E", false),
          function() { return 14; },
          "f",
          peg$literalExpectation("f", false),
          "F",
          peg$literalExpectation("F", false),
          function() { return 15; },
          function(r, x) { return r+'e'+x },
          function(w, f) { return Number(w+'.'+f) },
          function(v) { return -v },
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          function(v) { return parseInt(v.join('')) },
          "&#39",
          peg$literalExpectation("&#39", false),
          function(v) { return assembleLiteral(v) },
          "&#34",
          peg$literalExpectation("&#34", false),
          "'",
          peg$literalExpectation("'", false),
          "\"",
          peg$literalExpectation("\"", false),
          /^[^'\n]/,
          peg$classExpectation(["'", "\n"], true, false),
          function(v) { return [true,v] },
          /^[^"\n]/,
          peg$classExpectation(["\"", "\n"], true, false),
          "'''",
          peg$literalExpectation("'''", false),
          function(v) { return v},
          function(v) { return v.join("+'\\n'+"); },
          "^",
          peg$literalExpectation("^", false),
          function() { return [true, "\\"+"x5e"] },
          /^[^\n]/,
          peg$classExpectation(["\n"], true, false),
          "\\'",
          peg$literalExpectation("\\'", false),
          function() { return [ true, "\x27" ] },
          function(c) { return [ true, '\x5c'+c ] },
          function() { return [ true, '\\x5e' ]},
          function() { return [true,'\x5c'+"'"] },
          function() { return [true,'\x5c'+'"'] },
          function() { return [true,'\x5c'+'$'] },
          "\\;",
          peg$literalExpectation("\\;", false),
          function() { return [true,'\x5c'] },
          "{;",
          peg$literalExpectation("{;", false),
          function() { return [true,'\x7b;'] },
          "};",
          peg$literalExpectation("};", false),
          function() { return [true,'\x7d;'] },
          "n",
          peg$literalExpectation("n", false),
          function() { return [true,'\x5c'+'n'] },
          "r",
          peg$literalExpectation("r", false),
          function() { return [true,'\x5c'+'r'] },
          "t",
          peg$literalExpectation("t", false),
          function() { return [true,'\x5c'+'t'] },
          function() { return [true,'\x5c'+'b'] },
          function() { return [true,'\x5c'+'f'] },
          "x",
          peg$literalExpectation("x", false),
          /^[0-9a-fA-F]/,
          peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
          function(a, b) { return [true,'\x5c'+'x'+a+b ] },
          "u",
          peg$literalExpectation("u", false),
          function(a, b, c, d) { return [true,'\x5c'+'u'+a+b+c+d] },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function(a) { return [true,'\x5c'+'u{'+a.join('')+'}' ] },
          "${",
          peg$literalExpectation("${", false),
          function(v) { return [false,v] },
          "...",
          peg$literalExpectation("...", false),
          /^[ ]/,
          peg$classExpectation([" "], false, false),
          "//",
          peg$literalExpectation("//", false),
          /^[^\r\n]/,
          peg$classExpectation(["\r", "\n"], true, false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "__source",
          peg$literalExpectation("__source", false),
          "__offset",
          peg$literalExpectation("__offset", false),
          "__column",
          peg$literalExpectation("__column", false),
          "__line",
          peg$literalExpectation("__line", false),
          "adopt",
          peg$literalExpectation("adopt", false),
          "all",
          peg$literalExpectation("all", false),
          "and",
          peg$literalExpectation("and", false),
          "andb",
          peg$literalExpectation("andb", false),
          "any",
          peg$literalExpectation("any", false),
          "array",
          peg$literalExpectation("array", false),
          "as",
          peg$literalExpectation("as", false),
          "bind",
          peg$literalExpectation("bind", false),
          "blank",
          peg$literalExpectation("blank", false),
          "chain",
          peg$literalExpectation("chain", false),
          "copy",
          peg$literalExpectation("copy", false),
          "contract",
          peg$literalExpectation("contract", false),
          "counter",
          peg$literalExpectation("counter", false),
          "create",
          peg$literalExpectation("create", false),
          "dec",
          peg$literalExpectation("dec", false),
          "default",
          peg$literalExpectation("default", false),
          "delete",
          peg$literalExpectation("delete", false),
          "empty",
          peg$literalExpectation("empty", false),
          "enum",
          peg$literalExpectation("enum", false),
          "error",
          peg$literalExpectation("error", false),
          "exists",
          peg$literalExpectation("exists", false),
          "expects",
          peg$literalExpectation("expects", false),
          "fields",
          peg$literalExpectation("fields", false),
          "from",
          peg$literalExpectation("from", false),
          "get",
          peg$literalExpectation("get", false),
          "given",
          peg$literalExpectation("given", false),
          "Infinity",
          peg$literalExpectation("Infinity", false),
          "instance",
          peg$literalExpectation("instance", false),
          "inc",
          peg$literalExpectation("inc", false),
          "inherit",
          peg$literalExpectation("inherit", false),
          "isnt",
          peg$literalExpectation("isnt", false),
          "isNaN",
          peg$literalExpectation("isNaN", false),
          "is",
          peg$literalExpectation("is", false),
          "isof",
          peg$literalExpectation("isof", false),
          "Iterator",
          peg$literalExpectation("Iterator", false),
          "it",
          peg$literalExpectation("it", false),
          "key",
          peg$literalExpectation("key", false),
          "list",
          peg$literalExpectation("list", false),
          "local",
          peg$literalExpectation("local", false),
          "main",
          peg$literalExpectation("main", false),
          "NaN",
          peg$literalExpectation("NaN", false),
          "nand",
          peg$literalExpectation("nand", false),
          "new",
          peg$literalExpectation("new", false),
          "nop",
          peg$literalExpectation("nop", false),
          "nor",
          peg$literalExpectation("nor", false),
          "not",
          peg$literalExpectation("not", false),
          "notb",
          peg$literalExpectation("notb", false),
          "number",
          peg$literalExpectation("number", false),
          "null",
          peg$literalExpectation("null", false),
          "object",
          peg$literalExpectation("object", false),
          "or",
          peg$literalExpectation("or", false),
          "orb",
          peg$literalExpectation("orb", false),
          "true",
          peg$literalExpectation("true", false),
          "false",
          peg$literalExpectation("false", false),
          "promise",
          peg$literalExpectation("promise", false),
          "process",
          peg$literalExpectation("process", false),
          "reference",
          peg$literalExpectation("reference", false),
          "self",
          peg$literalExpectation("self", false),
          "set",
          peg$literalExpectation("set", false),
          "singleton",
          peg$literalExpectation("singleton", false),
          "sum",
          peg$literalExpectation("sum", false),
          "swap",
          peg$literalExpectation("swap", false),
          "super",
          peg$literalExpectation("super", false),
          "task",
          peg$literalExpectation("task", false),
          "traits",
          peg$literalExpectation("traits", false),
          "trial",
          peg$literalExpectation("trial", false),
          "to",
          peg$literalExpectation("to", false),
          "typeof",
          peg$literalExpectation("typeof", false),
          "unbound",
          peg$literalExpectation("unbound", false),
          "undefined",
          peg$literalExpectation("undefined", false),
          "using",
          peg$literalExpectation("using", false),
          "via",
          peg$literalExpectation("via", false),
          "xor",
          peg$literalExpectation("xor", false),
          "xorb",
          peg$literalExpectation("xorb", false),
          "!",
          peg$literalExpectation("!", false),
          "#",
          peg$literalExpectation("#", false),
          ":",
          peg$literalExpectation(":", false),
          function() { return ':' },
          "%%INDENT%%",
          peg$literalExpectation("%%INDENT%%", false),
          "%%DEDENT%%",
          peg$literalExpectation("%%DEDENT%%", false),
          "(",
          peg$literalExpectation("(", false)
        ],

        peg$bytecode = [
          peg$decode("%;\xD5/M#;\".\" &\"/?$$;#/&#0#*;#&&&#/)$8#: #\"! )(#'#(\"'#&'#"),
          peg$decode("%;\x9D/1#;\xD6/($8\":!\"!!)(\"'#&'#"),
          peg$decode("%;\u0117/C#;\xD3/:$;\x80/1$;\xD6/($8$:\"$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0110/\xA4#;\xD3/\x9B$;\xAE/\x92$;\xD3/\x89$;\u0106.# &;\u011A.\" &\"/u$;\xD3/l$;\x7F.\" &\"/^$;\xD3/U$;\xD6/L$$;$0#*;$&/<$$;%0#*;%&/,$8+:#+%(&$! )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;&./ &;'.) &;(.# &;~/' 8!:$!! ).# &;\xD6"),
          peg$decode("%;*/' 8!:$!! ).# &;\xD6"),
          peg$decode("%;\xFC/C#;\xD3/:$;\x84/1$;\xD6/($8$:%$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEA/C#;\xD3/:$;\x84/1$;\xD6/($8$:&$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xAE/A#;)/8$;).\" &\"/*$8#:'##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\xD3/k#;\xF7.# &;\u0119/\\$;\xD3/S$;\x9B.\" &\"/E$;\xD3/<$;2/3$;\xD6/*$8':('#%#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;+/;#;2/2$;\xD6/)$8#:)#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;\xAE/\xA2#;\xD3/\x99$;\u0121.\" &\"/\x8B$;\xD3/\x82$;\u0123.\" &\"/t$;\xD3/k$;\u011E/b$;\xD3/Y$;1.\" &\"/K$;\xD3/B$;\x9B.\" &\"/4$;\xD3/+$8,:*,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u013B &%;,/\xA2#;\xD3/\x99$;\u0121.\" &\"/\x8B$;\xD3/\x82$;\u0123.\" &\"/t$;\xD3/k$;\u0116/b$;\xD3/Y$;1.\" &\"/K$;\xD3/B$;\x9B.\" &\"/4$;\xD3/+$8,:+,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAC &%;\xAE/\xA2#;\xD3/\x99$;\u0121.\" &\"/\x8B$;\xD3/\x82$;\u0123.\" &\"/t$;\xD3/k$;\u0115/b$;\xD3/Y$;1.\" &\"/K$;\xD3/B$;\x9B.\" &\"/4$;\xD3/+$8,:,,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0101/' 8!:-!! )./ &%;\xAE/' 8!:.!! )"),
          peg$decode("%;1.\" &\"/S#;\xD3/J$;\x9B.\" &\"/<$;\xD3/3$;2/*$8%:/%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xD3/g$;\x9B.\" &\"/Y$;\xD3/P$20\"\"6071.\" &\"/<$;\xD3/3$;\x9D/*$8':2'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;1.\" &\"/S#;\xD3/J$;\x9B.\" &\"/<$;\xD3/3$;2/*$8%:3%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xD3/g$;\x9B.\" &\"/Y$;\xD3/P$20\"\"6071.\" &\"/<$;\xD3/3$;\x9D/*$8':3'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9B.\" &\"/Z#;\xD3/Q$;\xE3.) &;\xE0.# &;\xDF/<$;\xD3/3$;\x9D/*$8%:4%#$\" )(%'#($'#(#'#(\"'#&'#.b &%;1.\" &\"/S#;\xD3/J$;\x9B.\" &\"/<$;\xD3/3$;2/*$8%:5%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;y/I#;\xD3/@$;\x85.\" &\"/2$;\xD3/)$8$:6$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xF4/\x8D#;\xD3/\x84$$%;0/:#;\u012D/1$;\xD3/($8#:7#!\")(#'#(\"'#&'#0D*%;0/:#;\u012D/1$;\xD3/($8#:7#!\")(#'#(\"'#&'#&/2$;0/)$8$:8$\"! )($'#(#'#(\"'#&'#.M &%;\xF4/C#;\xD3/:$;\x85/1$;\xD3/($8$:9$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xD3/j#;\xD6/a$;\u012F/X$;\xD6/O$;3/F$;\u0130/=$%<;\xD6=/##&'!&&#/($8':$'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.h &%;\xD3/^#2:\"\"6:7;/O$;\xD3/F$;5/=$%<;\xD6=/##&'!&&#/($8%:<%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;4/&#0#*;4&&&#/' 8!:=!! )"),
          peg$decode("%;5/1#;\xD6/($8\":$\"!!)(\"'#&'#"),
          peg$decode(";@.5 &;O./ &;N.) &;M.# &;["),
          peg$decode("%$;7/&#0#*;7&&&#/' 8!:>!! )"),
          peg$decode("%2?\"\"6?7@/\u050D#;\xD3/\u0504$;\xAF/\u04FB$9:A ! -\"\"&!&#/\u04E7$;\xD3/\u04DE$%9:B !#-\"\"&!&#/2#;>/)$8\":C\"\"% )(\"'#&'#.\u0143 &%9:D !#-\"\"&!&#/2#;=/)$8\":C\"\"% )(\"'#&'#.\u0119 &%9:E !#-\"\"&!&#/2#;9/)$8\":C\"\"% )(\"'#&'#.\xEF &%9:F !#-\"\"&!&#/2#;</)$8\":C\"\"% )(\"'#&'#.\xC5 &%9:G !#-\"\"&!&#/2#;8/)$8\":C\"\"% )(\"'#&'#.\x9B &%9:H !#-\"\"&!&#/2#;:/)$8\":C\"\"% )(\"'#&'#.q &%9:I !#-\"\"&!&#/2#;;/)$8\":C\"\"% )(\"'#&'#.G &%9:J !#-\"\"&!&#/2#;?/)$8\":C\"\"% )(\"'#&'#/\u038B$;\xD3/\u0382$$%;\xAF/\u01BD#9:K #'$ -\"\"&!&#/\u01A7$;\xD3/\u019E$%9:L #*'#-\"\"&!&#/4#;>/+$8\":M\"$,)% )(\"'#&'#.\u015F &%9:N #*'#-\"\"&!&#/4#;=/+$8\":M\"$,)% )(\"'#&'#.\u0131 &%9:O #*'#-\"\"&!&#/4#;9/+$8\":M\"$,)% )(\"'#&'#.\u0103 &%9:P #*'#-\"\"&!&#/4#;</+$8\":M\"$,)% )(\"'#&'#.\xD5 &%9:Q #*'#-\"\"&!&#/4#;8/+$8\":M\"$,)% )(\"'#&'#.\xA7 &%9:R #*'#-\"\"&!&#/4#;:/+$8\":M\"$,)% )(\"'#&'#.y &%9:S #*'#-\"\"&!&#/4#;;/+$8\":M\"$,)% )(\"'#&'#.K &%9:T #*'#-\"\"&!&#/4#;?/+$8\":M\"$,)% )(\"'#&'#/+$8$:U$$*'# )($'#(#'#(\"'#&'#0\u01C7*%;\xAF/\u01BD#9:K #'$ -\"\"&!&#/\u01A7$;\xD3/\u019E$%9:L #*'#-\"\"&!&#/4#;>/+$8\":M\"$,)% )(\"'#&'#.\u015F &%9:N #*'#-\"\"&!&#/4#;=/+$8\":M\"$,)% )(\"'#&'#.\u0131 &%9:O #*'#-\"\"&!&#/4#;9/+$8\":M\"$,)% )(\"'#&'#.\u0103 &%9:P #*'#-\"\"&!&#/4#;</+$8\":M\"$,)% )(\"'#&'#.\xD5 &%9:Q #*'#-\"\"&!&#/4#;8/+$8\":M\"$,)% )(\"'#&'#.\xA7 &%9:R #*'#-\"\"&!&#/4#;:/+$8\":M\"$,)% )(\"'#&'#.y &%9:S #*'#-\"\"&!&#/4#;;/+$8\":M\"$,)% )(\"'#&'#.K &%9:T #*'#-\"\"&!&#/4#;?/+$8\":M\"$,)% )(\"'#&'#/+$8$:U$$*'# )($'#(#'#(\"'#&'#&/*$8(:V(#%\" )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xA9/S#;\xD3/J$;\x9B.\" &\"/<$;\xD3/3$;2/*$8%:W%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9B.\" &\"/2#;2/)$8\":X\"\"! )(\"'#&'#"),
          peg$decode("%;\xA9/M#;\xD3/D$;\u0125/;$;\xD2/2$;\xA9/)$8%:Y%\"$ )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0125/:#;\xD2/1$;\xA9/($8#:Z#! )(#'#(\"'#&'#"),
          peg$decode("%;\xA9/;#;\xD3/2$;\xA0/)$8#:[#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\x9F/' 8!:\\!! )"),
          peg$decode("%;\xA0/' 8!:]!! )"),
          peg$decode("%;\xD3/& 8!:^! )"),
          peg$decode("%;\xAF/\u0696#9:_ ! -\"\"&!&#/\u0682$;\xD3/\u0679$%9:` !#-\"\"&!&#/2#;C/)$8\":a\"\"% )(\"'#&'#.\u01C1 &%9:b !#-\"\"&!&#/2#;D/)$8\":a\"\"% )(\"'#&'#.\u0197 &%9:c !#-\"\"&!&#/2#;J/)$8\":a\"\"% )(\"'#&'#.\u016D &%9:d !#-\"\"&!&#/2#;B/)$8\":a\"\"% )(\"'#&'#.\u0143 &%9:e !#-\"\"&!&#/2#;E/)$8\":a\"\"% )(\"'#&'#.\u0119 &%9:f !#-\"\"&!&#/2#;F/)$8\":a\"\"% )(\"'#&'#.\xEF &%9:g !#-\"\"&!&#/2#;G/)$8\":a\"\"% )(\"'#&'#.\xC5 &%9:h !#-\"\"&!&#/2#;H/)$8\":a\"\"% )(\"'#&'#.\x9B &%9:i !#-\"\"&!&#/2#;I/)$8\":a\"\"% )(\"'#&'#.q &%9:j !#-\"\"&!&#/2#;K/)$8\":a\"\"% )(\"'#&'#.G &%9:k !#-\"\"&!&#/2#;L/)$8\":a\"\"% )(\"'#&'#/\u04A8$$%;\xD6/\u0250#;\xAE/\u0247$9:l #'$ -\"\"&!&#/\u0231$;\xD3/\u0228$%9:m #*'#-\"\"&!&#/4#;C/+$8\":n\"$,)% )(\"'#&'#.\u01E9 &%9:o #*'#-\"\"&!&#/4#;D/+$8\":n\"$,)% )(\"'#&'#.\u01BB &%9:p #*'#-\"\"&!&#/4#;J/+$8\":n\"$,)% )(\"'#&'#.\u018D &%9:q #*'#-\"\"&!&#/4#;B/+$8\":n\"$,)% )(\"'#&'#.\u015F &%9:r #*'#-\"\"&!&#/4#;E/+$8\":n\"$,)% )(\"'#&'#.\u0131 &%9:s #*'#-\"\"&!&#/4#;F/+$8\":n\"$,)% )(\"'#&'#.\u0103 &%9:t #*'#-\"\"&!&#/4#;G/+$8\":n\"$,)% )(\"'#&'#.\xD5 &%9:u #*'#-\"\"&!&#/4#;H/+$8\":n\"$,)% )(\"'#&'#.\xA7 &%9:v #*'#-\"\"&!&#/4#;I/+$8\":n\"$,)% )(\"'#&'#.y &%9:w #*'#-\"\"&!&#/4#;K/+$8\":n\"$,)% )(\"'#&'#.K &%9:x #*'#-\"\"&!&#/4#;L/+$8\":n\"$,)% )(\"'#&'#/+$8%:U%$*'# )(%'#($'#(#'#(\"'#&'#0\u025A*%;\xD6/\u0250#;\xAE/\u0247$9:l #'$ -\"\"&!&#/\u0231$;\xD3/\u0228$%9:m #*'#-\"\"&!&#/4#;C/+$8\":n\"$,)% )(\"'#&'#.\u01E9 &%9:o #*'#-\"\"&!&#/4#;D/+$8\":n\"$,)% )(\"'#&'#.\u01BB &%9:p #*'#-\"\"&!&#/4#;J/+$8\":n\"$,)% )(\"'#&'#.\u018D &%9:q #*'#-\"\"&!&#/4#;B/+$8\":n\"$,)% )(\"'#&'#.\u015F &%9:r #*'#-\"\"&!&#/4#;E/+$8\":n\"$,)% )(\"'#&'#.\u0131 &%9:s #*'#-\"\"&!&#/4#;F/+$8\":n\"$,)% )(\"'#&'#.\u0103 &%9:t #*'#-\"\"&!&#/4#;G/+$8\":n\"$,)% )(\"'#&'#.\xD5 &%9:u #*'#-\"\"&!&#/4#;H/+$8\":n\"$,)% )(\"'#&'#.\xA7 &%9:v #*'#-\"\"&!&#/4#;I/+$8\":n\"$,)% )(\"'#&'#.y &%9:w #*'#-\"\"&!&#/4#;K/+$8\":n\"$,)% )(\"'#&'#.K &%9:x #*'#-\"\"&!&#/4#;L/+$8\":n\"$,)% )(\"'#&'#/+$8%:U%$*'# )(%'#($'#(#'#(\"'#&'#&/*$8%:y%#$! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$1\"\"5!7z0(*1\"\"5!7z&/& 8!:{! )"),
          peg$decode("%;\x9F/S#;\xD3/J$;\x9B.\" &\"/<$;\xD3/3$;2/*$8%:|%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9D/S#;\xD3/J$;\x9B.\" &\"/<$;\xD3/3$;2/*$8%:}%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9D/I#;\xD3/@$;\x9B.\" &\"/2$;\xD3/)$8$:~$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9D/M#;\xD3/D$;\u0125/;$;\xD2/2$;\xA9/)$8%:\x7F%\"$ )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9F/M#;\xD3/D$;\u0125/;$;\xD2/2$;\xA9/)$8%:\x80%\"$ )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9B.\" &\"/;#;\xD3/2$;2/)$8#:\x81#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xD3/1#;2/($8\":\x82\"! )(\"'#&'#"),
          peg$decode("%;\x80/' 8!:\x83!! )"),
          peg$decode("%;\xD3/D#;\x80/;$;\xD3/2$;2/)$8$:\x84$\"\" )($'#(#'#(\"'#&'#"),
          peg$decode("%;\xB2/' 8!:\x85!! )"),
          peg$decode("%;\xD3/<#%<;\xD6=/##&'!&&#/'$8\":\x86\" )(\"'#&'#"),
          peg$decode("%;\u010A/0#;\xD3/'$8\":\x87\" )(\"'#&'#"),
          peg$decode("%;\u011C/M#;\xD2/D$;^/;$;\xD2/2$;^/)$8%:\x88%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0119/:#;\xD3/1$;P/($8#:\x89#! )(#'#(\"'#&'#.\u016A &%;\u0119/^#;\xD2/U$;\xD6/L$;\u012F/C$;\xD6/:$;R/1$;\u0130/($8':\x8A'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u011F &%;\u0105/:#;\xD3/1$;T/($8#:\x89#! )(#'#(\"'#&'#.\xF8 &%;\u0105/^#;\xD2/U$;\xD6/L$;\u012F/C$;\xD6/:$;V/1$;\u0130/($8':\x8A'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAD &%;\xFB/C#;\xD3/:$;b/1$;\xD3/($8$:\x8B$!!)($'#(#'#(\"'#&'#.} &%;\xED/C#;\xD3/:$;b/1$;\xD3/($8$:\x8C$!!)($'#(#'#(\"'#&'#.M &%;\xEF/C#;\xD3/:$;b/1$;\xD3/($8$:\x8D$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;S/\xA4#;\xD3/\x9B$$%2\x8E\"\"6\x8E7\x8F/D#;\xD3/;$;S/2$;\xD3/)$8$:\x90$\"'!)($'#(#'#(\"'#&'#0T*%2\x8E\"\"6\x8E7\x8F/D#;\xD3/;$;S/2$;\xD3/)$8$:\x90$\"'!)($'#(#'#(\"'#&'#&/)$8#:\x91#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;P/1#;\xD6/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;Q/&#0#*;Q&&&#/' 8!:\x92!! )"),
          peg$decode("%;_/S#;\xD3/J$2\x93\"\"6\x937\x94/;$;\xD3/2$;\x9D/)$8%:\x95%\"$ )(%'#($'#(#'#(\"'#&'#.\u0142 &%;_/N#;\xD3/E$;Z/<$;\xD3/3$;\x9D/*$8%:\x96%#$\" )(%'#($'#(#'#(\"'#&'#.\u0107 &%;\\/\xAD#;\xD3/\xA4$%;\u0121/>#%<4\x97\"\"5!7\x98=/##&'!&&#/#$+\")(\"'#&'#.\" &\".S &%<;\xF6=/##&'!&&#.A &%<;\u0129=/##&'!&&#./ &%<;\xE8=/##&'!&&#/;$;\xD3/2$;\x9D/)$8%:\x99%\"$ )(%'#($'#(#'#(\"'#&'#.m &%;_/;#;\xD3/2$;Y/)$8#:\x9A#\"\" )(#'#(\"'#&'#.E &%;_/;#;\xD3/2$;6/)$8#:\x9B#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;W/\xA4#;\xD3/\x9B$$%2\x8E\"\"6\x8E7\x8F/D#;\xD3/;$;W/2$;\xD3/)$8$:\x90$\"'!)($'#(#'#(\"'#&'#0T*%2\x8E\"\"6\x8E7\x8F/D#;\xD3/;$;W/2$;\xD3/)$8$:\x90$\"'!)($'#(#'#(\"'#&'#&/)$8#:\x91#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;T/1#;\xD6/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;U/&#0#*;U&&&#/' 8!:\x92!! )"),
          peg$decode("%;_/N#;\xD3/E$;Z/<$;\xD3/3$;\x9D/*$8%:\x9C%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;\\/\x88#;\xD3/\x7F$;\u0121.\" &\".S &%<;\xF6=/##&'!&&#.A &%<;\u0129=/##&'!&&#./ &%<;\xE8=/##&'!&&#/;$;\xD3/2$;\x9D/)$8%:\x9D%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;_/;#;\xD3/2$;Y/)$8#:\x9E#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\u0105/0#;\xD2/'$8\":\x9F\" )(\"'#&'#"),
          peg$decode("2\x93\"\"6\x937\x94./ &;\xEF.) &;\u010D.# &;\u010C"),
          peg$decode("2\xA0\"\"6\xA07\xA1.\xD7 &2\x93\"\"6\x937\x94.\xCB &2\xA2\"\"6\xA27\xA3.\xBF &2\xA4\"\"6\xA47\xA5.\xB3 &2\xA6\"\"6\xA67\xA7.\xA7 &2\xA8\"\"6\xA87\xA9.\x9B &2\xAA\"\"6\xAA7\xAB.\x8F &2\xAC\"\"6\xAC7\xAD.\x83 &2\xAE\"\"6\xAE7\xAF.w &;\xE2.q &;\u0112.k &;\u0128.e &;\xE1._ &;\u0111.Y &;\u0127.S &;\u0108.M &;\u010B.G &2\xB0\"\"6\xB07\xB1.; &2\xB2\"\"6\xB27\xB3./ &;\xEE.) &2\xB4\"\"6\xB47\xB5"),
          peg$decode("%;\xB3/' 8!:\xB6!! ).A &%;\xB2/' 8!:\xB7!! )./ &%;\xB5/' 8!:\xB8!! )"),
          peg$decode("%;^/B#$;]0#*;]&/2$;\xD3/)$8#:\xB9#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%2\x8E\"\"6\x8E7\x8F/:#;\xD3/1$;^/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;e/' 8!:\xBA!! )"),
          peg$decode("%;b/9#$;`0#*;`&/)$8\":\xB9\"\"! )(\"'#&'#"),
          peg$decode("%2\x8E\"\"6\x8E7\x8F/:#;\xD3/1$;b/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;}/' 8!:\xBB!! )"),
          peg$decode("%;f/' 8!:\xBB!! )"),
          peg$decode("%;f/' 8!:\xBC!! )"),
          peg$decode("%;g/' 8!:\xBD!! )"),
          peg$decode(";o.G &;h.A &;j.; &;i.5 &;n./ &;l.) &;k.# &;p"),
          peg$decode(";o.G &;h.A &;j.; &;i.5 &;n./ &;m.) &;k.# &;p"),
          peg$decode(";f.\xAD &%;\u011E/C#;\xD2/:$;-/1$;\xD3/($8$:\xBE$!!)($'#(#'#(\"'#&'#.} &%;\u0116/C#;\xD2/:$;./1$;\xD3/($8$:\xBE$!!)($'#(#'#(\"'#&'#.M &%;\u0115/C#;\xD2/:$;//1$;\xD3/($8$:\xBE$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u011D/0#;\xD3/'$8\":\xBF\" )(\"'#&'#"),
          peg$decode("%;|/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xC0\"\"! )(\"'#&'#"),
          peg$decode("%;t/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xC0\"\"! )(\"'#&'#"),
          peg$decode("%;{/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xC0\"\"! )(\"'#&'#"),
          peg$decode("%;w/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xC0\"\"! )(\"'#&'#"),
          peg$decode("%;x/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xC0\"\"! )(\"'#&'#"),
          peg$decode("%;y/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xC1\"\"! )(\"'#&'#"),
          peg$decode("%;q/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xC1\"\"! )(\"'#&'#"),
          peg$decode("%;v.# &;z/Q#$;r.) &;u.# &;s0/*;r.) &;u.# &;s&/)$8\":\xC1\"\"! )(\"'#&'#"),
          peg$decode("%;\u0102/0#;\xD2/'$8\":\xC2\" )(\"'#&'#.\xCB &%;\u0103/0#;\xD2/'$8\":\xC3\" )(\"'#&'#.\xAE &%;\xEB/0#;\xD2/'$8\":\xC4\" )(\"'#&'#.\x91 &%;\u0120/0#;\xD2/'$8\":\xC5\" )(\"'#&'#.t &%;\u011B/0#;\xD2/'$8\":\xC6\" )(\"'#&'#.W &%;\u0118/0#;\xD2/'$8\":\xC7\" )(\"'#&'#.: &%;\xF2/0#;\xD2/'$8\":\xC8\" )(\"'#&'#"),
          peg$decode("%;\u012A/1#;\xAF/($8\":\xC9\"! )(\"'#&'#.J &%2\xCA\"\"6\xCA7\xCB/:#;\xD2/1$;\xAF/($8#:\xC9#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0132/Z#;\xD3/Q$;\x80.\" &\"/C$;\xD3/:$;\u0133/1$;\xD3/($8&:\xCC&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u012A/F#%<;\u012A=.##&&!&'#/1$;\xAF/($8#:\xCD#! )(#'#(\"'#&'#.d &%;\u012A/1#;\xC5/($8\":\xCE\"! )(\"'#&'#.F &%;\u012A/<#%<;\u012A=.##&&!&'#/'$8\":\xCF\" )(\"'#&'#"),
          peg$decode("%2\xD0\"\"6\xD07\xD1/R#;\xD3/I$;\x9D/@$;\xD3/7$2\xD2\"\"6\xD27\xD3/($8%:\xD4%!\")(%'#($'#(#'#(\"'#&'#.e &%2\xD5\"\"6\xD57\xD6/1#;a/($8\":\xD7\"! )(\"'#&'#.A &%2\xD8\"\"6\xD87\xD9/1#;\xC5/($8\":\xD4\"! )(\"'#&'#"),
          peg$decode("%;\u0132/L#;\xD3/C$;\x9D/:$;\xD3/1$;\u0133/($8%:\xDA%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xAE/' 8!:\xDB!! )"),
          peg$decode("%;\xAE/' 8!:\xDC!! )"),
          peg$decode("%2\xDD\"\"6\xDD7\xDE/& 8!:\xDF! ).X &%2\xE0\"\"6\xE07\xE1/1#;\xAF/($8\":\xE2\"! )(\"'#&'#.4 &%2\xE0\"\"6\xE07\xE1/& 8!:\xE3! )"),
          peg$decode("%;\xB0/' 8!:\xE4!! )"),
          peg$decode("%2\xE5\"\"6\xE57\xE6/1#;\xAF/($8\":\xE7\"! )(\"'#&'#"),
          peg$decode("%2\xE8\"\"6\xE87\xE9/1#;\xAF/($8\":\xEA\"! )(\"'#&'#.o &%2\xEB\"\"6\xEB7\xEC/1#;\xAF/($8\":\xED\"! )(\"'#&'#.K &%2\xEB\"\"6\xEB7\xEC/& 8!:\xEE! ).4 &%2\xE8\"\"6\xE87\xE9/& 8!:\xEF! )"),
          peg$decode(";q.Y &;x.S &;y.M &;|.G &;t.A &%;\xBB/' 8!:\xBE!! )./ &%;\xC8/' 8!:\xBE!! )"),
          peg$decode("%;\xF8/V#;\xD3/M$;\xAE/D$;\xD3/;$;\x81/2$;\xD6/)$8&:\xF0&\"#!)(&'#(%'#($'#(#'#(\"'#&'#.} &%;\xF8/C#;\xD3/:$;\x83/1$;\xD6/($8$:\xF1$!!)($'#(#'#(\"'#&'#.M &%;\xFA/C#;\xD3/:$;\x83/1$;\xD6/($8$:\xF2$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC5/N#;\u012A/E$;\xC5/<$;\u012A/3$;\xC5/*$8%:\xF3%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u012E/^#;\xD3/U$;\xD6/L$;\u012F/C$;\xD6/:$;\x98/1$;\u0130/($8':\xF4'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xD1 &%;\u012E/^#;\xD3/U$;\xD6/L$;\u012F/C$;\xD6/:$;\x8E/1$;\u0130/($8':\xF5'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x86 &%;\x8C/<#20\"\"6071.\" &\"/($8\":\xF5\"!!)(\"'#&'#.] &%;\x96/<#20\"\"6071.\" &\"/($8\":\xF6\"!!)(\"'#&'#.4 &%20\"\"6071/& 8!:\xF7! )"),
          peg$decode("%;\xD3/1#;\x9D/($8\":\xF8\"! )(\"'#&'#"),
          peg$decode("%;\xD3/9#;\xF0/0$;\xD3/'$8#:\xF9# )(#'#(\"'#&'#.\u02EB &%;\xD3/9#;\xE7/0$;\xD3/'$8#:\xFA# )(#'#(\"'#&'#.\u02C5 &%;\xD3/c#;\u0104/Z$;\xD3/Q$;\x88/H$;\xD3/?$;\u012C.\" &\"/1$;\xD3/($8':\xFB'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0275 &%;\xD3/g#;\u0104/^$;\xD3/U$;\xD6/L$;\u012F/C$;\xD6/:$;\x8A/1$;\u0130/($8(:\xFB(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0221 &%;\xD3/c#;\u011F/Z$;\xD3/Q$;\x91/H$;\xD3/?$;\u012C.\" &\"/1$;\xD3/($8':\xFC'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01D1 &%;\xD3/g#;\u011F/^$;\xD3/U$;\xD6/L$;\u012F/C$;\xD6/:$;\x93/1$;\u0130/($8(:\xFD(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u017D &%;\xD3/i#;\u012E.# &;\xF5/Z$;\xD3/Q$;\x96/H$;\xD3/?$;\u012C.\" &\"/1$;\xD3/($8':\xFE'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0127 &%;\xD3/m#;\u012E.# &;\xF5/^$;\xD3/U$;\xD6/L$;\u012F/C$;\xD6/:$;\x98/1$;\u0130/($8(:\xFF(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xCD &%;\xD3/i#;\u012E.# &;\xE4/Z$;\xD3/Q$;\x8C/H$;\xD3/?$;\u012C.\" &\"/1$;\xD3/($8':\xFB'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xD3/m#;\u012E.# &;\xE4/^$;\xD3/U$;\xD6/L$;\u012F/C$;\xD6/:$;\x8E/1$;\u0130/($8(:\xFB(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xD3/i#;\u012E.# &;\xF5/Z$;\xD3/Q$;\x96/H$;\xD3/?$;\u012C.\" &\"/1$;\xD3/($8':\xFE'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xD3/m#;\u012E.# &;\xF5/^$;\xD3/U$;\xD6/L$;\u012F/C$;\xD6/:$;\x98/1$;\u0130/($8(:\xFF(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xD3/i#;\u012E.# &;\u0104/Z$;\xD3/Q$;\x88/H$;\xD3/?$;\u012C.\" &\"/1$;\xD3/($8':$'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xD3/m#;\u012E.# &;\u0104/^$;\xD3/U$;\xD6/L$;\u012F/C$;\xD6/:$;\x8A/1$;\u0130/($8(:$(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0131/:#;\xD3/1$;\x9D/($8#:$#! )(#'#(\"'#&'#._ &%;\x82/' 8!:\u0100!! ).M &;\xCB.G &;\xBB.A &;\u0113.; &;\u0114.5 &;\u0124./ &;\u010F.) &;\xC8.# &;\x86"),
          peg$decode("%$4\u0101\"\"5!7\u0102/,#0)*4\u0101\"\"5!7\u0102&&&#/m#%<2?\"\"6?7@.G &2\x8E\"\"6\x8E7\x8F.; &2\u0103\"\"6\u01037\u0104./ &20\"\"6071.# &;\xD6=/##&'!&&#/($8\":\u0105\"!!)(\"'#&'#"),
          peg$decode("%;\x85/C#;\xD3/:$;\u012D/1$;\xD3/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x870#*;\x87&/2#;\x85/)$8\":\u0106\"\"! )(\"'#&'#"),
          peg$decode("%%<;\u0130=.##&&!&'#/:#;\x88/1$;\xD6/($8#:$#!!)(#'#(\"'#&'#"),
          peg$decode("%$;\x89/&#0#*;\x89&&&#/' 8!:\x92!! )"),
          peg$decode("%;\x9D/C#;\xD3/:$;\u012D/1$;\xD3/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x8B0#*;\x8B&/2#;\x9D/)$8\":\u0106\"\"! )(\"'#&'#"),
          peg$decode("%;\x8C/1#;\xD6/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x8D/&#0#*;\x8D&&&#/' 8!:\x92!! )"),
          peg$decode("%;\u012B/:#;\xAD/1$;\xD3/($8#:\u0107#!!)(#'#(\"'#&'#.N &%;\xAD/D#;\xD2/;$;\x85/2$;\xD3/)$8$:\u0108$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x8F/C#;\xD3/:$;\u012D/1$;\xD3/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x900#*;\x90&/2#;\x8F/)$8\":\u0109\"\"! )(\"'#&'#"),
          peg$decode("%;\x91/1#;\xD6/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x92/&#0#*;\x92&&&#/' 8!:\x92!! )"),
          peg$decode("%;\u012B/:#;\xAD/1$;\xD3/($8#:\u0107#!!)(#'#(\"'#&'#.T &%;\xAD/J#;\xD2/A$;\x9D.# &;\xF1/2$;\xD3/)$8$:\u0108$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x94/C#;\xD3/:$;\u012D/1$;\xD3/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x950#*;\x95&/2#;\x94/)$8\":\u010A\"\"! )(\"'#&'#"),
          peg$decode("%;\x96/1#;\xD6/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x97/&#0#*;\x97&&&#/' 8!:\x92!! )"),
          peg$decode("%;\xE5/C#;\xD3/:$;\x9C/1$;\xD3/($8$:\u010B$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9B/' 8!:\u010C!! )"),
          peg$decode("%;\xE5.# &;\xF8/\xA8#;\xD3/\x9F$$%;\x9C/C#;\xD3/:$;\u012D/1$;\xD3/($8$:\u010D$!#)($'#(#'#(\"'#&'#0M*%;\x9C/C#;\xD3/:$;\u012D/1$;\xD3/($8$:\u010D$!#)($'#(#'#(\"'#&'#&/;$;\xD3/2$;x/)$8%:\u010E%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xAE/' 8!:\u010F!! )"),
          peg$decode("%;\xA0/@#;\xD3/7$;6.\" &\"/)$8#:\u0110#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xA0/C#;\xD3/:$;\u012D/1$;\xD3/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x9E0#*;\x9E&/X#;\xA0/O$;\xD3/F$20\"\"6071.\" &\"/2$;\xD3/)$8%:\u0106%\"$#)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xA2/\u0141#;\xD3/\u0138$%;\xA1/<#;\xD3/3$;\xA0/*$8#:\u0111##%\" )(#'#(\"'#&'#.\u0100 &%;\u0127/;#;\xD3/2$;\xA0/)$8#:\u0112#\"% )(#'#(\"'#&'#.\xD8 &%;\u0108/;#;\xD3/2$;\xA0/)$8#:\u0113#\"% )(#'#(\"'#&'#.\xB0 &%;\u010B/;#;\xD3/2$;\xA0/)$8#:\u0114#\"% )(#'#(\"'#&'#.\x88 &%2\u0115\"\"6\u01157\u0116/f#;\xD3/]$;\xA0/T$;\xD3/K$2\u0117\"\"6\u01177\u0118/<$;\xD3/3$;\xA0/*$8':\u0119'#)$ )(''#(&'#(%'#($'#(#'#(\"'#&'#./ &%;\xD3/' 8!:\u011A!!#)/)$8#:\u011B#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xE1/0#;\xD2/'$8\":\u011C\" )(\"'#&'#.: &%;\u0111/0#;\xD2/'$8\":\u011D\" )(\"'#&'#"),
          peg$decode("%;\xA5/\x99#;\xD3/\x90$%;\xA4/<#;\xD3/3$;\xA2/*$8#:\u011E##%\" )(#'#(\"'#&'#.X &%;\xA3/<#;\xD3/3$;\xA2/*$8#:\u0111##%\" )(#'#(\"'#&'#./ &%;\xD3/' 8!:\u011A!!#)/)$8#:\u011B#\"\" )(#'#(\"'#&'#"),
          peg$decode("%2\u011F\"\"6\u011F7\u0120/& 8!:\u0121! ).\u0106 &%2\u0122\"\"6\u01227\u0123/B#%<2\u0122\"\"6\u01227\u0123=.##&&!&'#/'$8\":\u0124\" )(\"'#&'#.\xD1 &%2\u0125\"\"6\u01257\u0126/& 8!:\u0127! ).\xBA &%;\xFD/0#;\xD2/'$8\":\u0128\" )(\"'#&'#.\x9D &%;\xFF/0#;\xD2/'$8\":\u0129\" )(\"'#&'#.\x80 &%2\u012A\"\"6\u012A7\u012B/& 8!:\u012C! ).i &%2\u012D\"\"6\u012D7\u012E/B#%<2\u012D\"\"6\u012D7\u012E=.##&&!&'#/'$8\":\u012F\" )(\"'#&'#.4 &%2\u0130\"\"6\u01307\u0131/& 8!:\u0132! )"),
          peg$decode("%2\xB0\"\"6\xB07\xB1/& 8!:\u0133! ).K &%2\xB2\"\"6\xB27\xB3/& 8!:\u0134! ).4 &%2\u0135\"\"6\u01357\u0136/& 8!:\u0137! )"),
          peg$decode("%;\xA7/p#;\xD3/g$%;\xA6/<#;\xD3/3$;\xA5/*$8#:\u0111##%\" )(#'#(\"'#&'#./ &%;\xD3/' 8!:\u011A!!#)/)$8#:\u011B#\"\" )(#'#(\"'#&'#"),
          peg$decode("2\xA0\"\"6\xA07\xA1.\x80 &2\x93\"\"6\x937\x94.t &%;\u0112/0#;\xD2/'$8\":\u0138\" )(\"'#&'#.W &%;\xE2/0#;\xD2/'$8\":\u0139\" )(\"'#&'#.: &%;\u0128/0#;\xD2/'$8\":\u013A\" )(\"'#&'#"),
          peg$decode("%;\xA9/\u015F#;\xD3/\u0156$%;\xEE.N &%2\xB4\"\"6\xB47\xB5/>#%<2\xB4\"\"6\xB47\xB5=.##&&!&'#/#$+\")(\"'#&'#/;#;\xD3/2$;\xA7/)$8#:\u013B#\"% )(#'#(\"'#&'#.\xEE &%;\xA8/<#;\xD3/3$;\xA7/*$8#:\u0111##%\" )(#'#(\"'#&'#.\xC5 &%2\xA2\"\"6\xA27\xA3/;#;\xD3/2$;\xA7/)$8#:\u013C#\"% )(#'#(\"'#&'#.\x97 &%;\u0126/S#;\xD3/J$;\xA9/A$;\xD3/8$;\x80.\" &\"/*$8%:\u013D%#'\" )(%'#($'#(#'#(\"'#&'#.W &%;\u0100/;#;\xD2/2$;\xA7/)$8#:\u013E#\"% )(#'#(\"'#&'#./ &%;\xD3/' 8!:\u011A!!#)/)$8#:\u011B#\"\" )(#'#(\"'#&'#"),
          peg$decode("2\xA4\"\"6\xA47\xA5.Y &2\xA6\"\"6\xA67\xA7.M &2\xA8\"\"6\xA87\xA9.A &2\xAE\"\"6\xAE7\xAF.5 &2\xAC\"\"6\xAC7\xAD.) &2\xAA\"\"6\xAA7\xAB"),
          peg$decode("%2\x93\"\"6\x937\x94/C#;\xD3/:$;\xA9/1$;\xD3/($8$:\u013F$!!)($'#(#'#(\"'#&'#.\u039F &%;\u010D/C#;\xD2/:$;\xA9/1$;\xD3/($8$:\u0140$!!)($'#(#'#(\"'#&'#.\u036F &%;\u010C/C#;\xD2/:$;\xA9/1$;\xD3/($8$:\u0141$!!)($'#(#'#(\"'#&'#.\u033F &%;\u0122/C#;\xD2/:$;\xA9/1$;\xD3/($8$:\u0142$!!)($'#(#'#(\"'#&'#.\u030F &%;\xFE/C#;\xD2/:$;\xA9/1$;\xD3/($8$:\u0143$!!)($'#(#'#(\"'#&'#.\u02DF &%;\u010E/:#;\xD2/1$;\xA9/($8#:\u0144#! )(#'#(\"'#&'#.\u02B8 &%;\xF3/C#;\xD2/:$;\xA9/1$;\xD3/($8$:\u0145$!!)($'#(#'#(\"'#&'#.\u0288 &%;\xE9/C#;\xD2/:$;\xA9/1$;\xD3/($8$:\u0146$!!)($'#(#'#(\"'#&'#.\u0258 &%;\u011E/C#;\xD2/:$;-/1$;\xD3/($8$:$$!!)($'#(#'#(\"'#&'#.\u0228 &%;\u0116/C#;\xD2/:$;./1$;\xD3/($8$:$$!!)($'#(#'#(\"'#&'#.\u01F8 &%;\u0115/C#;\xD2/:$;//1$;\xD3/($8$:$$!!)($'#(#'#(\"'#&'#.\u01C8 &%%;\u0129/1#;\xD2.\" &\"/#$+\")(\"'#&'#.6 &%;\xF6/,#;\xD2/#$+\")(\"'#&'#/:#;\xB2/1$;\xD3/($8#:$#!!)(#'#(\"'#&'#.\u0170 &%;\xE6/C#;\xD2/:$;\xA9/1$;\xD3/($8$:\u0147$!!)($'#(#'#(\"'#&'#.\u0140 &;\xB3.\u013A &%2\xB4\"\"6\xB47\xB5/:#;c/1$;\xD3/($8#:$#!!)(#'#(\"'#&'#.\u010D &%;b/1#;\xD3/($8\":$\"!!)(\"'#&'#.\xEF &;\xB5.\xE9 &%;\x82/' 8!:\u0100!! ).\xD7 &%;\xB8/1#;\xD3/($8\":\u0148\"!!)(\"'#&'#.\xB9 &%2\u0149\"\"6\u01497\u014A/:#;\xD3/1$;\x9D/($8#:\u014B#! )(#'#(\"'#&'#.\x8C &%;\u0132/d#;\xD3/[$;\x9D/R$;\xD3/I$;\x99.\" &\"/;$;\u0133/2$;\xD3/)$8':\u014C'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xAA/1#;\xD3/($8\":\u014D\"!!)(\"'#&'#"),
          peg$decode("%2\xA6\"\"6\xA67\xA7/\x7F#$;\xAB.# &;\xAC/,#0)*;\xAB.# &;\xAC&&&#/]$2\xA6\"\"6\xA67\xA7/N$$4\u014E\"\"5!7\u014F0)*4\u014E\"\"5!7\u014F&/2$;\xD3/)$8%:\u0150%\"#!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2\u0151\"\"6\u01517\u0152"),
          peg$decode("4\u0153\"\"5!7\u0154"),
          peg$decode("%;\xAE/C#%<4\u0155\"\"5!7\u0156=.##&&!&'#/($8\":$\"!!)(\"'#&'#.# &;\xC8"),
          peg$decode("%;\xAF/<#9:\u0157 ! -\"\"&#&!/($8\":\u014B\"!!)(\"'#&'#"),
          peg$decode("%4\u0158\"\"5!7\u0159/E#$4\u015A\"\"5!7\u015B0)*4\u015A\"\"5!7\u015B&/)$8\":\u015C\"\"! )(\"'#&'#"),
          peg$decode(";\xBB.] &;\xC8.W &;\u0113.Q &;\u0114.K &;\u0124.E &;\u010F.? &%;\u0107/& 8!:\u015D! ).. &%;\xF9/& 8!:\u015E! )"),
          peg$decode("%;\u0102/0#;\xD2/'$8\":\u015F\" )(\"'#&'#.# &;\x9D"),
          peg$decode("%;\xB4/' 8!:\u0160!! )"),
          peg$decode("%;\xAE/b#2\u0161\"\"6\u01617\u0162/S$;\xD3/J$;\xA9/A$;\xD3/8$;\x80.\" &\"/*$8&:\u0163&#%\" )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;d/@#;\xD3/7$;\x80.\" &\"/)$8#:\u0164#\"\" )(#'#(\"'#&'#.; &%;d/1#;\xD3/($8\":\u0165\"!!)(\"'#&'#"),
          peg$decode("%;\xE8/M#;\xD3/D$;\x9D/;$;\xD3/2$;\xB6/)$8%:\u0166%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xD6/Y#;\u012F/P$;\xD6/G$$;\xB7/&#0#*;\xB7&&&#/1$;\u0130/($8%:\u0167%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;6/:#;\xD3/1$;\xD6/($8#:\u0168#!\")(#'#(\"'#&'#.\\ &%;\xAE/R#;\xD3/I$;\x80.\" &\"/;$;\xD3/2$;\xD6/)$8%:\u0169%\"$\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEC/R#;\xD3/I$;\xA9/@$;\xD3/7$;\x80.\" &\"/)$8%:\u016A%\"\" )(%'#($'#(#'#(\"'#&'#.\x9B &%;\u011A/R#;\xD3/I$;\xA9/@$;\xD3/7$;\x80.\" &\"/)$8%:\u016B%\"\" )(%'#($'#(#'#(\"'#&'#.\\ &%;\u0109/R#;\xD3/I$;\xA9/@$;\xD3/7$;\x80.\" &\"/)$8%:\u016C%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%<;\xD6=/##&'!&&#.G &%<;\xDA=/##&'!&&#.5 &%<2\u0103\"\"6\u01037\u0104=/##&'!&&#"),
          peg$decode("%$4\u016D\"\"5!7\u016E/,#0)*4\u016D\"\"5!7\u016E&&&#/' 8!:\u016F!! )"),
          peg$decode(";\xBE.S &;\xBF.M &;\xBD.G &%;\xBC/7#2\u0170\"\"6\u01707\u0171/($8\":\u0172\"!!)(\"'#&'#.# &;\xBC"),
          peg$decode(";\xC2./ &;\xC3.) &;\xC4.# &;\u0107"),
          peg$decode("%2\u0173\"\"6\u01737\u0174/J#$4\u0175\"\"5!7\u0176/,#0)*4\u0175\"\"5!7\u0176&&&#/($8\":\u0177\"! )(\"'#&'#"),
          peg$decode("%2\u0178\"\"6\u01787\u0179/J#$4\u017A\"\"5!7\u017B/,#0)*4\u017A\"\"5!7\u017B&&&#/($8\":\u017C\"! )(\"'#&'#"),
          peg$decode("%2\u017D\"\"6\u017D7\u017E/1#;\xC0/($8\":\u014B\"! )(\"'#&'#"),
          peg$decode("%$;\xC1/&#0#*;\xC1&&&#/' 8!:\u017F!! )"),
          peg$decode("%2\u0180\"\"6\u01807\u0181/& 8!:\u0182! ).\u01BE &%2\u0183\"\"6\u01837\u0184/& 8!:\u0185! ).\u01A7 &%2\u0186\"\"6\u01867\u0187/& 8!:\u0188! ).\u0190 &%2\u0189\"\"6\u01897\u018A/& 8!:\u018B! ).\u0179 &%2\u018C\"\"6\u018C7\u018D/& 8!:\u018E! ).\u0162 &%2\u018F\"\"6\u018F7\u0190/& 8!:\u0191! ).\u014B &%2\u0192\"\"6\u01927\u0193/& 8!:\u0194! ).\u0134 &%2\u0195\"\"6\u01957\u0196/& 8!:\u0197! ).\u011D &%2\u0198\"\"6\u01987\u0199/& 8!:\u019A! ).\u0106 &%2\u019B\"\"6\u019B7\u019C/& 8!:\u019D! ).\xEF &%2\u019E\"\"6\u019E7\u019F.) &2\u01A0\"\"6\u01A07\u01A1/& 8!:\u01A2! ).\xCC &%2\u01A3\"\"6\u01A37\u01A4.) &2\u01A5\"\"6\u01A57\u01A6/& 8!:\u01A7! ).\xA9 &%2\u01A8\"\"6\u01A87\u01A9.) &2\u01AA\"\"6\u01AA7\u01AB/& 8!:\u01AC! ).\x86 &%2\u01AD\"\"6\u01AD7\u01AE.) &2\u01AF\"\"6\u01AF7\u01B0/& 8!:\u01B1! ).c &%2\u01B2\"\"6\u01B27\u01B3.) &2\u01B4\"\"6\u01B47\u01B5/& 8!:\u01B6! ).@ &%2\u01B7\"\"6\u01B77\u01B8.) &2\u01B9\"\"6\u01B97\u01BA/& 8!:\u01BB! )"),
          peg$decode("%;\xC3.# &;\xC4/A#2\u01B2\"\"6\u01B27\u01B3/2$;\xC4/)$8#:\u01BC#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xC4/;#;\u012A/2$;\xC6/)$8#:\u01BD#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\xC5.A &%2\x93\"\"6\x937\x94/1#;\xC5/($8\":\u01BE\"! )(\"'#&'#"),
          peg$decode("%$4\u01BF\"\"5!7\u01C0/,#0)*4\u01BF\"\"5!7\u01C0&&&#/' 8!:\u01C1!! )"),
          peg$decode("%$4\u01BF\"\"5!7\u01C0/,#0)*4\u01BF\"\"5!7\u01C0&&&#/' 8!:=!! )"),
          peg$decode("%2\u01C2\"\"6\u01C27\u01C3/S#$;\xCE.# &;\xC90)*;\xCE.# &;\xC9&/7$2\u01C2\"\"6\u01C27\u01C3/($8#:\u01C4#!!)(#'#(\"'#&'#.c &%2\u01C5\"\"6\u01C57\u01C6/S#$;\xCE.# &;\xCA0)*;\xCE.# &;\xCA&/7$2\u01C5\"\"6\u01C57\u01C6/($8#:\u01C4#!!)(#'#(\"'#&'#"),
          peg$decode(";\xCB.\xC1 &%2\u01C7\"\"6\u01C77\u01C8/_#$;\xCE.) &;\xD0.# &;\xC90/*;\xCE.) &;\xD0.# &;\xC9&/7$2\u01C7\"\"6\u01C77\u01C8/($8#:\u01C4#!!)(#'#(\"'#&'#.o &%2\u01C9\"\"6\u01C97\u01CA/_#$;\xCE.) &;\xD0.# &;\xCA0/*;\xCE.) &;\xD0.# &;\xCA&/7$2\u01C9\"\"6\u01C97\u01CA/($8#:\u01C4#!!)(#'#(\"'#&'#"),
          peg$decode("%4\u01CB\"\"5!7\u01CC/' 8!:\u01CD!! )"),
          peg$decode("%4\u01CE\"\"5!7\u01CF/' 8!:\u01CD!! )"),
          peg$decode("%2\u01D0\"\"6\u01D07\u01D1/\xAA#;\xD3/\xA1$;\xD6/\x98$;\u012F/\x8F$;\xD6/\x86$$%;\xCC/1#;\xD7/($8\":\u01D2\"!!)(\"'#&'#0;*%;\xCC/1#;\xD7/($8\":\u01D2\"!!)(\"'#&'#&/F$;\u0130/=$%<;\xD6=/##&'!&&#/($8(:\u01D3(!\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%%<;\u0130=.##&&!&'#/e#$;\xCE.) &;\xD0.# &;\xCD0/*;\xCE.) &;\xD0.# &;\xCD&/=$%<;\xD6=/##&'!&&#/($8#:\u01C4#!!)(#'#(\"'#&'#"),
          peg$decode("%2\u01D4\"\"6\u01D47\u01D5/& 8!:\u01D6! ).5 &%4\u01D7\"\"5!7\u01D8/' 8!:\u01CD!! )"),
          peg$decode("%2\u01D9\"\"6\u01D97\u01DA/& 8!:\u01DB! ).] &%2\xD5\"\"6\xD57\xD6/6#1\"\"5!7z/($8\":\u01DC\"! )(\"'#&'#.4 &%2\u01D4\"\"6\u01D47\u01D5/& 8!:\u01DD! )"),
          peg$decode("%2\xD5\"\"6\xD57\xD6/6#2\u01C7\"\"6\u01C77\u01C8/'$8\":\u01DE\" )(\"'#&'#.\u02D3 &%2\xD5\"\"6\xD57\xD6/6#2\u01C9\"\"6\u01C97\u01CA/'$8\":\u01DF\" )(\"'#&'#.\u02AA &%2\xD5\"\"6\xD57\xD6/6#2\xE0\"\"6\xE07\xE1/'$8\":\u01E0\" )(\"'#&'#.\u0281 &%2\xD5\"\"6\xD57\xD6/6#2\u01E1\"\"6\u01E17\u01E2/'$8\":\u01E3\" )(\"'#&'#.\u0258 &%2\xD5\"\"6\xD57\xD6/6#2\u01E4\"\"6\u01E47\u01E5/'$8\":\u01E6\" )(\"'#&'#.\u022F &%2\xD5\"\"6\xD57\xD6/6#2\u01E7\"\"6\u01E77\u01E8/'$8\":\u01E9\" )(\"'#&'#.\u0206 &%2\xD5\"\"6\xD57\xD6/6#2\u01EA\"\"6\u01EA7\u01EB/'$8\":\u01EC\" )(\"'#&'#.\u01DD &%2\xD5\"\"6\xD57\xD6/6#2\u01ED\"\"6\u01ED7\u01EE/'$8\":\u01EF\" )(\"'#&'#.\u01B4 &%2\xD5\"\"6\xD57\xD6/6#2\u01F0\"\"6\u01F07\u01F1/'$8\":\u01F2\" )(\"'#&'#.\u018B &%2\xD5\"\"6\xD57\xD6/6#2\u01A3\"\"6\u01A37\u01A4/'$8\":\u01F3\" )(\"'#&'#.\u0162 &%2\xD5\"\"6\xD57\xD6/6#2\u01B7\"\"6\u01B77\u01B8/'$8\":\u01F4\" )(\"'#&'#.\u0139 &%2\xD5\"\"6\xD57\xD6/V#2\u01F5\"\"6\u01F57\u01F6/G$4\u01F7\"\"5!7\u01F8/8$4\u01F7\"\"5!7\u01F8/)$8$:\u01F9$\"! )($'#(#'#(\"'#&'#.\xF0 &%2\xD5\"\"6\xD57\xD6/v#2\u01FA\"\"6\u01FA7\u01FB/g$4\u01F7\"\"5!7\u01F8/X$4\u01F7\"\"5!7\u01F8/I$4\u01F7\"\"5!7\u01F8/:$4\u01F7\"\"5!7\u01F8/+$8&:\u01FC&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\x87 &%2\xD5\"\"6\xD57\xD6/w#2\u01FA\"\"6\u01FA7\u01FB/h$2\u01FD\"\"6\u01FD7\u01FE/Y$$4\u01F7\"\"5!7\u01F8/,#0)*4\u01F7\"\"5!7\u01F8&&&#/7$2\u01FF\"\"6\u01FF7\u0200/($8%:\u0201%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2\u0202\"\"6\u02027\u0203/I#;\xD3/@$;\x9D/7$2\u01FF\"\"6\u01FF7\u0200/($8$:\u0204$!!)($'#(#'#(\"'#&'#"),
          peg$decode("$;\xD4/&#0#*;\xD4&&&#"),
          peg$decode("$;\xD4/&#0#*;\xD4&&&#.5 &%<4\x97\"\"5!7\x98=/##&'!&&#"),
          peg$decode("$;\xD40#*;\xD4&"),
          peg$decode("%;\xD7/2#2\u0205\"\"6\u02057\u0206/#$+\")(\"'#&'#.) &4\u0207\"\"5!7\u0208"),
          peg$decode("$;\xD70#*;\xD7&"),
          peg$decode("$;\xD7/&#0#*;\xD7&&&#"),
          peg$decode("%$4\u0207\"\"5!7\u02080)*4\u0207\"\"5!7\u0208&/W#2\u0209\"\"6\u02097\u020A/H$$4\u020B\"\"5!7\u020C0)*4\u020B\"\"5!7\u020C&/,$;\xD8/#$+$)($'#(#'#(\"'#&'#.# &;\xD8"),
          peg$decode("4\u020D\"\"5!7\u020E"),
          peg$decode("2\u01FD\"\"6\u01FD7\u01FE"),
          peg$decode("2\u01FF\"\"6\u01FF7\u0200"),
          peg$decode("2\u020F\"\"6\u020F7\u0210"),
          peg$decode("2\u0211\"\"6\u02117\u0212"),
          peg$decode("2\u0213\"\"6\u02137\u0214"),
          peg$decode("2\u0215\"\"6\u02157\u0216"),
          peg$decode("2\u0217\"\"6\u02177\u0218"),
          peg$decode("2\u0219\"\"6\u02197\u021A"),
          peg$decode("2\u021B\"\"6\u021B7\u021C"),
          peg$decode("2\u021D\"\"6\u021D7\u021E"),
          peg$decode("2\u021F\"\"6\u021F7\u0220"),
          peg$decode("2\u0221\"\"6\u02217\u0222"),
          peg$decode("2\u0223\"\"6\u02237\u0224"),
          peg$decode("2\u0225\"\"6\u02257\u0226"),
          peg$decode("2\u0227\"\"6\u02277\u0228"),
          peg$decode("2\u0229\"\"6\u02297\u022A"),
          peg$decode("2\u022B\"\"6\u022B7\u022C"),
          peg$decode("2\u022D\"\"6\u022D7\u022E"),
          peg$decode("2\u022F\"\"6\u022F7\u0230"),
          peg$decode("2\u0231\"\"6\u02317\u0232"),
          peg$decode("2\u0233\"\"6\u02337\u0234"),
          peg$decode("2\u0235\"\"6\u02357\u0236"),
          peg$decode("2\u0237\"\"6\u02377\u0238"),
          peg$decode("2\u0239\"\"6\u02397\u023A"),
          peg$decode("2\u023B\"\"6\u023B7\u023C"),
          peg$decode("2\u023D\"\"6\u023D7\u023E"),
          peg$decode("2\u023F\"\"6\u023F7\u0240"),
          peg$decode("2\u0241\"\"6\u02417\u0242"),
          peg$decode("2\u0243\"\"6\u02437\u0244"),
          peg$decode("2\u0245\"\"6\u02457\u0246"),
          peg$decode("2\u0247\"\"6\u02477\u0248"),
          peg$decode("2\u0249\"\"6\u02497\u024A"),
          peg$decode("2\u024B\"\"6\u024B7\u024C"),
          peg$decode("2\u024D\"\"6\u024D7\u024E"),
          peg$decode("2\u024F\"\"6\u024F7\u0250"),
          peg$decode("2\u0251\"\"6\u02517\u0252"),
          peg$decode("2\u0253\"\"6\u02537\u0254"),
          peg$decode("2\u0255\"\"6\u02557\u0256"),
          peg$decode("2\u0257\"\"6\u02577\u0258"),
          peg$decode("2\u0259\"\"6\u02597\u025A"),
          peg$decode("2\u025B\"\"6\u025B7\u025C"),
          peg$decode("2\u025D\"\"6\u025D7\u025E"),
          peg$decode("2\u025F\"\"6\u025F7\u0260"),
          peg$decode("2\u0261\"\"6\u02617\u0262"),
          peg$decode("2\u0263\"\"6\u02637\u0264"),
          peg$decode("2\u0265\"\"6\u02657\u0266"),
          peg$decode("2\u0267\"\"6\u02677\u0268"),
          peg$decode("2\u0269\"\"6\u02697\u026A"),
          peg$decode("2\u026B\"\"6\u026B7\u026C"),
          peg$decode("2\u026D\"\"6\u026D7\u026E"),
          peg$decode("2\u026F\"\"6\u026F7\u0270"),
          peg$decode("2\u0271\"\"6\u02717\u0272"),
          peg$decode("2\u0273\"\"6\u02737\u0274"),
          peg$decode("2\u0275\"\"6\u02757\u0276"),
          peg$decode("2\u0277\"\"6\u02777\u0278"),
          peg$decode("2\u0279\"\"6\u02797\u027A"),
          peg$decode("2\u027B\"\"6\u027B7\u027C"),
          peg$decode("2\u027D\"\"6\u027D7\u027E"),
          peg$decode("2\u027F\"\"6\u027F7\u0280"),
          peg$decode("2\u0281\"\"6\u02817\u0282"),
          peg$decode("2\u0283\"\"6\u02837\u0284"),
          peg$decode("2\u0285\"\"6\u02857\u0286"),
          peg$decode("2\u0287\"\"6\u02877\u0288"),
          peg$decode("2\u0289\"\"6\u02897\u028A"),
          peg$decode("2\u028B\"\"6\u028B7\u028C"),
          peg$decode("2\u028D\"\"6\u028D7\u028E"),
          peg$decode("2\u028F\"\"6\u028F7\u0290"),
          peg$decode("2\u0291\"\"6\u02917\u0292"),
          peg$decode("2\u0293\"\"6\u02937\u0294"),
          peg$decode("2\u0295\"\"6\u02957\u0296"),
          peg$decode("2\u0297\"\"6\u02977\u0298"),
          peg$decode("2\u0299\"\"6\u02997\u029A"),
          peg$decode("2\u029B\"\"6\u029B7\u029C"),
          peg$decode("2\u029D\"\"6\u029D7\u029E"),
          peg$decode("2\u029F\"\"6\u029F7\u02A0"),
          peg$decode("2\u02A1\"\"6\u02A17\u02A2"),
          peg$decode("2\u02A3\"\"6\u02A37\u02A4"),
          peg$decode("2\u02A5\"\"6\u02A57\u02A6"),
          peg$decode("2\u02A7\"\"6\u02A77\u02A8"),
          peg$decode("2\u02A9\"\"6\u02A97\u02AA"),
          peg$decode("2\u02AB\"\"6\u02AB7\u02AC"),
          peg$decode("2\xD8\"\"6\xD87\xD9"),
          peg$decode("2\u02AD\"\"6\u02AD7\u02AE"),
          peg$decode("20\"\"6071"),
          peg$decode("2\x8E\"\"6\x8E7\x8F"),
          peg$decode("%2\u02AF\"\"6\u02AF7\u02B0/B#%<2\u02AF\"\"6\u02AF7\u02B0=.##&&!&'#/'$8\":\u02B1\" )(\"'#&'#"),
          peg$decode("2\u02B2\"\"6\u02B27\u02B3"),
          peg$decode("2\u02B4\"\"6\u02B47\u02B5"),
          peg$decode("2\u0125\"\"6\u01257\u0126"),
          peg$decode("2\u02B6\"\"6\u02B67\u02B7"),
          peg$decode("2\u0103\"\"6\u01037\u0104")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 276 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      var _bindings={};
      var _locals={};
      var reCache={};
      var Entity=false;
      var FunctionChain=false;
      var SafetyFetch=false;
      var References={};
      var InstanceVars={};
      var UnresolvedLocals={};
      var readOnlyReference=true;
      var usedMemberVar=false;
      var DynamicTaskClauseFormatter=undefined;

      var failures=[];
      function fail(msg,loc) { failures.push(msg+" at:"+(loc?loc:location().start.offset)); }

      var filetools={};
      function AddTool(text) {
        filetools[text]=true;
      }
      function GetTools() {
        var tools='';
        for (var tool in filetools) {
          tools=tools+tool;
        }
        return tools;
      }

      var ResWords={},ResWordsA=(
        "andb,and,array,as,"+
        "bind,blank,"+
        "chain,create,copy,"+
        "default,delete,"+
        "empty,enum,exists,expects,"+
        "false,fields,from,"+
        "get,"+
        ""+
        "is,isnt,isNaN,"+
        ""+
        "list,"+
        ""+
        "NaN,nand,new,nor,notb,not,number,null,"+
        "orb,or,"+
        "promise,process,"+
        "self,set,singleton,swap,"+
        "task,trial,to,traits,true,typeof,"+
        "undefined,using,"+
        "via,"+
        "xorb,xor").split(/,/);
      for (var i=0; i<ResWordsA.length; i++) ResWords[ResWordsA[i]]=1;
      
      var _db=false;
      var lp='_'; // prefix for bareword variables
      var LeakedMagic=/\^\{([a-z0-9]+)\}/;
      
      if (undefined===options.constructs) options.constructs={};
      
      function addInstanceVar(v) {
        if (!InstanceVars[v]) {
          //console.log("Added instance var "+v)
          CheckScope(v,"instance");
          InstanceVars[v]=true;
        }
      }

      function addInstanceVars(v) {
        var vt='return '+v[1]+';';
        try {
          var inst=new Function(vt)();
          for (var i in inst) {
            addInstanceVar(i);
          }
        } catch (e) {
          fail(e.message+"\n\nSAI compiler: Instance/Given variables can only be initialized with simple literal values. For more complex initialization, use Instantiate (but still declare them with instance).\n\nYour vars: "+v[1]);
        }
      }
      
      function checkUsedMemberVar(v) {
        if (usedMemberVar) {
          fail("SAI compiler: object task "+v+" is declared as unbound but uses a bareword access to "+usedMemberVar);
        }
        usedMemberVar=false;
      }

      function CheckScope(v,context) {
        //console.log("check scope "+context+": "+v);
        if (References[v]) {
          var message="SAI compiler: variable "+v+" is a Reference variable and cannot be used as a "+context+".";
          //console.log(message);
          fail(message);
        }
        if (InstanceVars[v]) {
          var message="SAI compiler: variable "+v+" is an Instance variable and cannot be used as a "+context+".";
          //console.log(message);
          fail(message);
        }
      }
      
      function addLocal(v,a) { 
        if (_db) console.log("request local "+v+" - "+a);
        if (References[v]) return;
        if (_bindings[v]) return;
        _locals._hasLocals=true;
        if (!_locals[v]) {
          _locals[v]=a?(v+a):v;
        } else if (a) {
          _locals[v]=v+a;
        }
        if (_db) console.log("  added local "+v+" - "+_locals[v]);
      }
      
      function checkLocal(v,name) {
        if (References[v]) return v;
        if (_bindings[v]) return v;
        if (!_locals[v]) {
          UnresolvedLocals[v]=name;
          return '^[U,b,?,'+v+','+name+','+location().start.offset+']';
        }
        return v;
      }
      
      function Linker(code,final) {
        var p=/\^\[U,(.),([^,]+),([^,]+),([^,]+),([^\]]+)\]/g;
        return code.replace(p,function(x,bound,task,v,name,loc) {
          if (References[v]) return v;
          if (_bindings[v]) return v;
          if (_locals[v]) return v;
          if (InstanceVars[name]) {
            usedMemberVar=name;
            if (bound=='u') {
              checkUsedMemberVar(task+"(u)");
            }
            return '$.'+name;
          }
          if (final) {
            //console.log(JSON.stringify(InstanceVars));
            //console.log('SAI Compiler: local variable "'+name+'" used without initialization at:'+loc);
            fail('SAI Compiler: local variable "'+name+'" used without initialization',loc);
          } 
          return x; // unchanged
        });
      }
      
      function removeLocal(v) {
        if (_db) console.log("removed local "+v);
        delete _locals[v];
      }
      
      function getLocals() { 
        if (!_locals._hasLocals) return ''; 
        var k=[]; 
        for (var i in _locals) if (i!=='_hasLocals') {
          if (i!=_locals[i]) {
            k.push(_locals[i]);
          } else {
            k.unshift(_locals[i]);
          }
        } 
        var finalk=[];
        var klookup={};
        if (_db) {
          console.log("references");
          console.log(References);
          console.log("locals");
          console.log(_locals);
        }
        for (var i in k) {
          //console.log(k[i]);
          if (!References[k[i]]) finalk.push(k[i]);
          klookup[k[i]]=k;
        }
    //    for (var i in UnresolvedLocals) {
    //      if (!klookup[i] && !References[i]) {
    //        error("SAI compiler: local variable used before initialization (beware forward declarations): "+UnresolvedLocals[i]);
    //      }
    //    }
        //console.log(finalk);
        var r='var '+finalk.join(',')+';\n'; 
        _locals={};
        UnresolvedLocals={};
        return r; 
      }

      function rep(list,val) {
        var j;
        for (var i in list) {
          if (j==val[list[i]]) list[i]=j;
        }
      }
     
      function RV(code,varnames) {
        if (!varnames) varnames={};
        if (!code) fail("SAI compiler: RV has undefined code; likely a syntax error; perhaps you need to use 'self'");
        if (!code.replace) {
          code=code.toString();
        }
        var repl=function(key) {
          var val=varnames[key];
          if (undefined===val || null===val || false===val) {
            val=tempvar();
            addLocal(val);
          }
          var re=reCache[key]; if (!re) re=reCache[i]=new RegExp('\\^\\{'+key+'\\}','g');
          //console.log(" -- replace "+key+" with "+val)
          code=code.replace(re,val);
        };
        //console.log("###############################")
        //console.log(code);
        //console.log("........................");
        //console.log(varnames);
        var completed={};
        var precedence=['block','this','key','list','counter'];
        for (var j in precedence) {
          var i=precedence[j];
          if (varnames.hasOwnProperty(i)) {
            //console.log("intercept "+i+" with "+varnames[i]);
            repl(i);
            completed[i]=true;
          }
        }
        for (var i in varnames) {
          if (undefined===completed[i]) {
            repl(i);
          }
        }
        //console.log(code)
        //console.log("---------------------------------")
        return code;
      }
      
      var varnum=0;
      function tempvar() {
        var v="$"+(varnum++);
        return v;
      }
      
      function quoted(v) {
        return "'"+v.replace(/\'/g,"\\\'")+"'";
      }
      
      var accessors = {
        firstfetch: { // [0]+key+[1]
          this: [ '$' , '' ],
          currentthis: [ 'this' , ''],
          local: [ '' , '' ], 
          arguments: [ 'arguments','' ],
          parameters: [ 'p','' ],
          it: [ '^{this}','' ],
          key: [ '^{key}','' ],
          counter: [ '^{counter}','' ],
          trial: [ '^{trial}','' ],
          sum: [ '^{sum}','' ],
          error: [ '^{error}','' ],
          self: [ '^{self}','' ],
          super: [ '^{super}','' ],
          paren: [ '', '' ],
          bound: [ '' , '' ],
          global: [ '' , '' ],
          function: [ '' , '' ],
          literal: ['','']
        },
        nextfetch: { // +[0]+key+[1]
          function: [ '(' , ')' ],
          attribute: [ '.' , '' ], 
          index: [ '[' , ']' ],
        },
        firststore: { //[0]+key+[1]
          function: [ '' , '' ],
          paren: [ '', '' ],
          local: [ '' , ''  ],
          error: [ '^{error}','' ],
          attribute: [ '^{this}.' ,  '' ],
          self: [ '^{self}','' ],
          sum: [ '^{sum}' , '' ],
          property: [ '$["' , '"]' ], 
          parameter: [ 'p["','"]' ],
        },
        laststore: { // +[0]+key+[1]
          attribute: [ '.' , '' ], 
          index: [ '[' , ']'  ],
        }
      };

      function safetyFetch(root,leaf) {
        SafetyFetch=true;
        return '(undefined===($_b=('+root+'))?undefined:($_b'+leaf+'))';
      }

      function ValueCompositor(v,safe) {
        //console.log("Value Compositor...");
        //console.log(v);
        var code='';
        if (v[0][0]=='local') {
          var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
          var binding=options.globals[test];
          if (binding) {
            v[0][0]='bound';
            v[0][1]=binding;
          }
        }
        if (v[0][0]=='local') {
          code+=VarUse(v[0][1]);
        }
        var patternbase=accessors.firstfetch;
        var i=0; while (i<v.length) {
          var pattern=patternbase[v[i][0]]; 
          patternbase=accessors.nextfetch;
          if (!pattern) error("SAI Compiler: RV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
          var leaf=pattern[0] + v[i][1] + pattern[1];
          if (i>0 && safe) {
            code=safetyFetch(code,leaf);
          } else {
            code=code+leaf;
          }
          i++;
        }
        return code;
      }

      var itselfops = {
        '+': '^{1} += ^{2}' , // test 'self +'
        '-': '^{1} -= ^{2}' , // test 'self -'
        
        '*': '^{1} *= ^{2}' , // test 'self *'
        '/': '^{1} /= ^{2}' , // test 'self /'
        '%': '^{1} %= ^{2}' , // test 'self %'
        '<<': '^{1} <<= ^{2}' , // 
        '>>': '^{1} >>= ^{2}' , // 
        '>>>': '^{1} >>>= ^{2}' , // 
        '**': '^{1} = Math.pow(^{1},^{2})' , // test 'self **'

        xorb: '^{1} ^= ^{2}' , // test 'self xorb'
        andb: '^{1} &= ^{2}' , // test 'self andb'
        orb: '^{1} |= ^{2}' , // test 'self orb'

        and: '^{1} = ^{1} && ^{2}', // test 'self and'
        or: '^{1} = ^{1} || ^{2}', // test 'self or'
        xor: '^{1} = $AI.xor_op(^{1},^{2})',  // test 'self xor'
        nand: '^{1} = (!((^{1})&&(^{2})))', // test 'self nand'
        nor: '^{1} = (!((^{1})||(^{2})))', // test 'self nor'

        '?>': '^{1} = Math.max(^{1},^{2})', // test 'self ?>'
        '?<': '^{1} = Math.min(^{1},^{2})', // test 'self ?<'
        
        default: 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        '?': 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
      };

      var unops={
        '-': '^{1}=-(^{1})' , // test 'self negate'
        'not': '^{1}=!(^{1})', // test 'self not'
        'notb': '^{1}=~(^{1})', // test 'self notb'
        'inc': '^{1}=(^{1} || 0)+1;', // test 'self inc'
        'dec': '^{1}--', // test 'self dec'
        'delete': 'delete ^{1}', // test 'self delete'
      };  

      
      function assembleLiteral(v) {
        var build='';
        var result=[];
        for (var i in v) {
          var c=v[i];
          if (c[0]) {
            build+=c[1];
          } else {
            if (build.length) result.push(quoted(build));
            build='';
            if (!result.length) result.push(quoted(''));
            result.push(c[1]);
          }
        }
        if (build.length) result.push(quoted(build));
        if (!result.length) result=[quoted('')];
        return result.join('+');
      }

      var Lists={};
      function addToList(list,e) {
        var list=Lists[list] || (Lists[list]=[]);
        list.push(e);
      }
      function getList(list) {
        var list=Lists[list] || (Lists[list]=[]);
        if (list.length) {
          return '["'+list.join('","')+'"]';
        } 
        return '[]';
      }
      function clearLists() {
        Lists={};
      }
        
      function GetExpectsTester(x,name) {
        var l =[];
        for (var i in x) {
          var t=x[i][1] || 'true';
          var p='"'+x[i][0][1]+'":'+x[i][1];
          l.push(p);
        }
        return '$AI.expectsThrow(p,{'+l.join(',')+'},'+quoted(name)+');\n';
      }
      
      
      // expects
      // as
      // kind
      // body
      // preface
      // appendix
      function TaskClauseFormatter(o) {
        var params=[];
        if (!o.nodefaultparam) {
          params.push('p');
        }
        var expects='',locals=[];//$unused=this';
        if (o.expects && o.as) fail("SAI compile: cannot have both EXPECTS and AS in a function declaration");
        if (o.expects && o.expects.length) {
          expects=GetExpectsTester(o.expects,'in-line');
        } else if (o.as) {
          for (var i in o.as) {
            if (i==0) {
              locals.push(o.as[i][0][1]+'='+params[0]);
            } else {
              params.push(o.as[i][0][1]);
            }
          }
        }
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var finallocals=[];
        for (var i in locals) if (!References[locals[i]]) finallocals.push(locals[i]);
        locals=locals.length?('var '+finallocals.join(',')+';'):'';
        var code = o.kind+'('+params.join(',')+'){'+o.preface+locals+expects+'{'+o.block+'}'+o.postface+'}';
        if (o.execute) code+='()';
        return code;
      }

      
      // prefix (v0)
      // name (v1)
      // as (v2)
      // expects (v3)
      // kind 
      // body (k)
      function TaskFormatter(o) {
        
        var fn=(o.prefix?o.prefix+'_':'')+o.name;
        var params='p';
        var paramspec=o.as||[];
        
        for (var i in paramspec) {
          var pname=paramspec[i][0][1];
          if (i==0) {
            addLocal(pname,'=p');
          } else {
            removeLocal(pname);
            params+=','+pname;
          }
        }

        if (SafetyFetch) { addLocal('$_b'); SafetyFetch=false; }
        if (FunctionChain) { addLocal('$_c'); addLocal('$_d'); FunctionChain=false; }
        if (!o.nothis) {
          if (o.unbound || o.property) {
            addLocal('$','=this');
          } else {
            addLocal('$','=this['+fn+']?this:$bindfail('+fn+')');
          }
        }
        var head='', tail='';
        var sup=GlobVar();
        if (o.prefix!='get' && o.prefix!='set') {
          addToList('lock',fn.substring(1,fn.length-1));
          head='var '+sup+'=prototype['+fn+'] || function(){};\n';
          head+='prototype['+fn+']=';
          tail=';\n';
        }
      
        if (o.unbound) {
          o.body=o.body.replace(/\^\[U,b,\?/g, "^[U,u,"+o.name);
        }
        o.body=Linker(o.body,false);
        if (o.unbound) {
          checkUsedMemberVar(fn+'(t)');
        } usedMemberVar=false;
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var fun=o.kind+'('+params+') {\n'+o.preface+getLocals();
        if (o.expects) {
          fun+=GetExpectsTester(o.expects,fn);
        }
        fun+='{'+o.body+'}'+o.postface; // function body
        fun+='}';
      
        if (o.name) {
          if (fun.indexOf('^{this}')>-1) fail("SAI Compiler: Cannot use unrooted . accessor without a context\n\n"+fun);
        }
        var r=RV(head+fun+tail,{this:false,super:sup});

        return r;

      }

      function VerbCat(v) {
    //       console.log("VerbCat");
    //       console.log(v);
         if (v.left) {
           return v.left+v.base+v.right;
    //     } else if (v.call) {
    //       if (test) {
    //         return RV('((undefined===($_c=^{verb}(($_d=^{base}),^{param})))?$_d:$_c)',v);
    //       } else {
    //         return v.verb+'('+v.base+(v.param?(','+v.param):'')+')';
    //       }
         } else {
           if (v.test) {
             return RV('((undefined===($_c=(($_d=^{base})^{verb}(^{param}))))?$_d:$_c)',v);
           } else {
             return v.base+v.verb+'('+v.param+')';
           }
         }
      }
     
      function AssembleVerb(v) {
         FunctionChain=true;
         if (v.length==1) {
    //       console.log("AV 1");
    //       console.log(v[0]);
           return VerbCat(v[0]);
         }
         var base=v[0].base;
         for (var i in v) {
           v[i].base=base;
           v[i].test=true;
           base=VerbCat(v[i]);
         }
         return base;
      }
      
      function EnumCheck(v) {
        var start=1;
        for (var i in v) {
          if (v[i][1]==='enum') {
            v[i][1]=start++;
          } else {
            var n=parseInt(v[i][1],10);
            if (!isNaN(n)) {
              start=n+1;
            }
          }
        }
        return v;
      }
      
      function GlobVar() {
        return '$'+(options.persist.globalcount++)+'g';
      }
      function VarUse(v) {
        return '';
        //return [].concat(v).map(function(v) { return ' /*:VAR:'+v+':*/ '});
      }
      function FixVars(code) {
      }

      function MagicCheck(code) {
        var lm=LeakedMagic.exec(code);
        if (lm) fail("SAI Compiler: Pronoun '"+lm[1]+"' used in the wrong place (but I can't tell you where yet, please search for your use of this variable and make sure it is contained within a construct that uses it.)");
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()