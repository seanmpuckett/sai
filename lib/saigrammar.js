/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { startFile: 0, startExpression: 1 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(r, o) {
              var code='';
              if (r) code+=r;
              code+=o.join('\n')
              MagicCheck(code);
              code=Linker(code,true);
              return code;
            },
          function(code) {
             MagicCheck(code); 
             code=Linker(code);
             return code;
           },
          function(v) {
            if (v[0]!='fields') error("SAI Compiler: REFERENCE requires a trait list.");
            var code='';
            for (var i in v[2]) {
              var r=v[2][i];
              References[lp+r[0]]=true; 
              if (r[1].indexOf('function')==0) {
                error("SAI Compiler: Cannot define functions in a reference block. Sorry, maybe someday.");
              }
              code+='var '+lp+r[0]+'='+r[1]+';\n'; 
            }
            return code;
          },
          function(k, typ, v, d, s) {
              if (!v) v=quoted('0.0.0-unspecified');
              var code='',isof=[];
              var isa=quoted(k);
              addToList('lock','isa')
              addToList('freeze','isof')
              code+='var isa=prototype.isa='+isa+';\n';
              isof.push('version:'+v);
              isof.push('isa:isa');
              isof.push('context:__context');
              if (typ) {
                isof.push('type:"'+typ+'"');
              }
              code+='var $bindfail=function(m){ throw new Error("SAI: A call to "+m+" on object "+isa+" has come unbound from any instance of that object. (If this is not in error, mark the declaration of "+m+" as unbound.)"); }\n';
              code+='prototype.isof['+isa+']={'+isof.join(',')+'};\n';
              var l;
              if (l=getList('lock')) code+='prototype.__tobelocked=prototype.__tobelocked.concat('+l+');\n';
              if (l=getList('freeze')) code+='prototype.__tobefrozen=prototype.__tobefrozen.concat('+l+');\n';
              code+=d.join('\n');
              code+=s.join('\n');
              clearLists();
              return code;
            },
          function(v) { return v },
          function(v) {
             var inherit='['+v.join(',')+']';
             var code='prototype.isof[prototype.isa].inherit=prototype.__inherits='+inherit+';\n';
             return code;
            },
          function(v) {
             return 'prototype.__contracts=prototype.__contracts.concat(['+v.join(',')+']);\n';
            },
          function(v, p1, p2) {
             addInstanceVar(v);
             var prop={get: undefined, set: undefined};
             prop[p1[0]]=p1[1];
             if (p2) {
               prop[p2[0]]=p2[1]; 
             }
             var ret='Object.defineProperty(prototype,"'+v+
               '",{configurable:true,enumerable:true,get:'+prop.get+
               ',set:'+prop.set+
               '});\n';
             addToList('lock',v);
             return ret;
          },
          function(g, w, b) { 
             if (!g) g='get'; 
             if (g=='get') w=null; 
             return [g,TaskFormatter({prefix:g,as:w,unbound:true,body:b,kind:'function'})]; 
            },
          function(v, k) {
             v.body=k;
             return TaskFormatter(v);    
            },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:"'"+v+"'",unbound:unbound,expects:x,as:w,kind:'function'};
           },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:v,expects:x,unbound:unbound,as:w,kind:'function*'};
           },
          function(v, unbound, x, o) { 
             addInstanceVar(v);
             var vn="'"+v+"'";
             var isthis='this['+vn+']?this:$bindfail('+vn+')';
             if (unbound) {
               isthis='this';
             }
             return {
              name:vn
              ,expects:x
              ,as:o
              ,nothis:true
              ,kind:'function'
              ,preface:'var $='+isthis+'; return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
              };
            },
          function(v) { return "Symbol.iterator" },
          function(v) { return "'"+v+"'" },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function'});
          },
          ";",
          peg$literalExpectation(";", false),
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:'return '+b+';',kind:'function'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function*'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({
              expects:x
              ,as:o
              ,block:b
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(i, t) { return [i[1],t?t:true] },
          function(i) {return i},
          function(is, i) { is.push(i); return is; },
          function(t) { return [[['','_root'],t]] },
          "..",
          peg$literalExpectation("..", false),
          function(v) { return v+';' },
          function(v) { return v.join('') },
          function() { return 'break;\n'; },
          function() { return 'continue;\n' },
          function() { return 'var $=this;\n' },
          function() { return ';' },
          function(s, o, c) {return c},
          function(s, o, c, d) {return d},
          function(s, o, c, d) {
             o=o?o:tempvar();
             addLocal(o);
             var repl={trial:o};
             var r=RV('switch (^{trial}=('+s+')) {\n',repl);
             for (var i in c) {
               for (var j in c[i][0]) {
                 r+='case ('+c[i][0][j]+'): ';
               }
               r+=RV(c[i][1]+' break; \n',repl);
             }
             if (d) r+=RV('default: '+d+' break; \n',repl);
             r+='}\n';
             return r;
           },
          function(e) { return e; },
          function(e, b) { return [e,b]; },
          function(b) { return b; },
          function(p) { // test 'throw'
           return 'throw '+p+';\n' },
          function(t, c) {return c},
          function(t, c, f) {return f},
          function(t, c, f) {
             if (!(c||f)) error("SAI Compiler: TRY needs a CATCH and/or FINALLY");
             return t+(c?c:'')+(f?f:'');
           },
          function(b) { return 'try {'+b+'}\n'; },
          function(o, b) { 
             o=o?o:tempvar();
             addLocal(o);
             return RV('catch (^{error}) {'+b+'}\n',{error:o}); 
           },
          function(b) { return 'finally {'+b+'}\n' },
          function(i, l) {return l},
          function(i, l, e) {return e},
          function(i, l, e) { return i+l.join('')+(e?e:'') },
          function(c, out, b) { // test 'exists*'
             if (!out) out=tempvar();
             addLocal(out);
             return RV('if (undefined !==(^{this}=(^{condition}))) {\n'+b+'\n}\n',{this:out,condition:c}); 
           },
          function(c, out, b) { // test 'if*'
             if (!out) out=tempvar();
             addLocal(out);
             return RV('if ((^{trial}=(^{condition}))) {\n'+b+'\n}\n',{trial:out,condition:c}); 
           },
          function(c, b) { // test 'unless*'
             return 'if (!('+c+')) {\n'+b+'\n}\n' },
          function(b) { return 'else '+b+'\n' },
          function(b) { return 'else {'+b+'}\n' },
          ",",
          peg$literalExpectation(",", false),
          function(l) { return l },
          function(l, o) {
             l=l||[]; l.push(o);
             var j=[]; for (var i in l) j.push(l[i][0][1]);
             for (var i in j) CheckScope(j[i].substring(1),"local");
             return 'var '+j.join(',')+';\n';
           },
          function(value, out, block) {
                var r={this:(out?out:tempvar())};
                var code=RV('var ^{this}=',r)+value+RV(';\n'+block+'\n',r);
                return code; 
            },
          function(a, b) {
             return RV('var ^{t1}=^{v1}; var ^{t2}=^{v2}; ^{v2}=^{t1}; ^{v1}=^{t2};',{t1:tempvar(),t2:tempvar(),v1:a,v2:b});
           },
          function(t) { return t },
          function(t) { return t.join(''); },
          function(v) { return v+'=('+v+' || 0)+1;\n'; },
          function(v) { return v+'--;\n'; },
          function(v) { return 'delete '+v+';\n'; },
          function(t, v) { return v },
          function(t, v) { return v.concat(t) },
          function(v) { return v.reduce(function(a,b){return a.concat(b)}) },
          "-",
          peg$literalExpectation("-", false),
          function(l, e) {
               error('SAI Compiler: the "set val - expr" construct is unclear. Please use "set val to -expr" or "set val self - expr" as appropriate.');
             },
          function(l, o, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) error("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(itselfops[o], {'1':l[i], '2':RV(e,{self:l[i]}) } )+';\n';
             }
             return code;
           },
          function(l, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) error("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             if (l.length==1) return l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+=l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) error("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(unops[o],{'1':l[i]})+';\n';
             }
             return code;
           },
          function(l, o, e) {
             error("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function(l, e) {
             for (var i in l) {
               //console.log("local scope check "+l[i]);
               if ('$.'==l[i].substring(0,2)) CheckScope(l[i].substring(2),"local-1");
               if (lp==l[i].substring(0,lp.length)) CheckScope(l[i],"local-2");
             }
             if (l.length==1) return 'let '+l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+='let '+l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             error("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function() { return 'local '; },
          "+",
          peg$literalExpectation("+", false),
          "**",
          peg$literalExpectation("**", false),
          "*",
          peg$literalExpectation("*", false),
          "/",
          peg$literalExpectation("/", false),
          "%",
          peg$literalExpectation("%", false),
          "<<",
          peg$literalExpectation("<<", false),
          ">>",
          peg$literalExpectation(">>", false),
          ">>>",
          peg$literalExpectation(">>>", false),
          "?>",
          peg$literalExpectation("?>", false),
          "?<",
          peg$literalExpectation("?<", false),
          "?",
          peg$literalExpectation("?", false),
          function(v) { return v+';\n'; },
          function(v) { return v+";\n"; },
          function(v) { return '$AI.drain_op('+v+');\n'; },
          function(k) { return k },
          function(k) { 
             return 'return '+(k?k:'')+';\n' 
            },
          function(r, k) { 
             return r+'('+(k?k:'')+');\n' ;
            },
          function(k) { 
             return 'yield *'+'('+k+');\n' ;
            },
          function(k) { 
             return 'yield '+'('+k+');\n' ;
            },
          function() { return '$_resolve' },
          function() { return '$_reject' },
          function(b) { return '{'+b+'}\n' },
          function(v, o, b, n) {return n},
          function(v, o, b, n) {
             var w={block:b,t1:tempvar(),t2:tempvar(),v:v,none:n,key:(o?o[1]:false),this:(o?o[0]:false)};
             var setup='var ^{t1}=$AI.kviterate_op(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'if (!^{t2}.done) ';
             var iterate='for (; !^{t2}.done; ^{t2}=^{t1}.next()) { ^{this}=^{t2}.value[1]; ^{key}=^{t2}.value[0]; ^{block}; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, task, n) {return n},
          function(v, task, n) {
             var w={task:task,t1:tempvar(),t2:tempvar(),v:v,none:n,key:tempvar()};
             var setup='var ^{t1}=$AI.kviterate_op(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'';
             var iterate='while (!^{t2}.done) { ^{task}(^{t2}.value[1],^{t2}.value[0]); ^{t2}=^{t1}.next();}\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, o, b, n) {
             var w={block:b,t1:tempvar(),t2:tempvar(),v:v,none:n,key:(o?o[1]:false),this:(o?o[0]:false)};
             var setup='var ^{t1}=$AI.iterator_op(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'if (!^{t2}.done) ';
             var iterate='for (var ^{key}=0; !^{t2}.done; ^{t2}=^{t1}.next(), ^{key}++) { ^{this}=^{t2}.value; ^{block}; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, task, n) {
             var w={task:task,t1:tempvar(),t2:tempvar(),v:v,none:n,key:tempvar()};
             var setup='var ^{t1}=$AI.iterator_op(^{v}), ^{t2}=^{t1}.next(), ^{key}=0;\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'';
             var iterate='while (!^{t2}.done) { ^{task}(^{t2}.value,^{key}); ^{t2}=^{t1}.next(); ^{key}++; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, o, b, n) {
               var w={block:b,j:tempvar(),v:v,n:n,k:tempvar(),key:(o?o[1]:false),this:(o?o[0]:false),list:(o?o[2]:false)};
               var setup='var ^{list}=^{v};\nif (undefined===^{list}) ^{list}=[];';
               var iterate='for (var ^{key} in ^{list}) { var ^{this}=^{list}[^{key}];\n^{block}}\n'+(n?'if (undefined===^{key}) { ^{n} }\n':'');
               return RV(setup+iterate,w); 
            },
          function(list, task, n) {return n},
          function(list, task, none) {
               var w={task:task,list:list,j:tempvar(),k:tempvar(),none:none};
               var setup='var ^{j}=^{list};\nif (undefined===^{j}) ^{j}=[]; ';
               var iterate='for (var ^{k} in ^{j}) ^{task}(^{j}[^{k}],^{k},^{j});\n';
               var final=none?'if (^{k}===undefined) { ^{none} }\n':'';
               return RV(setup+iterate+final,w); 
            },
          function(v, o, b, n) {
               var w={block:b,j:tempvar(),v:v,n:n,k:tempvar(),l:tempvar(),key:(o?o[1]:false),this:(o?o[0]:false),list:(o?o[2]:false)};
               var setup='var ^{list}=^{v};\nif (undefined===^{list}) ^{list}=[]; ';
               var iterate='var ^{l}=^{list}.length; if (^{l}) { var ^{this},^{key}=0; for (;^{key}<^{l};^{key}++) { ^{this}=^{list}[^{key}];\n^{block}\n} } '+(n?'else { ^{n} }':'')+'\n';
               return RV(setup+iterate,w); 
            },
          function(list, task, none) {
               var w={task:task,list:list,l:tempvar(),j:tempvar(),k:tempvar(),none:none};
               var setup='var ^{j}=^{list};\nif (undefined===^{j}) ^{j}=[]; var ^{l}=^{j}.length;\n';
               var test=none?'if (!^{l}) ^{none} else ':'';
               var iterate='for (var ^{k}=0; ^{k}<^{l}; ^{k}++) { ^{task}(^{j}[^{k}],^{k},^{j}) };\n';
               return RV(setup+test+iterate,w); 
            },
          function(start, x) {return x},
          function(start, stop, step, out, block, n) {return n},
          function(start, stop, step, out, block, none) { // test 'count to*'
               if (!stop) stop=0;
               var w={start:start,stop:stop,out:out,block:block,none:none,dest:tempvar(),counter:(out?out[0]:false),step:(step?step:'-1')};
               var setup='var ^{counter}=^{start},^{dest}=^{stop};\n ';
               var alternate=none ? 'if (^{counter}<=^{dest}) { ^{none} } else ' : '';
               var iterate='for (^{counter}+=^{step}; ^{counter}>=^{dest}; ^{counter}+=^{step}) { ^{block} }\n';
               return RV(setup+alternate+iterate,w); 
            },
          function(x) { return x },
          function(start, stop, step, out, block, none) { // test 'count to*'
               if (!start) start=0;
               var w={start:start,stop:stop,out:out,block:block,none:none,dest:tempvar(),counter:(out?out[0]:false),step:(step?step:'1')};
               var setup='var ^{counter}=^{start},^{dest}=^{stop};\n ';
               var alternate=none ? 'if (^{counter}>=^{dest}) { ^{none} } else ' : '';
               var iterate='for (; ^{counter}<^{dest}; ^{counter}+=^{step}) { ^{block} }\n';
               return RV(setup+alternate+iterate,w); 
            },
          function(v, o, b) {
              return RV('var ^{this}; while (^{this}=( ^{v})) { ^{block} }\n',{v:v,block:b,this:(o?o[0]:false)});
            },
          function(v, b) {
              return 'while (!('+v+')) { '+b+' }\n';
            },
          function(v, b) {
              return 'do { '+b+' } while ('+v+');\n';
            },
          function(v, b) {
              return 'do { '+b+' } while (!('+v+'));\n';
            },
          function(v, a) { return [v].concat(a) },
          function(v) {
              var j=v.length;
              if (!j) error("SAI Compiler: Expected something to assign into");
              if (j==1) {
                var pattern=accessors.firststore[v[0][0]];
                if (!pattern) error("SAI Compiler: Couldn't construct recipient from "+v);
                return pattern[0] + v[0][1] + pattern[1];
              }
              j--;
              var code='';
              var patternbase=accessors.firstfetch;
              var i=0; while (i<j) {
                var pattern=patternbase[v[i][0]]; patternbase=accessors.nextfetch;
                if (!pattern) error("SAI Compiler: Couldn't construct recipient from "+v);
                code+=pattern[0] + v[i][1] + pattern[1];
                i++;
              }
              var pattern=accessors.laststore[v[j][0]];
              if (!pattern) error("SAI Compiler: Couldn't construct recipient from "+v);
              code= code+pattern[0]+v[j][1]+pattern[1];
              return code;
            },
          function(v) { return ValueCompositor(v,false) },
          function(v) { return ValueCompositor(v,true) },
          function(v) {
              var verb='',stem='';
              if (v[0][0]=='local') {
                var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
                var binding=options.globals[test];
                if (binding) {
                  v[0][0]='bound';
                  v[0][1]=binding;
                }
              }
              var patternbase=accessors.firstfetch;
              var i=0; while (i<v.length) {
                var pattern=patternbase[v[i][0]]; 
                patternbase=accessors.nextfetch;
                if (!pattern) error("SAI Compiler: VV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
                stem+=verb;
                verb=pattern[0] + v[i][1] + pattern[1];
          //      console.log("VV"+i+": stem:"+stem+" verb:"+verb);
                i++;
              }
              return [stem,verb];
            },
          function(v) { return [['literal',v]] },
          function() { return [['super','']]; },
          function(x, y) { 
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
            },
          function(x, y) {
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
           },
          function() { return [['it','']] },
          function() { return [['key','']]},
          function() { return [['counter','']]},
          function() { return [['trial','']]},
          function() { return [['sum','']]},
          function() { return [['self','']]},
          function() { return [['error','']]},
          function(v) { return [[ 'attribute', v ]] },
          "'s",
          peg$literalExpectation("'s", false),
          function(p) { 
             return [[ 'function', p?p[1]:'' ]] 
          },
          function(v) { return [[ 'it', ''],[ 'attribute', v ]] },
          function(v) { return [[ 'it', ''],[ 'index', v ]] },
          function() { return [[ 'it', '']] },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(v) { return [[ 'index', v ]] },
          "\\",
          peg$literalExpectation("\\", false),
          function(v) { return [['index',v]] },
          ".",
          peg$literalExpectation(".", false),
          function(v) { return [[ 'paren', v ]] },
          function(v) { 
             //console.log("LLocal "+v);
             if (InstanceVars[v]) {
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v) { 
             //console.log("RLocal "+v);
             if (InstanceVars[v]) {
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) {
               v=checkLocal(lp+v,v);
             } else {
               v=lp+v;
             }
             return [[ 'local',v ]];
          },
          "$$",
          peg$literalExpectation("$$", false),
          function() { return [['arguments','']]},
          "$",
          peg$literalExpectation("$", false),
          function(v) { return [[ 'parameters','' ],['attribute',v]] },
          function() { return [[ 'parameters','' ]]},
          function(v) { return [['literal',v]]},
          "~",
          peg$literalExpectation("~", false),
          function(v) { return [['global',v]] },
          "@",
          peg$literalExpectation("@", false),
          function(v) { return [['this',''],[ 'attribute',v ]] },
          "@@",
          peg$literalExpectation("@@", false),
          function(v) { return [['currentthis',''],[ 'attribute',v ]] },
          function() { return [['currentthis','']] },
          function() { return [['this','']] },
          function(k, v) { 
               addToList('freeze',k);
               addInstanceVar(k);
               return 'prototype["'+k+'"]='+v[1]+';\n';
             },
          function(v) { 
          //    addToList('lock',i);
              addInstanceVars(v);
              var code='';
              code+='var t='+v[1]+';\nfor (var i in t) { prototype.__tobelocked.push(i); prototype[i]=t[i]; };\n'; 
              return code;
            },
          function(v) {
              var ivar=GlobVar();
              addInstanceVars(v);
              var proof='var '+ivar+'=function(){ var $=this; return '+v[1]+'; }\nfor (var i in '+ivar+'()) { prototype[i]=undefined; };\n'; 
              var sup=GlobVar();
              var setup= 'var '+sup+'=prototype.Constructor || function(){};\nprototype.Constructor=function() {\n'+sup+'.call(this);\n  var t='+ivar+'();\n  for (var i in t) if (t[i] !== undefined) this[i]=t[i];\n};\n'; 
              return proof+setup;
            },
          function(maj, min, patch) {
             return "'"+maj+"."+min+"."+patch+"'";
           },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields', '{'+w.join(',')+'}',v] },
          function(v) { return ['array',v.join(','),v] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields','{'+w.join(',')+'}',v] },
          function() { return null },
          function(v) { return ['literal',v] },
          function() { return ['literal','[]']; },
          function() { return ['literal','{}']; },
          function(v) { return ['literal','['+v.join(',')+']'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { return v[1] },
          /^[^\n},);|]/,
          peg$classExpectation(["\n", "}", ",", ")", ";", "|"], true, false),
          "|",
          peg$literalExpectation("|", false),
          ")",
          peg$literalExpectation(")", false),
          function(v) { return quoted(v.join('').trim()) },
          function(v, t) { return v.concat(t) },
          function(k) { return [[k,true]] },
          function(k, v) { return [[k,v]] },
          function(v, t) { 
             var r=[]; 
             for (var i in v) r=r.concat(v[i]); 
             r=r.concat(t);  
             return r; 
          },
          function(v, t) { var r=[]; for (var i in v) r=r.concat(v[i]); r=r.concat(t); return r; },
          function(v) { return v[0][1] },
          function(o) {
             var v=[];
             for (var i in o) v.push(o[i][0][1]);
             return v;
           },
          function(k) {return k},
          function(k, v) { k.push(v); return k; },
          function(v) {
             CheckScope(v,"parameter/as/given");
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v, c) {return c},
          function(v, c) {
             for (var i in c) {
               v=c[i][0]+v+c[i][1];
             }
             return v;
           },
          function() { // test 'sow *'
               return ['$AI.iterate_op(',')'];
             },
          function() { // test 'keys comp*'
               return ['$AI.keys_op(',')'];
             },
          function() { // test 'values comp*'
               return ['$AI.values_op(',')'];
             },
          function(x) {
             return ['$AI.concat_op(' , ','+x+')' ];
           },
          function() { return ['$AI.collect_op(',')']; },
          function() { return ['$AI.enlist_op(',')']; },
          function() { return ['$AI.entrait_op(',')']; },
          function(o, b) {
              if (!o) o=[lp+'a',lp+'b'];
              var block=RV('function('+o[0]+','+o[1]+'){'+b+'}');
              return ['$AI.sort_op(' , ','+block+')']; 
            },
          function(x) {
             return ['$AI.sort_op(' , ','+x+')' ];
            },
          function(x) { // test 'thru inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'}',{this:'$_v',key:'$_k'});
               return ['$AI.map_op(' , ','+block+' )']; 
            },
          function(o, b) { // test 'thru block'
               var block=RV('function(^{this},^{key}){'+b+'; return ^{this};}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.map_op(' , ','+block+' )']; 
            },
          function(x) { // test 'thru using'
             return ['$AI.map_op(' , ','+x+')' ];
            },
          function(x) { // test 'audit inline *'
               var block=RV('function(^{this},^{key}){ '+x+'; }',{this:'$_v',key:'$_k'});
               return ['$AI.audit_op(' , ','+block+' )']; 
            },
          function(o, b) { // test 'audit block*'
               var block=RV('function(^{this},^{key}){'+b+' }',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.audit_op(' , ','+block+' )']; 
            },
          function(x) { // test 'audit using*'
             return ['$AI.audit_op(' , ','+x+')' ];
            },
          function(into, o, b) {
              if (!o) o=[];
              if (!o[0]) o[0]=lp+'sum'; 
              if (!o[1]) o[1]='$_v';
              if (!o[2]) o[2]='$_k';
              b+='return ^{sum};\n';
              var block=RV('function(^{sum},^{this},^{key}){'+b+'}',{sum:o[0],this:o[1],key:o[2]});
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+block+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+block+','+into+')' ];
              }
            },
          function(into, b) {
              var block=RV('function(^{sum},^{this},^{key}){ return '+b+';}',{sum:lp+'sum',this:'$_v',key:'$_k'});
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+block+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+block+','+into+')' ];
              }
            },
          function(into, x) {
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+x+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+x+','+into+')' ];
              }
            },
          function(x) { // test 'filter inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'; }',{this:'$_v',key:'$_k'});
               //console.log("filter comp exp");
               return ['$AI.filter_op(' , ','+block+' )']; 
            },
          function(o, b) {
               var block=RV('function(^{this},^{key}){'+b+'}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.filter_op(' , ','+block+')']; 
            },
          function(x) {
              return ['$AI.filter_op(' , ','+x+')' ];
            },
          function(x) { // test 'alter inline*'
               var block=RV('function(^{this}){ return '+x+'; }',{this:'$_v'});
               return [ '$AI.alter_op(' , ','+block+')']; 
            },
          function(o, b) { // test 'alter block*'
               var block=RV('function(^{this}){'+b+'; return ^{this}; }',{this:o?o[0]:'$_v'});
               return [ '$AI.alter_op(' , ','+block+')']; 
            },
          function(x) { // test 'alter using'
               return [ '$AI.alter_op(' , ','+x+')']; 
            },
          function(x) { // test 'observe inline'
               var block=RV('function(^{this}){ '+x+'; }',{this:'$_v'});
               return [ '$AI.observe_op(' , ','+block+')']; 
            },
          function(o, b) { // test 'observe block'
               var block=RV('function(^{this}){'+b+'; }',{this:o?o[0]:'$_v'});
               return [ '$AI.observe_op(' , ','+block+')']; 
            },
          function(x) { // test 'observe using'
               return [ '$AI.observe_op(' , ','+x+')']; 
            },
          function(q) {
             var code='({<>})';
             q=[].concat(q);
             var expr={quality:[],having:[],by:[],map:[],limit:[]};
             for (var i in q) { 
               for (var j=0; j<q[i].length; j+=2) {
                 expr[q[i][j]].push(q[i][j+1]); 
               }
             }
             var conds=[];
             if (expr.quality.length) {
               for (var i in expr.quality) { 
                 conds.push(expr.quality[i]); 
                }
             }
             if (expr.having.length) {
               var conds=conds.concat(expr.having.map(function(c){ return '('+c+')';}));
             }
             if (conds.length) {
               code=RV('$AI.filter_op(^{source},function($_v,$_k){ return ^{block}; })',{source:code,block:conds.join(' && '),this:'$_v',key:'$_k'});
             }
             if (expr.limit.length && expr.limit[0].extract && expr.by.length) { // first/last singleton with a sort
               code='$AI.reduce_op('+code+',function(a,b) { if (undefined===a) return b; var r; ';
               expr.by[0][1]*=expr.limit[0].sort; // flip sort if looking for "last"
               var conds=expr.by.map(function(c){
                 c[0]=c[0]||'^{this}';
                 var x1=RV(c[0],{this:'a'});
                 var x2=RV(c[0],{this:'b'});
                 return RV('r=$AI.compare_op(^{x1},^{x2}); if (r<0) return ^{lt}; if (r>0) return ^{gt};\n',{x1:x1,x2:x2,lt:(c[1]>0?'a':'b'),gt:(c[1]>0?'b':'a')});
               });
               code+=conds.join(' ')+'return a; },undefined)';     
             } else {
               if (expr.by.length) {
                 code='$AI.sort_op('+code+',function(a,b) { var aa,bb; ';
                 var conds=expr.by.map(function(c){
                   c[0]=c[0]||'^{this}';
                   var x1=RV('aa='+c[0]+'; ',{this:'a'});
                   var x2=RV('bb='+c[0]+'; ',{this:'b'});
                   return x1+x2+RV('if (aa<bb) return ^{lt}; if (aa>bb) return ^{gt}; ',{c:c[0],lt:-c[1],gt:c[1]});
                 });
                 code+=conds.join(' ')+'return 0; })';
               }
               if (expr.limit.length) {
                 var l=expr.limit[0];
                 if (l.slice) {
                   code='$AI.slice_op('+code+','+l.start+','+l.len+')';
                 }
                 if (l.extract) { 
                   code='$AI.element_op('+code+',0)';
                 }
                 if (l.count) {
                   code='$AI.count_op('+code+')';
                 }
               }
             } 
             return code.split('{<>}');
           },
          function() { return ['limit',{extract:true,sort:1}]; },
          function() { return ['limit',{extract:true,slice:true,start:-1}]; },
          function(s, c) { return ['limit',{slice:true,start:s,len:c}]; },
          function(s) { return ['limit',{slice:true,start:undefined,len:s}]; },
          function() { return ['limit',{count:true}]; },
          function(v) { return ['quality', '^{this}["'+v+'"]'] },
          function(v) { return ['quality', '(!^{this}["'+v+'"])'] },
          function(v) { return ['having',v] },
          function(d) { return ['by',[null,d?d:1]] },
          function(v, d) { return ['by',[v,d?d:1]] },
          function(v) { return ['by',[v,-1],'limit',{extract:true,sort:1}]},
          function(v) { return ['by',[v,1],'limit',{extract:true,sort:1}]},
          function() { return 1 },
          function() { return -1 },
          function(l, o, r) { return '('+l+o+r+')' },
          function(c, l) { return '($AI.xor_op('+c+','+l+'))' },
          function(l, f) { return '(!('+l+' && '+f+'))' },
          function(l, f) { return '(!('+l+' || '+f+'))' },
          "??",
          peg$literalExpectation("??", false),
          "::",
          peg$literalExpectation("::", false),
          function(c, l, r) { 
               return RV('((^{c})?(^{l}):(^{r}))',{c:c,l:l,r:r}); 
             },
          function() { return '&&' },
          function() { return '||' },
          function(l, o, r) { return o+'('+l+','+r+')' },
          ">=",
          peg$literalExpectation(">=", false),
          function() { return '>=' },
          ">",
          peg$literalExpectation(">", false),
          function() { return '>' },
          "=",
          peg$literalExpectation("=", false),
          function() { return '==' },
          function() { return '!==' },
          function() { return '===' },
          "<=",
          peg$literalExpectation("<=", false),
          function() { return '<=' },
          "<",
          peg$literalExpectation("<", false),
          function() { return '<' },
          "!=",
          peg$literalExpectation("!=", false),
          function() { return '!=' },
          function() { return '$AI.max_op' },
          function() { return '$AI.min_op' },
          "<=>",
          peg$literalExpectation("<=>", false),
          function() { return '$AI.compare_op' },
          function() {return '|' },
          function() {return '&'},
          function() { return '^'},
          function(l, r) { // test '**'
             return 'Math.pow('+l+','+r+')' 
           },
          function(l, op, x) {
             var p=undefined;
             if (x) {
               p=x[1];
             }
             return '('+op+').call($,('+l+'),'+p+')';
           },
          function(l, r) { // test 'overlay *'
             return '$AI.overlay_op('+l+','+r+')' 
           },
          function(l, r) { // test 'select *'
             return '$AI.select_op('+l+','+r+')' 
           },
          function(l, r) { // test 'delete *'
             return '$AI.delete_op($AI.clone_op('+l+'),'+r+')' 
           },
          function(l, r) { 
             return '$AI.expects_op('+l+','+r+')' 
           },
          function(l, r) { 
             return '('+l+').isof['+r+']'; 
           },
          function(l, v) {  // test 'default*'
               SafetyFetch=true; 
               return RV('((undefined!==($_b=^{l}))?$_b:^{v})',{l:l,v:v}); 
             },
          function(v) { return '(0-('+v+'))' },
          function(v) { return '(~('+v+'))' },
          function(v) { return '(!('+v+'))' },
          function(v) { return 'typeof ('+v+')'; },
          function(v) { return 'isNaN('+v+')'; },
          function(v) { return '($AI.number_op('+v+'))'; },
          function(v) { return '(undefined!=='+v+')' },
          function(v) { return '$AI.clone_op('+v+')'; },
          function(v) { return  'function(){return ('+v+').apply($,arguments);}'; },
          function(v) { return 'yield *'+v; },
          function(v) { return 'yield'+v; },
          function(o) { return o },
          "(",
          peg$literalExpectation("(", false),
          function(v, o) { 
             if (o) {
               addLocal(o);
               return RV('(^{out}='+v+')',{out:o}); 
             } else {
               return '('+v+')'; 
             }
            },
          /^[igm]/,
          peg$classExpectation(["i", "g", "m"], false, false),
          function(x, m) {
             var re= '/'+x.join('')+'/'+m.join('');
             return re;
           },
          "\\/",
          peg$literalExpectation("\\/", false),
          /^[^\n\r\/]/,
          peg$classExpectation(["\n", "\r", "/"], true, false),
          /^[.([|]/,
          peg$classExpectation([".", "(", "[", "|"], false, false),
          function(v) { return v; },
          /^[a-zA-Z_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
          /^[a-zA-Z_0-9]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false),
          function(v1, v2) { return v1+v2.join('') },
          function() { return 'NaN' },
          function() { return 'Infinity' },
          function() { return 'it' },
          function(v) {
             return AssembleVerb(v);
           },
          "'d",
          peg$literalExpectation("'d", false),
          function(v, b, o) {
            return AssembleVerb([{ base:b, verb:'.'+v, param:(o?o[1]:'')}]);
          },
          function(v, o) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$'+(o?(','+o[1]):'') }]; 
               return [{ base:v[0], verb:v[1], param:(o?o[1]:'') }]
            },
          function(v) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$' }]; 
               return [{ base:v[0], verb:v[1], param:'' }]
             },
          function(v, c) {
             c[0].base=v;
             return AssembleVerb(c);
           },
          function(l) { 
               return l ;
             },
          function(c) {
               return {left:c[0], right: c[1]}
            },
          function(i, o) {
               return {verb:'.'+i, param:(o?o[1]:''), test:true}; 
            },
          function(v, o) { 
             return '$AI.create_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) { 
             return '$AI.singleton_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) {
             return 'new '+v+'('+(o?o[1]:'')+')'; 
           },
          /^[a-zA-Z0-9_\/]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "/"], false, false),
          function(n) { return n.join('') },
          "o",
          peg$literalExpectation("o", false),
          function(v) { return v*(Math.PI/180) },
          "0b",
          peg$literalExpectation("0b", false),
          /^[0-1]/,
          peg$classExpectation([["0", "1"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*2+Number(v[i++]));
             return r.toString();
           },
          "0o",
          peg$literalExpectation("0o", false),
          /^[0-7]/,
          peg$classExpectation([["0", "7"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*8+Number(v[i++]));
             return r.toString();
           },
          "0x",
          peg$literalExpectation("0x", false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*16+v[i++]);
             return r;
           },
          "0",
          peg$literalExpectation("0", false),
          function() { return 0; },
          "1",
          peg$literalExpectation("1", false),
          function() { return 1; },
          "2",
          peg$literalExpectation("2", false),
          function() { return 2; },
          "3",
          peg$literalExpectation("3", false),
          function() { return 3; },
          "4",
          peg$literalExpectation("4", false),
          function() { return 4; },
          "5",
          peg$literalExpectation("5", false),
          function() { return 5; },
          "6",
          peg$literalExpectation("6", false),
          function() { return 6; },
          "7",
          peg$literalExpectation("7", false),
          function() { return 7; },
          "8",
          peg$literalExpectation("8", false),
          function() { return 8; },
          "9",
          peg$literalExpectation("9", false),
          function() { return 9; },
          "a",
          peg$literalExpectation("a", false),
          "A",
          peg$literalExpectation("A", false),
          function() { return 10; },
          "b",
          peg$literalExpectation("b", false),
          "B",
          peg$literalExpectation("B", false),
          function() { return 11; },
          "c",
          peg$literalExpectation("c", false),
          "C",
          peg$literalExpectation("C", false),
          function() { return 12; },
          "d",
          peg$literalExpectation("d", false),
          "D",
          peg$literalExpectation("D", false),
          function() { return 13; },
          "e",
          peg$literalExpectation("e", false),
          "E",
          peg$literalExpectation("E", false),
          function() { return 14; },
          "f",
          peg$literalExpectation("f", false),
          "F",
          peg$literalExpectation("F", false),
          function() { return 15; },
          function(r, x) { return r+'e'+x },
          function(w, f) { return Number(w+'.'+f) },
          function(v) { return -v },
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          function(v) { return parseInt(v.join('')) },
          "'",
          peg$literalExpectation("'", false),
          function(v) { return assembleLiteral(v) },
          "\"",
          peg$literalExpectation("\"", false),
          "`",
          peg$literalExpectation("`", false),
          /^[^'\n]/,
          peg$classExpectation(["'", "\n"], true, false),
          function(v) { return [true,v] },
          /^[^"\n]/,
          peg$classExpectation(["\"", "\n"], true, false),
          "'''",
          peg$literalExpectation("'''", false),
          function(v) { return v},
          function(v) { return v.join("+'\\n'+") },
          /^[^\n}]/,
          peg$classExpectation(["\n", "}"], true, false),
          function() { return [true,'\\'+"'"] },
          function() { return [true,'\\'+'"'] },
          function() { return [true,'\\'+'$'] },
          "&#123;",
          peg$literalExpectation("&#123;", false),
          function() { return [true,'\\'+'&#123;'] },
          "&#125;",
          peg$literalExpectation("&#125;", false),
          function() { return [true,'\\'+'&#125;'] },
          "n",
          peg$literalExpectation("n", false),
          function() { return [true,'\\'+'n'] },
          "r",
          peg$literalExpectation("r", false),
          function() { return [true,'\\'+'r'] },
          "t",
          peg$literalExpectation("t", false),
          function() { return [true,'\\'+'t'] },
          function() { return [true,'\\'+'b'] },
          function() { return [true,'\\'+'f'] },
          "x",
          peg$literalExpectation("x", false),
          /^[0-9a-fA-F]/,
          peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
          function(a, b) { return [true,'\\'+'x'+a+b ] },
          "u",
          peg$literalExpectation("u", false),
          function(a, b, c, d) { return [true,'\\'+'u'+a+b+c+d] },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function(a) { return [true,'\\'+'u{'+a.join('')+'}' ] },
          "${",
          peg$literalExpectation("${", false),
          function(v) { return [false,v] },
          /^[^a-zA-Z0-9_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], true, false),
          "...",
          peg$literalExpectation("...", false),
          /^[ ]/,
          peg$classExpectation([" "], false, false),
          "//",
          peg$literalExpectation("//", false),
          /^[^\r\n]/,
          peg$classExpectation(["\r", "\n"], true, false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "__source",
          peg$literalExpectation("__source", false),
          "__offset",
          peg$literalExpectation("__offset", false),
          "__column",
          peg$literalExpectation("__column", false),
          "__line",
          peg$literalExpectation("__line", false),
          "and",
          peg$literalExpectation("and", false),
          "andb",
          peg$literalExpectation("andb", false),
          "arguments",
          peg$literalExpectation("arguments", false),
          "array",
          peg$literalExpectation("array", false),
          "as",
          peg$literalExpectation("as", false),
          "asc",
          peg$literalExpectation("asc", false),
          "audit",
          peg$literalExpectation("audit", false),
          "bind",
          peg$literalExpectation("bind", false),
          "blank",
          peg$literalExpectation("blank", false),
          "break",
          peg$literalExpectation("break", false),
          "by",
          peg$literalExpectation("by", false),
          "case",
          peg$literalExpectation("case", false),
          "catch",
          peg$literalExpectation("catch", false),
          "chain",
          peg$literalExpectation("chain", false),
          "collect",
          peg$literalExpectation("collect", false),
          "copy",
          peg$literalExpectation("copy", false),
          "concat",
          peg$literalExpectation("concat", false),
          "continue",
          peg$literalExpectation("continue", false),
          "contract",
          peg$literalExpectation("contract", false),
          "count",
          peg$literalExpectation("count", false),
          "counter",
          peg$literalExpectation("counter", false),
          "create",
          peg$literalExpectation("create", false),
          "dec",
          peg$literalExpectation("dec", false),
          "default",
          peg$literalExpectation("default", false),
          "delete",
          peg$literalExpectation("delete", false),
          "desc",
          peg$literalExpectation("desc", false),
          "do",
          peg$literalExpectation("do", false),
          "down",
          peg$literalExpectation("down", false),
          "each",
          peg$literalExpectation("each", false),
          "else",
          peg$literalExpectation("else", false),
          "empty",
          peg$literalExpectation("empty", false),
          "enum",
          peg$literalExpectation("enum", false),
          "enlist",
          peg$literalExpectation("enlist", false),
          "entrait",
          peg$literalExpectation("entrait", false),
          "error",
          peg$literalExpectation("error", false),
          "every",
          peg$literalExpectation("every", false),
          "exists",
          peg$literalExpectation("exists", false),
          "expects",
          peg$literalExpectation("expects", false),
          "finally",
          peg$literalExpectation("finally", false),
          "fields",
          peg$literalExpectation("fields", false),
          "first",
          peg$literalExpectation("first", false),
          "from",
          peg$literalExpectation("from", false),
          "get",
          peg$literalExpectation("get", false),
          "given",
          peg$literalExpectation("given", false),
          "has",
          peg$literalExpectation("has", false),
          "highest",
          peg$literalExpectation("highest", false),
          "if",
          peg$literalExpectation("if", false),
          "Infinity",
          peg$literalExpectation("Infinity", false),
          "instance",
          peg$literalExpectation("instance", false),
          "into",
          peg$literalExpectation("into", false),
          "inc",
          peg$literalExpectation("inc", false),
          "inherit",
          peg$literalExpectation("inherit", false),
          "isnt",
          peg$literalExpectation("isnt", false),
          "isNaN",
          peg$literalExpectation("isNaN", false),
          "is",
          peg$literalExpectation("is", false),
          "isof",
          peg$literalExpectation("isof", false),
          "iterate",
          peg$literalExpectation("iterate", false),
          "Iterator",
          peg$literalExpectation("Iterator", false),
          "it",
          peg$literalExpectation("it", false),
          "keys",
          peg$literalExpectation("keys", false),
          "key",
          peg$literalExpectation("key", false),
          "last",
          peg$literalExpectation("last", false),
          "limit",
          peg$literalExpectation("limit", false),
          "list",
          peg$literalExpectation("list", false),
          "local",
          peg$literalExpectation("local", false),
          "lowest",
          peg$literalExpectation("lowest", false),
          "me",
          peg$literalExpectation("me", false),
          "my",
          peg$literalExpectation("my", false),
          "main",
          peg$literalExpectation("main", false),
          "NaN",
          peg$literalExpectation("NaN", false),
          "nand",
          peg$literalExpectation("nand", false),
          "new",
          peg$literalExpectation("new", false),
          "nop",
          peg$literalExpectation("nop", false),
          "nor",
          peg$literalExpectation("nor", false),
          "not",
          peg$literalExpectation("not", false),
          "notb",
          peg$literalExpectation("notb", false),
          "number",
          peg$literalExpectation("number", false),
          "null",
          peg$literalExpectation("null", false),
          "object",
          peg$literalExpectation("object", false),
          "observe",
          peg$literalExpectation("observe", false),
          "orphan",
          peg$literalExpectation("orphan", false),
          "or",
          peg$literalExpectation("or", false),
          "orb",
          peg$literalExpectation("orb", false),
          "true",
          peg$literalExpectation("true", false),
          "false",
          peg$literalExpectation("false", false),
          "ply",
          peg$literalExpectation("ply", false),
          "promise",
          peg$literalExpectation("promise", false),
          "process",
          peg$literalExpectation("process", false),
          "resolve",
          peg$literalExpectation("resolve", false),
          "reject",
          peg$literalExpectation("reject", false),
          "reference",
          peg$literalExpectation("reference", false),
          "return",
          peg$literalExpectation("return", false),
          "select",
          peg$literalExpectation("select", false),
          "self",
          peg$literalExpectation("self", false),
          "set",
          peg$literalExpectation("set", false),
          "singleton",
          peg$literalExpectation("singleton", false),
          "step",
          peg$literalExpectation("step", false),
          "sum",
          peg$literalExpectation("sum", false),
          "swap",
          peg$literalExpectation("swap", false),
          "super",
          peg$literalExpectation("super", false),
          "switch",
          peg$literalExpectation("switch", false),
          "task",
          peg$literalExpectation("task", false),
          "throw",
          peg$literalExpectation("throw", false),
          "thru",
          peg$literalExpectation("thru", false),
          "traits",
          peg$literalExpectation("traits", false),
          "trial",
          peg$literalExpectation("trial", false),
          "try",
          peg$literalExpectation("try", false),
          "to",
          peg$literalExpectation("to", false),
          "typeof",
          peg$literalExpectation("typeof", false),
          "unless",
          peg$literalExpectation("unless", false),
          "until",
          peg$literalExpectation("until", false),
          "unbound",
          peg$literalExpectation("unbound", false),
          "undefined",
          peg$literalExpectation("undefined", false),
          "update",
          peg$literalExpectation("update", false),
          "using",
          peg$literalExpectation("using", false),
          "values",
          peg$literalExpectation("values", false),
          "via",
          peg$literalExpectation("via", false),
          "while",
          peg$literalExpectation("while", false),
          "with",
          peg$literalExpectation("with", false),
          "xor",
          peg$literalExpectation("xor", false),
          "xorb",
          peg$literalExpectation("xorb", false),
          "yielding",
          peg$literalExpectation("yielding", false),
          "yield",
          peg$literalExpectation("yield", false),
          "!",
          peg$literalExpectation("!", false),
          "#",
          peg$literalExpectation("#", false),
          ":",
          peg$literalExpectation(":", false),
          function() { return ':' }
        ],

        peg$bytecode = [
          peg$decode("%;\xEB/M#;\".\" &\"/?$$;#/&#0#*;#&&&#/)$8#: #\"! )(#'#(\"'#&'#"),
          peg$decode("%;\x9A/1#;\xEC/($8\":!\"!!)(\"'#&'#"),
          peg$decode("%;\u0151/C#;\xE9/:$;}/1$;\xEC/($8$:\"$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0145/\xA4#;\xE9/\x9B$;\xC5/\x92$;\xE9/\x89$;\u013B.# &;\u0156.\" &\"/u$;\xE9/l$;|.\" &\"/^$;\xE9/U$;\xEC/L$$;$0#*;$&/<$$;%0#*;%&/,$8+:#+%(&$! )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;&./ &;'.) &;(.# &;{/' 8!:$!! ).# &;\xEC"),
          peg$decode("%;*/' 8!:$!! ).# &;\xEC"),
          peg$decode("%;\u012A/C#;\xE9/:$;\x81/1$;\xEC/($8$:%$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0109/C#;\xE9/:$;\x81/1$;\xEC/($8$:&$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC5/A#;)/8$;).\" &\"/*$8#:'##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\xE9/k#;\u0121.# &;\u0155/\\$;\xE9/S$;\x98.\" &\"/E$;\xE9/<$;2/3$;\xEC/*$8':('#%#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;+/;#;2/2$;\xEC/)$8#:)#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;\xC5/\xA2#;\xE9/\x99$;\u0162.\" &\"/\x8B$;\xE9/\x82$;\u0166.\" &\"/t$;\xE9/k$;\u015C/b$;\xE9/Y$;1.\" &\"/K$;\xE9/B$;\x98.\" &\"/4$;\xE9/+$8,:*,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u013B &%;,/\xA2#;\xE9/\x99$;\u0162.\" &\"/\x8B$;\xE9/\x82$;\u0166.\" &\"/t$;\xE9/k$;\u014E/b$;\xE9/Y$;1.\" &\"/K$;\xE9/B$;\x98.\" &\"/4$;\xE9/+$8,:+,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAC &%;\xC5/\xA2#;\xE9/\x99$;\u0162.\" &\"/\x8B$;\xE9/\x82$;\u0166.\" &\"/t$;\xE9/k$;\u014D/b$;\xE9/Y$;1.\" &\"/K$;\xE9/B$;\x98.\" &\"/4$;\xE9/+$8,:,,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0130/' 8!:-!! )./ &%;\xC5/' 8!:.!! )"),
          peg$decode("%;1.\" &\"/S#;\xE9/J$;\x98.\" &\"/<$;\xE9/3$;2/*$8%:/%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xE9/g$;\x98.\" &\"/Y$;\xE9/P$20\"\"6071.\" &\"/<$;\xE9/3$;\x9A/*$8':2'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;1.\" &\"/S#;\xE9/J$;\x98.\" &\"/<$;\xE9/3$;2/*$8%:3%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xE9/g$;\x98.\" &\"/Y$;\xE9/P$20\"\"6071.\" &\"/<$;\xE9/3$;\x9A/*$8':3'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;1.\" &\"/S#;\xE9/J$;\x98.\" &\"/<$;\xE9/3$;2/*$8%:4%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;v/I#;\xE9/@$;\x82.\" &\"/2$;\xE9/)$8$:5$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u011C/\x8D#;\xE9/\x84$$%;0/:#;\u0176/1$;\xE9/($8#:6#!\")(#'#(\"'#&'#0D*%;0/:#;\u0176/1$;\xE9/($8#:6#!\")(#'#(\"'#&'#&/2$;0/)$8$:7$\"! )($'#(#'#(\"'#&'#.M &%;\u011C/C#;\xE9/:$;\x82/1$;\xE9/($8$:8$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE9/j#;\xEC/a$;\u0178/X$;\xEC/O$;3/F$;\u0179/=$%<;\xEC=/##&'!&&#/($8':$'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.h &%;\xE9/^#29\"\"697:/O$;\xE9/F$;5/=$%<;\xEC=/##&'!&&#/($8%:;%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;4/&#0#*;4&&&#/' 8!:<!! )"),
          peg$decode("%;5/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode(";@.Y &;G.S &;T.M &;W.G &;E.A &;7.; &;<.5 &;;./ &;F.) &;6.# &;S"),
          peg$decode("%;\u0100/0#;\xE9/'$8\":=\" )(\"'#&'#.t &%;\u0108/0#;\xE9/'$8\":>\" )(\"'#&'#.W &%;\u0147/0#;\xE9/'$8\":?\" )(\"'#&'#.: &%;\u013F/0#;\xE9/'$8\":@\" )(\"'#&'#"),
          peg$decode("%;8/\xD0#;\x96.\" &\"/\xC2$;\xEC/\xB9$;\u0178/\xB0$$%;\xEC/3#;9/*$8\":A\"#'& )(\"'#&'#/@#0=*%;\xEC/3#;9/*$8\":A\"#'& )(\"'#&'#&&&#/f$%;\xEC/4#;:/+$8\":B\"$'&# )(\"'#&'#.\" &\"/=$;\xEC/4$;\u0179/+$8(:C($'&#\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015B/:#;\xE8/1$;\x9A/($8#:D#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0102/M#;\xE8/D$;\x89/;$;\xE9/2$;2/)$8%:E%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u010E/:#;\xE8/1$;2/($8#:F#! )(#'#(\"'#&'#"),
          peg$decode("%;\u015D/:#;\xE9/1$;\x9A/($8#:G#! )(#'#(\"'#&'#"),
          peg$decode("%;=/y#%;\xEC/2#;>/)$8\":H\"\"# )(\"'#&'#.\" &\"/R$%;\xEC/3#;?/*$8\":I\"#$# )(\"'#&'#.\" &\"/*$8#:J##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\u0161/:#;\xE9/1$;2/($8#:K#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0103/R#;\xE9/I$;\x96.\" &\"/;$;\xE9/2$;2/)$8%:L%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u011D/:#;\xE9/1$;2/($8#:M#! )(#'#(\"'#&'#"),
          peg$decode("%;A/\x94#$%;\xEC/2#;B/)$8\":N\"\"$ )(\"'#&'#0<*%;\xEC/2#;B/)$8\":N\"\"$ )(\"'#&'#&/R$%;\xEC/3#;C/*$8\":O\"#$# )(\"'#&'#.\" &\"/*$8#:P##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\u011B/S#;\xE9/J$;\x9A/A$;\x96.\" &\"/3$;2/*$8%:Q%#\"! )(%'#($'#(#'#(\"'#&'#.\x8E &%;\u0125/S#;\xE9/J$;\x9A/A$;\x96.\" &\"/3$;2/*$8%:R%#\"! )(%'#($'#(#'#(\"'#&'#.N &%;\u0164/D#;\xE9/;$;\x9A/2$;2/)$8$:S$\"! )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0114/:#;\xE9/1$;A/($8#:T#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0114/:#;\xE9/1$;2/($8#:U#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0137/\xB4#;\xE9/\xAB$$%;t/I#;\xE9/@$2V\"\"6V7W/1$;\xE9/($8$:X$!#)($'#(#'#(\"'#&'#0S*%;t/I#;\xE9/@$2V\"\"6V7W/1$;\xE9/($8$:X$!#)($'#(#'#(\"'#&'#&/;$;t/2$;\xE9/)$8%:Y%\"\"!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u016D/S#;\xE8/J$;\x9A/A$;\x96.\" &\"/3$;2/*$8%:Z%#\"! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0159/M#;\xE8/D$;[/;$;\xE8/2$;[/)$8%:[%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0155/:#;\xE9/1$;H/($8#:\\#! )(#'#(\"'#&'#.\u016A &%;\u0155/^#;\xE8/U$;\xEC/L$;\u0178/C$;\xEC/:$;J/1$;\u0179/($8':]'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u011F &%;\u0137/:#;\xE9/1$;L/($8#:\\#! )(#'#(\"'#&'#.\xF8 &%;\u0137/^#;\xE8/U$;\xEC/L$;\u0178/C$;\xEC/:$;N/1$;\u0179/($8':]'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAD &%;\u0129/C#;\xE9/:$;_/1$;\xE9/($8$:^$!!)($'#(#'#(\"'#&'#.} &%;\u010D/C#;\xE9/:$;_/1$;\xE9/($8$:_$!!)($'#(#'#(\"'#&'#.M &%;\u010F/C#;\xE9/:$;_/1$;\xE9/($8$:`$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;K/\xA4#;\xE9/\x9B$$%2V\"\"6V7W/D#;\xE9/;$;K/2$;\xE9/)$8$:a$\"'!)($'#(#'#(\"'#&'#0T*%2V\"\"6V7W/D#;\xE9/;$;K/2$;\xE9/)$8$:a$\"'!)($'#(#'#(\"'#&'#&/)$8#:b#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;H/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;I/&#0#*;I&&&#/' 8!:c!! )"),
          peg$decode("%;\\/S#;\xE9/J$2d\"\"6d7e/;$;\xE9/2$;\x9A/)$8%:f%\"$ )(%'#($'#(#'#(\"'#&'#.\xF5 &%;\\/N#;\xE9/E$;R/<$;\xE9/3$;\x9A/*$8%:g%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;Y/\x88#;\xE9/\x7F$;\u0162.\" &\".S &%<;\u0120=/##&'!&&#.A &%<;\u0172=/##&'!&&#./ &%<;\u0104=/##&'!&&#/;$;\xE9/2$;\x9A/)$8%:h%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;\\/;#;\xE9/2$;Q/)$8#:i#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;O/\xA4#;\xE9/\x9B$$%2V\"\"6V7W/D#;\xE9/;$;O/2$;\xE9/)$8$:a$\"'!)($'#(#'#(\"'#&'#0T*%2V\"\"6V7W/D#;\xE9/;$;O/2$;\xE9/)$8$:a$\"'!)($'#(#'#(\"'#&'#&/)$8#:b#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;L/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;M/&#0#*;M&&&#/' 8!:c!! )"),
          peg$decode("%;\\/N#;\xE9/E$;R/<$;\xE9/3$;\x9A/*$8%:j%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;Y/\x88#;\xE9/\x7F$;\u0162.\" &\".S &%<;\u0120=/##&'!&&#.A &%<;\u0172=/##&'!&&#./ &%<;\u0104=/##&'!&&#/;$;\xE9/2$;\x9A/)$8%:k%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;\\/;#;\xE9/2$;Q/)$8#:l#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\u0137/0#;\xE8/'$8\":m\" )(\"'#&'#"),
          peg$decode("2d\"\"6d7e./ &;\u010F.) &;\u0142.# &;\u0141"),
          peg$decode("2n\"\"6n7o.\xE9 &2d\"\"6d7e.\xDD &2p\"\"6p7q.\xD1 &2r\"\"6r7s.\xC5 &2t\"\"6t7u.\xB9 &2v\"\"6v7w.\xAD &2x\"\"6x7y.\xA1 &2z\"\"6z7{.\x95 &2|\"\"6|7}.\x89 &;\xF8.\x83 &;\u0149.} &;\u016F.w &;\xF7.q &;\u0148.k &;\u016E.e &;\u013D._ &;\u0140.Y &2~\"\"6~7\x7F.M &2\x80\"\"6\x807\x81.A &;\u0168.; &;\u010F.5 &;\u010E./ &2\x82\"\"6\x827\x83.# &;\u0107"),
          peg$decode("%;\xCA/' 8!:\x84!! ).A &%;\xC9/' 8!:\x85!! )./ &%;\xCC/' 8!:\x86!! )"),
          peg$decode("%;\u0152/N#%;\xE8/1#;\x9A/($8\":\x87\"! )(\"'#&'#.\" &\"/($8\":\x88\"! )(\"'#&'#.\x98 &%;U/@#;\xE8/7$;\x9A.\" &\"/)$8#:\x89#\"\" )(#'#(\"'#&'#.k &%;\u0170/:#;\xE8/1$;\x9A/($8#:\x8A#! )(#'#(\"'#&'#.D &%;\u0171/:#;\xE8/1$;\x9A/($8#:\x8B#! )(#'#(\"'#&'#"),
          peg$decode("%;\u014F/& 8!:\x8C! ).. &%;\u0150/& 8!:\x8D! )"),
          peg$decode("%;\u0114/:#;\xE8/1$;2/($8#:\x8E#! )(#'#(\"'#&'#"),
          peg$decode("%;\u011A/}#;\xE8/t$;\x9A/k$;\x97.\" &\"/]$;2/T$%;\xEC/4#;V/+$8\":\x8F\"$%$# )(\"'#&'#.\" &\"/+$8&:\x90&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u0598 &%;\u011A/\x88#;\xE8/\x7F$;\x9A/v$;\xE9/m$;\u0169/d$;\xE8/[$;\xC0/R$%;\xEC/3#;V/*$8\":\x91\"#'# )(\"'#&'#.\" &\"/*$8(:\x92(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0523 &%;\u012F/}#;\xE8/t$;\x9A/k$;\x97.\" &\"/]$;2/T$%;\xEC/4#;V/+$8\":\x8F\"$%$# )(\"'#&'#.\" &\"/+$8&:\x93&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u04B9 &%;\u012F/\x88#;\xE8/\x7F$;\x9A/v$;\xE9/m$;\u0169/d$;\xE8/[$;\xC0/R$%;\xEC/3#;V/*$8\":\x91\"#'# )(\"'#&'#.\" &\"/*$8(:\x94(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0444 &%;\u0113/}#;\xE8/t$;\x9A/k$;\x97.\" &\"/]$;2/T$%;\xEC/4#;V/+$8\":\x8F\"$%$# )(\"'#&'#.\" &\"/+$8&:\x95&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u03DA &%;\u0113/\x88#;\xE8/\x7F$;\x9A/v$;\xE9/m$;\u0169/d$;\xE8/[$;\xC0/R$%;\xEC/3#;V/*$8\":\x96\"#'# )(\"'#&'#.\" &\"/*$8(:\x97(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0365 &%;\u014C/}#;\xE8/t$;\x9A/k$;\x97.\" &\"/]$;2/T$%;\xEC/4#;V/+$8\":\x8F\"$%$# )(\"'#&'#.\" &\"/+$8&:\x98&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u02FB &%;\u014C/\x88#;\xE8/\x7F$;\x9A/v$;\xE9/m$;\u0169/d$;\xE8/[$;\xC0/R$%;\xEC/3#;V/*$8\":\x96\"#'# )(\"'#&'#.\" &\"/*$8(:\x99(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0286 &%;\u010A/\xD1#;\xE8/\xC8$;\u0112/\xBF$;\xE8/\xB6$;\x9A/\xAD$%;\u0162/;#;\xE8/2$;\x9A/)$8#:\x9A#\"$ )(#'#(\"'#&'#.\" &\"/}$;X.\" &\"/o$;\x97.\" &\"/a$;2/X$%;\xEC/6#;V/-$8\":\x9B\"&'&%$# )(\"'#&'#.\" &\"/-$8*:\x9C*&%$#\"! )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01C8 &%;\u010A/\xC7#;\xE8/\xBE$%;\x9A/C#;\xE9/:$;\u0162/1$;\xE8/($8$:\x9D$!#)($'#(#'#(\"'#&'#.\" &\"/\x86$;\x9A/}$;X.\" &\"/o$;\x97.\" &\"/a$;2/X$%;\xEC/6#;V/-$8\":\x9B\"&'&%$# )(\"'#&'#.\" &\"/-$8(:\x9E(&%$#\"! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0114 &%;\u016C/S#;\xE8/J$;\x9A/A$;\x97.\" &\"/3$;2/*$8%:\x9F%#\"! )(%'#($'#(#'#(\"'#&'#.\xD4 &%;\u0165/D#;\xE8/;$;\x9A/2$;2/)$8$:\xA0$\"! )($'#(#'#(\"'#&'#.\xA3 &%;\u0111/V#;\xE8/M$;\u016C/D$;\xE8/;$;\x9A/2$;2/)$8&:\xA1&\"! )(&'#(%'#($'#(#'#(\"'#&'#.` &%;\u0111/V#;\xE8/M$;\u0165/D$;\xE8/;$;\x9A/2$;2/)$8&:\xA2&\"! )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0157/C#;\xE8/:$;\x9A/1$;\xE9/($8$:$$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;[/B#$;Z0#*;Z&/2$;\xE9/)$8#:\xA3#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%2V\"\"6V7W/:#;\xE9/1$;[/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;b/' 8!:\xA4!! )"),
          peg$decode("%;_/9#$;]0#*;]&/)$8\":\xA3\"\"! )(\"'#&'#"),
          peg$decode("%2V\"\"6V7W/:#;\xE9/1$;_/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;z/' 8!:\xA5!! )"),
          peg$decode("%;c/' 8!:\xA5!! )"),
          peg$decode("%;c/' 8!:\xA6!! )"),
          peg$decode("%;d/' 8!:\xA7!! )"),
          peg$decode(";l.G &;e.A &;g.; &;f.5 &;k./ &;i.) &;h.# &;m"),
          peg$decode(";l.G &;e.A &;g.; &;f.5 &;k./ &;j.) &;h.# &;m"),
          peg$decode(";c.\xAD &%;\u015C/C#;\xE8/:$;-/1$;\xE9/($8$:\xA8$!!)($'#(#'#(\"'#&'#.} &%;\u014E/C#;\xE8/:$;./1$;\xE9/($8$:\xA8$!!)($'#(#'#(\"'#&'#.M &%;\u014D/C#;\xE8/:$;//1$;\xE9/($8$:\xA8$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015A/0#;\xE9/'$8\":\xA9\" )(\"'#&'#"),
          peg$decode("%;y/Q#$;o.) &;r.# &;p0/*;o.) &;r.# &;p&/)$8\":\xAA\"\"! )(\"'#&'#"),
          peg$decode("%;q/Q#$;o.) &;r.# &;p0/*;o.) &;r.# &;p&/)$8\":\xAA\"\"! )(\"'#&'#"),
          peg$decode("%;x/Q#$;o.) &;r.# &;p0/*;o.) &;r.# &;p&/)$8\":\xAA\"\"! )(\"'#&'#"),
          peg$decode("%;t/Q#$;o.) &;r.# &;p0/*;o.) &;r.# &;p&/)$8\":\xAA\"\"! )(\"'#&'#"),
          peg$decode("%;u/Q#$;o.) &;r.# &;p0/*;o.) &;r.# &;p&/)$8\":\xAA\"\"! )(\"'#&'#"),
          peg$decode("%;v/Q#$;o.) &;r.# &;p0/*;o.) &;r.# &;p&/)$8\":\xAB\"\"! )(\"'#&'#"),
          peg$decode("%;n/Q#$;o.) &;r.# &;p0/*;o.) &;r.# &;p&/)$8\":\xAB\"\"! )(\"'#&'#"),
          peg$decode("%;s.# &;w/Q#$;o.) &;r.# &;p0/*;o.) &;r.# &;p&/)$8\":\xAB\"\"! )(\"'#&'#"),
          peg$decode("%;\u0131/0#;\xE8/'$8\":\xAC\" )(\"'#&'#.\xCB &%;\u0133/0#;\xE8/'$8\":\xAD\" )(\"'#&'#.\xAE &%;\u010B/0#;\xE8/'$8\":\xAE\" )(\"'#&'#.\x91 &%;\u0160/0#;\xE8/'$8\":\xAF\" )(\"'#&'#.t &%;\u0158/0#;\xE8/'$8\":\xB0\" )(\"'#&'#.W &%;\u0154/0#;\xE8/'$8\":\xB1\" )(\"'#&'#.: &%;\u0119/0#;\xE8/'$8\":\xB2\" )(\"'#&'#"),
          peg$decode("%;\u0173/1#;\xC6/($8\":\xB3\"! )(\"'#&'#.J &%2\xB4\"\"6\xB47\xB5/:#;\xE8/1$;\xC6/($8#:\xB3#! )(#'#(\"'#&'#"),
          peg$decode("%;\u017B/Z#;\xE9/Q$;}.\" &\"/C$;\xE9/:$;\u017C/1$;\xE9/($8&:\xB6&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0173/F#%<;\u0173=.##&&!&'#/1$;\xC6/($8#:\xB7#! )(#'#(\"'#&'#.d &%;\u0173/1#;\xDC/($8\":\xB8\"! )(\"'#&'#.F &%;\u0173/<#%<;\u0173=.##&&!&'#/'$8\":\xB9\" )(\"'#&'#"),
          peg$decode("%2\xBA\"\"6\xBA7\xBB/R#;\xE9/I$;\x9A/@$;\xE9/7$2\xBC\"\"6\xBC7\xBD/($8%:\xBE%!\")(%'#($'#(#'#(\"'#&'#.e &%2\xBF\"\"6\xBF7\xC0/1#;^/($8\":\xC1\"! )(\"'#&'#.A &%2\xC2\"\"6\xC27\xC3/1#;\xDC/($8\":\xBE\"! )(\"'#&'#"),
          peg$decode("%;\u017B/L#;\xE9/C$;\x9A/:$;\xE9/1$;\u017C/($8%:\xC4%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC5/' 8!:\xC5!! )"),
          peg$decode("%;\xC5/' 8!:\xC6!! )"),
          peg$decode("%2\xC7\"\"6\xC77\xC8/& 8!:\xC9! ).u &%;\xF9/0#;\xE9/'$8\":\xC9\" )(\"'#&'#.X &%2\xCA\"\"6\xCA7\xCB/1#;\xC6/($8\":\xCC\"! )(\"'#&'#.4 &%2\xCA\"\"6\xCA7\xCB/& 8!:\xCD! )"),
          peg$decode("%;\xC7/' 8!:\xCE!! )"),
          peg$decode("%2\xCF\"\"6\xCF7\xD0/1#;\xC6/($8\":\xD1\"! )(\"'#&'#"),
          peg$decode("%2\xD2\"\"6\xD27\xD3/1#;\xC6/($8\":\xD4\"! )(\"'#&'#.\xB3 &%;\u013A/:#;\xE8/1$;\xC6/($8#:\xD4#! )(#'#(\"'#&'#.\x8C &%2\xD5\"\"6\xD57\xD6/1#;\xC6/($8\":\xD7\"! )(\"'#&'#.h &%2\xD5\"\"6\xD57\xD6/& 8!:\xD8! ).Q &%2\xD2\"\"6\xD27\xD3/& 8!:\xD9! ).: &%;\u0139/0#;\xE9/'$8\":\xD9\" )(\"'#&'#"),
          peg$decode(";n.Y &;u.S &;v.M &;y.G &;q.A &%;\xD2/' 8!:\xA8!! )./ &%;\xDF/' 8!:\xA8!! )"),
          peg$decode("%;\u0122/V#;\xE9/M$;\xC5/D$;\xE9/;$;~/2$;\xEC/)$8&:\xDA&\"#!)(&'#(%'#($'#(#'#(\"'#&'#.} &%;\u0122/C#;\xE9/:$;\x80/1$;\xEC/($8$:\xDB$!!)($'#(#'#(\"'#&'#.M &%;\u0127/C#;\xE9/:$;\x80/1$;\xEC/($8$:\xDC$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xDC/N#;\u0173/E$;\xDC/<$;\u0173/3$;\xDC/*$8%:\xDD%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0177/^#;\xE9/U$;\xEC/L$;\u0178/C$;\xEC/:$;\x95/1$;\u0179/($8':\xDE'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xD1 &%;\u0177/^#;\xE9/U$;\xEC/L$;\u0178/C$;\xEC/:$;\x8B/1$;\u0179/($8':\xDF'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x86 &%;\x89/<#20\"\"6071.\" &\"/($8\":\xDF\"!!)(\"'#&'#.] &%;\x93/<#20\"\"6071.\" &\"/($8\":\xE0\"!!)(\"'#&'#.4 &%20\"\"6071/& 8!:\xE1! )"),
          peg$decode("%;\xE9/1#;\x9A/($8\":\xE2\"! )(\"'#&'#"),
          peg$decode("%;\xE9/9#;\u0115/0$;\xE9/'$8#:\xE3# )(#'#(\"'#&'#.\u02EB &%;\xE9/9#;\xFF/0$;\xE9/'$8#:\xE4# )(#'#(\"'#&'#.\u02C5 &%;\xE9/c#;\u0136/Z$;\xE9/Q$;\x85/H$;\xE9/?$;\u0175.\" &\"/1$;\xE9/($8':\xE5'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0275 &%;\xE9/g#;\u0136/^$;\xE9/U$;\xEC/L$;\u0178/C$;\xEC/:$;\x87/1$;\u0179/($8(:\xE5(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0221 &%;\xE9/c#;\u015F/Z$;\xE9/Q$;\x8E/H$;\xE9/?$;\u0175.\" &\"/1$;\xE9/($8':\xE6'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01D1 &%;\xE9/g#;\u015F/^$;\xE9/U$;\xEC/L$;\u0178/C$;\xEC/:$;\x90/1$;\u0179/($8(:\xE7(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u017D &%;\xE9/i#;\u0177.# &;\u011E/Z$;\xE9/Q$;\x93/H$;\xE9/?$;\u0175.\" &\"/1$;\xE9/($8':\xE8'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0127 &%;\xE9/m#;\u0177.# &;\u011E/^$;\xE9/U$;\xEC/L$;\u0178/C$;\xEC/:$;\x95/1$;\u0179/($8(:\xE9(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xCD &%;\xE9/i#;\u0177.# &;\xFA/Z$;\xE9/Q$;\x89/H$;\xE9/?$;\u0175.\" &\"/1$;\xE9/($8':\xE5'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xE9/m#;\u0177.# &;\xFA/^$;\xE9/U$;\xEC/L$;\u0178/C$;\xEC/:$;\x8B/1$;\u0179/($8(:\xE5(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE9/i#;\u0177.# &;\u011E/Z$;\xE9/Q$;\x93/H$;\xE9/?$;\u0175.\" &\"/1$;\xE9/($8':\xE8'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xE9/m#;\u0177.# &;\u011E/^$;\xE9/U$;\xEC/L$;\u0178/C$;\xEC/:$;\x95/1$;\u0179/($8(:\xE9(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE9/i#;\u0177.# &;\u0136/Z$;\xE9/Q$;\x85/H$;\xE9/?$;\u0175.\" &\"/1$;\xE9/($8':$'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xE9/m#;\u0177.# &;\u0136/^$;\xE9/U$;\xEC/L$;\u0178/C$;\xEC/:$;\x87/1$;\u0179/($8(:$(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u017A/:#;\xE9/1$;\x9A/($8#:$#! )(#'#(\"'#&'#._ &%;\x7F/' 8!:\xEA!! ).M &;\xE2.G &;\xD2.A &;\u014A.; &;\u014B.5 &;\u0167./ &;\u0144.) &;\xDF.# &;\x83"),
          peg$decode("%$4\xEB\"\"5!7\xEC/,#0)*4\xEB\"\"5!7\xEC&&&#/m#%<2\xED\"\"6\xED7\xEE.G &2V\"\"6V7W.; &2\xEF\"\"6\xEF7\xF0./ &20\"\"6071.# &;\xEC=/##&'!&&#/($8\":\xF1\"!!)(\"'#&'#"),
          peg$decode("%;\x82/C#;\xE9/:$;\u0176/1$;\xE9/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x840#*;\x84&/2#;\x82/)$8\":\xF2\"\"! )(\"'#&'#"),
          peg$decode("%;\x85/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x86/&#0#*;\x86&&&#/' 8!:c!! )"),
          peg$decode("%;\x9A/C#;\xE9/:$;\u0176/1$;\xE9/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x880#*;\x88&/2#;\x9A/)$8\":\xF2\"\"! )(\"'#&'#"),
          peg$decode("%;\x89/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x8A/&#0#*;\x8A&&&#/' 8!:c!! )"),
          peg$decode("%;\u0174/:#;\xC4/1$;\xE9/($8#:\xF3#!!)(#'#(\"'#&'#.N &%;\xC4/D#;\xE8/;$;\x82/2$;\xE9/)$8$:\xF4$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x8C/C#;\xE9/:$;\u0176/1$;\xE9/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x8D0#*;\x8D&/2#;\x8C/)$8\":\xF5\"\"! )(\"'#&'#"),
          peg$decode("%;\x8E/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x8F/&#0#*;\x8F&&&#/' 8!:c!! )"),
          peg$decode("%;\u0174/:#;\xC4/1$;\xE9/($8#:\xF3#!!)(#'#(\"'#&'#.T &%;\xC4/J#;\xE8/A$;\x9A.# &;\u0116/2$;\xE9/)$8$:\xF4$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x91/C#;\xE9/:$;\u0176/1$;\xE9/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x920#*;\x92&/2#;\x91/)$8\":\xF6\"\"! )(\"'#&'#"),
          peg$decode("%;\x93/1#;\xEC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x94/&#0#*;\x94&&&#/' 8!:c!! )"),
          peg$decode("%;\xFB/C#;\xE9/:$;\x99/1$;\xE9/($8$:\xF7$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x98/' 8!:\xF8!! )"),
          peg$decode("%;\xFB.# &;\u0122/\xA8#;\xE9/\x9F$$%;\x99/C#;\xE9/:$;\u0176/1$;\xE9/($8$:\xF9$!#)($'#(#'#(\"'#&'#0M*%;\x99/C#;\xE9/:$;\u0176/1$;\xE9/($8$:\xF9$!#)($'#(#'#(\"'#&'#&/;$;\xE9/2$;u/)$8%:\xFA%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC5/' 8!:\xFB!! )"),
          peg$decode(";\x9B"),
          peg$decode("%;\xB6/t#;\xE9/k$$%;\x9C/2#;\xE9/)$8\":\xFC\"\"%!)(\"'#&'#0<*%;\x9C/2#;\xE9/)$8\":\xFC\"\"%!)(\"'#&'#&/)$8#:\xFD#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\xA4.e &;\xA6._ &;\xA8.Y &;\x9E.S &;\x9F.M &;\x9D.G &;\xA1.A &;\xAC.; &;\xAE.5 &;\xB0./ &;\xAA.) &;\xA2.# &;\xA0"),
          peg$decode("%;\u012F/& 8!:\xFE! )"),
          peg$decode("%;\u0132/& 8!:\xFF! )"),
          peg$decode("%;\u016A/& 8!:\u0100! )"),
          peg$decode("%;\u0107/:#;\xE8/1$;\x9A/($8#:\u0101#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0105/& 8!:\u0102! ).? &%;\u0117/& 8!:\u0103! ).. &%;\u0118/& 8!:\u0104! )"),
          peg$decode("%;\u0101/:#;\xE8/1$;\xA3/($8#:\x9D#! )(#'#(\"'#&'#"),
          peg$decode("%;\x97.\" &\"/2#;2/)$8\":\u0105\"\"! )(\"'#&'#.D &%;\u0169/:#;\xE8/1$;\xC0/($8#:\u0106#! )(#'#(\"'#&'#"),
          peg$decode("%;\u015E/:#;\xE8/1$;\xA5/($8#:\x9D#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9A/' 8!:\u0107!! ).\xAA &%;\u017B/U#;\xE9/L$;\x9A/C$;\xE9/:$;\u017C/1$;\xE9/($8&:\u0107&!#)(&'#(%'#($'#(#'#(\"'#&'#.h &%;\x97.\" &\"/2#;2/)$8\":\u0108\"\"! )(\"'#&'#.D &%;\u0169/:#;\xE8/1$;\xC0/($8#:\u0109#! )(#'#(\"'#&'#"),
          peg$decode("%;\xFD/:#;\xE8/1$;\xA7/($8#:\x9D#! )(#'#(\"'#&'#"),
          peg$decode("%;\u017B/U#;\xE9/L$;\x9A/C$;\xE9/:$;\u017C/1$;\xE9/($8&:\u010A&!#)(&'#(%'#($'#(#'#(\"'#&'#.z &%;\x9A/' 8!:\u010A!! ).h &%;\x97.\" &\"/2#;2/)$8\":\u010B\"\"! )(\"'#&'#.D &%;\u0169/:#;\xE8/1$;\xC0/($8#:\u010C#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0128/:#;\xE8/1$;\xA9/($8#:\x9D#! )(#'#(\"'#&'#"),
          peg$decode("%;\xC8/A#;\x97.\" &\"/3$;2/*$8#:\u010D##\"! )(#'#(\"'#&'#.m &%;\xC8/2#;\x9A/)$8\":\u010E\"\"! )(\"'#&'#.N &%;\xC8/D#;\u0169/;$;\xE8/2$;\xC0/)$8$:\u010F$\"# )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0123/:#;\xE8/1$;\xAB/($8#:\x9D#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9A/' 8!:\u0110!! ).h &%;\x97.\" &\"/2#;2/)$8\":\u0111\"\"! )(\"'#&'#.D &%;\u0169/:#;\xE8/1$;\xC0/($8#:\u0112#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0155/:#;\xE8/1$;\xAD/($8#:\x9D#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9A/' 8!:\u0113!! ).h &%;\x97.\" &\"/2#;2/)$8\":\u0114\"\"! )(\"'#&'#.D &%;\u0169/:#;\xE8/1$;\xC0/($8#:\u0115#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0146/:#;\xE8/1$;\xAF/($8#:\x9D#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9A/' 8!:\u0116!! ).h &%;\x97.\" &\"/2#;2/)$8\":\u0117\"\"! )(\"'#&'#.D &%;\u0169/:#;\xE8/1$;\xC0/($8#:\u0118#! )(#'#(\"'#&'#"),
          peg$decode("%;\xE9/k#$;\xB2./ &;\xB3.) &;\xB4.# &;\xB1/8#05*;\xB2./ &;\xB3.) &;\xB4.# &;\xB1&&&#/1$;\xE9/($8#:\u0119#!!)(#'#(\"'#&'#"),
          peg$decode("%;\u011F/0#;\xE9/'$8\":\u011A\" )(\"'#&'#.\xDC &%;\u0134/0#;\xE9/'$8\":\u011B\" )(\"'#&'#.\xBF &%;\u0135/h#;\xE9/_$;\xB6/V$;\xE9/M$;\u0176/D$;\xE9/;$;\xB6/2$;\xE9/)$8(:\u011C(\"%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.j &%;\u0135/C#;\xE9/:$;\xB6/1$;\xE9/($8$:\u011D$!!)($'#(#'#(\"'#&'#.: &%;\u010A/0#;\xE9/'$8\":\u011E\" )(\"'#&'#"),
          peg$decode("%;\u0174/:#;\xC4/1$;\xE9/($8#:\u011F#!!)(#'#(\"'#&'#.M &%;\u0172/C#;\u0174/:$;\xC4/1$;\xE9/($8$:\u0120$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0123/C#;\xE9/:$;\xB6/1$;\xE9/($8$:\u0121$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0101/C#;\xE9/:$;\xB5/1$;\xE9/($8$:\u0122$!!)($'#(#'#(\"'#&'#.\xBC &%;\u0101/R#;\xE9/I$;\xB6/@$;\xB5.\" &\"/2$;\xE9/)$8%:\u0123%\"\"!)(%'#($'#(#'#(\"'#&'#.} &%;\u0124/C#;\xE9/:$;\xB6/1$;\xE9/($8$:\u0124$!!)($'#(#'#(\"'#&'#.M &%;\u0138/C#;\xE9/:$;\xB6/1$;\xE9/($8$:\u0125$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xFC/0#;\xE9/'$8\":\u0126\" )(\"'#&'#.: &%;\u0110/0#;\xE9/'$8\":\u0127\" )(\"'#&'#"),
          peg$decode("%;\xB8/N#;\xE9/E$;\xB7/<$;\xE9/3$;\xB6/*$8%:\u0128%#$\" )(%'#($'#(#'#(\"'#&'#.\u0154 &%;\xB8/M#;\xE9/D$;\u016E/;$;\xE9/2$;\xB6/)$8%:\u0129%\"$ )(%'#($'#(#'#(\"'#&'#.\u011A &%;\xB8/M#;\xE9/D$;\u013D/;$;\xE9/2$;\xB6/)$8%:\u012A%\"$ )(%'#($'#(#'#(\"'#&'#.\xE0 &%;\xB8/M#;\xE9/D$;\u0140/;$;\xE9/2$;\xB6/)$8%:\u012B%\"$ )(%'#($'#(#'#(\"'#&'#.\xA6 &%;\xB8/~#;\xE9/u$2\u012C\"\"6\u012C7\u012D/f$;\xE9/]$;\xB6/T$;\xE9/K$2\u012E\"\"6\u012E7\u012F/<$;\xE9/3$;\xB6/*$8):\u0130)#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xB8/1#;\xE9/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xF7/0#;\xE8/'$8\":\u0131\" )(\"'#&'#.: &%;\u0148/0#;\xE8/'$8\":\u0132\" )(\"'#&'#"),
          peg$decode("%;\xBB/N#;\xE9/E$;\xBA/<$;\xE9/3$;\xB8/*$8%:\u0133%#$\" )(%'#($'#(#'#(\"'#&'#.v &%;\xBB/N#;\xE9/E$;\xB9/<$;\xE9/3$;\xB8/*$8%:\u0128%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xBB/1#;\xE9/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%2\u0134\"\"6\u01347\u0135/& 8!:\u0136! ).\u0106 &%2\u0137\"\"6\u01377\u0138/B#%<2\u0137\"\"6\u01377\u0138=.##&&!&'#/'$8\":\u0139\" )(\"'#&'#.\xD1 &%2\u013A\"\"6\u013A7\u013B/& 8!:\u013C! ).\xBA &%;\u012B/0#;\xE8/'$8\":\u013D\" )(\"'#&'#.\x9D &%;\u012D/0#;\xE8/'$8\":\u013E\" )(\"'#&'#.\x80 &%2\u013F\"\"6\u013F7\u0140/& 8!:\u0141! ).i &%2\u0142\"\"6\u01427\u0143/B#%<2\u0142\"\"6\u01427\u0143=.##&&!&'#/'$8\":\u0144\" )(\"'#&'#.4 &%2\u0145\"\"6\u01457\u0146/& 8!:\u0147! )"),
          peg$decode("%2~\"\"6~7\x7F/& 8!:\u0148! ).K &%2\x80\"\"6\x807\x81/& 8!:\u0149! ).4 &%2\u014A\"\"6\u014A7\u014B/& 8!:\u014C! )"),
          peg$decode("%;\xBD/N#;\xE9/E$;\xBC/<$;\xE9/3$;\xBB/*$8%:\u0128%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xBD/1#;\xE9/($8\":$\"!!)(\"'#&'#"),
          peg$decode("2n\"\"6n7o.\x80 &2d\"\"6d7e.t &%;\u0149/0#;\xE8/'$8\":\u014D\" )(\"'#&'#.W &%;\xF8/0#;\xE8/'$8\":\u014E\" )(\"'#&'#.: &%;\u016F/0#;\xE8/'$8\":\u014F\" )(\"'#&'#"),
          peg$decode(";\xBE.\u022A &%;\xC0/N#;\xE9/E$;\xBF/<$;\xE9/3$;\xBD/*$8%:\u0128%#$\" )(%'#($'#(#'#(\"'#&'#.\u01EF &%;\xC0/S#;\xE9/J$2p\"\"6p7q/;$;\xE9/2$;\xBD/)$8%:\u0150%\"$ )(%'#($'#(#'#(\"'#&'#.\u01AF &%;\xC0/e#;\xE9/\\$;\u016B/S$;\xE9/J$;\xC0/A$;\xE9/8$;}.\" &\"/*$8':\u0151'#&\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.\u015D &%;\xC0/M#;\xE9/D$;\u0168/;$;\xE8/2$;\xBD/)$8%:\u0152%\"$ )(%'#($'#(#'#(\"'#&'#.\u0123 &%;\xC0/M#;\xE9/D$;\u0153/;$;\xE8/2$;\xBD/)$8%:\u0153%\"$ )(%'#($'#(#'#(\"'#&'#.\xE9 &%;\xC0/M#;\xE9/D$;\u010F/;$;\xE8/2$;\xBD/)$8%:\u0154%\"$ )(%'#($'#(#'#(\"'#&'#.\xAF &%;\xC0/M#;\xE9/D$;\u011C/;$;\xE8/2$;\xBD/)$8%:\u0155%\"$ )(%'#($'#(#'#(\"'#&'#.u &%;\xC0/M#;\xE9/D$;\u012E/;$;\xE8/2$;\xBD/)$8%:\u0156%\"$ )(%'#($'#(#'#(\"'#&'#.; &%;\xC0/1#;\xE9/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xC0/M#;\xE9/D$;\u010E/;$;\xE9/2$;\xBD/)$8%:\u0157%\"$ )(%'#($'#(#'#(\"'#&'#.x &%;\xC0/n#;\xE9/e$2\x82\"\"6\x827\x83/V$%<2\x82\"\"6\x827\x83=.##&&!&'#/;$;\xE9/2$;\xBD/)$8&:\u0157&\"% )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2r\"\"6r7s.Y &2t\"\"6t7u.M &2v\"\"6v7w.A &2|\"\"6|7}.5 &2z\"\"6z7{.) &2x\"\"6x7y"),
          peg$decode("%2d\"\"6d7e/C#;\xE9/:$;\xC0/1$;\xE9/($8$:\u0158$!!)($'#(#'#(\"'#&'#.\u03EB &%;\u0142/C#;\xE8/:$;\xC0/1$;\xE9/($8$:\u0159$!!)($'#(#'#(\"'#&'#.\u03BB &%;\u0141/C#;\xE8/:$;\xC0/1$;\xE9/($8$:\u015A$!!)($'#(#'#(\"'#&'#.\u038B &%;\u0163/C#;\xE8/:$;\xC0/1$;\xE9/($8$:\u015B$!!)($'#(#'#(\"'#&'#.\u035B &%;\u012C/C#;\xE8/:$;\xC0/1$;\xE9/($8$:\u015C$!!)($'#(#'#(\"'#&'#.\u032B &%;\u0143/:#;\xE8/1$;\xC0/($8#:\u015D#! )(#'#(\"'#&'#.\u0304 &%;\u011B/C#;\xE8/:$;\xC0/1$;\xE9/($8$:\u015E$!!)($'#(#'#(\"'#&'#.\u02D4 &%;\u0106/C#;\xE8/:$;\xC0/1$;\xE9/($8$:\u015F$!!)($'#(#'#(\"'#&'#.\u02A4 &%;\u015C/C#;\xE8/:$;-/1$;\xE9/($8$:$$!!)($'#(#'#(\"'#&'#.\u0274 &%;\u014E/C#;\xE8/:$;./1$;\xE9/($8$:$$!!)($'#(#'#(\"'#&'#.\u0244 &%;\u014D/C#;\xE8/:$;//1$;\xE9/($8$:$$!!)($'#(#'#(\"'#&'#.\u0214 &%;\u0172/H#;\xE8.\" &\"/:$;\xC9/1$;\xE9/($8$:$$!!)($'#(#'#(\"'#&'#.\u01DF &%;\u0120/C#;\xE8/:$;\xC9/1$;\xE9/($8$:$$!!)($'#(#'#(\"'#&'#.\u01AF &%;\xFE/C#;\xE8/:$;\xC0/1$;\xE9/($8$:\u0160$!!)($'#(#'#(\"'#&'#.\u017F &;\xCA.\u0179 &%;\u0170/C#;\xE8/:$;\xC0/1$;\xE9/($8$:\u0161$!!)($'#(#'#(\"'#&'#.\u0149 &%;\u0171/C#;\xE8/:$;\xC0/1$;\xE9/($8$:\u0162$!!)($'#(#'#(\"'#&'#.\u0119 &%2\x82\"\"6\x827\x83/:#;`/1$;\xE9/($8#:$#!!)(#'#(\"'#&'#.\xEC &%;_/1#;\xE9/($8\":$\"!!)(\"'#&'#.\xCE &;\xCC.\xC8 &%;\x7F/' 8!:\xEA!! ).\xB6 &%;\xCF/1#;\xE9/($8\":\u0163\"!!)(\"'#&'#.\x98 &%2\u0164\"\"6\u01647\u0165/j#;\xE9/a$;\x9A/X$;\xE9/O$;\x96.\" &\"/A$2\xEF\"\"6\xEF7\xF0/2$;\xE9/)$8':\u0166'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xC1/1#;\xE9/($8\":\x9D\"!!)(\"'#&'#"),
          peg$decode("%2t\"\"6t7u/\x7F#$;\xC2.# &;\xC3/,#0)*;\xC2.# &;\xC3&&&#/]$2t\"\"6t7u/N$$4\u0167\"\"5!7\u01680)*4\u0167\"\"5!7\u0168&/2$;\xE9/)$8%:\u0169%\"#!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2\u016A\"\"6\u016A7\u016B"),
          peg$decode("4\u016C\"\"5!7\u016D"),
          peg$decode("%;\xC5/C#%<4\u016E\"\"5!7\u016F=.##&&!&'#/($8\":$\"!!)(\"'#&'#.# &;\xDF"),
          peg$decode("%%<;\xF1=.##&&!&'#/1#;\xC6/($8\":\u0170\"! )(\"'#&'#"),
          peg$decode("%4\u0171\"\"5!7\u0172/E#$4\u0173\"\"5!7\u01740)*4\u0173\"\"5!7\u0174&/)$8\":\u0175\"\"! )(\"'#&'#"),
          peg$decode(";\xD2.] &;\xDF.W &;\u014A.Q &;\u014B.K &;\u0167.E &;\u0144.? &%;\u013C/& 8!:\u0176! ).. &%;\u0126/& 8!:\u0177! )"),
          peg$decode("%;\u0131/0#;\xE8/'$8\":\u0178\" )(\"'#&'#.# &;\x9A"),
          peg$decode("%;\xCB/' 8!:\u0179!! )"),
          peg$decode("%;\xC5/b#2\u017A\"\"6\u017A7\u017B/S$;\xE9/J$;\xC0/A$;\xE9/8$;}.\" &\"/*$8&:\u017C&#%\" )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;a/@#;\xE9/7$;}.\" &\"/)$8#:\u017D#\"\" )(#'#(\"'#&'#.; &%;a/1#;\xE9/($8\":\u017E\"!!)(\"'#&'#"),
          peg$decode("%;\u0104/M#;\xE9/D$;\x9A/;$;\xE9/2$;\xCD/)$8%:\u017F%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEC/Y#;\u0178/P$;\xEC/G$$;\xCE/&#0#*;\xCE&&&#/1$;\u0179/($8%:\u0180%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9C/:#;\xE9/1$;\xEC/($8#:\u0181#!\")(#'#(\"'#&'#.\\ &%;\xC5/R#;\xE9/I$;}.\" &\"/;$;\xE9/2$;\xEC/)$8%:\u0182%\"$\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u010C/R#;\xE9/I$;\xC0/@$;\xE9/7$;}.\" &\"/)$8%:\u0183%\"\" )(%'#($'#(#'#(\"'#&'#.\x9B &%;\u0156/R#;\xE9/I$;\xC0/@$;\xE9/7$;}.\" &\"/)$8%:\u0184%\"\" )(%'#($'#(#'#(\"'#&'#.\\ &%;\u013E/R#;\xE9/I$;\xC0/@$;\xE9/7$;}.\" &\"/)$8%:\u0185%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%<;\xEC=/##&'!&&#.G &%<;\xF0=/##&'!&&#.5 &%<2\xEF\"\"6\xEF7\xF0=/##&'!&&#"),
          peg$decode("%$4\u0186\"\"5!7\u0187/,#0)*4\u0186\"\"5!7\u0187&&&#/' 8!:\u0188!! )"),
          peg$decode(";\xD5.S &;\xD6.M &;\xD4.G &%;\xD3/7#2\u0189\"\"6\u01897\u018A/($8\":\u018B\"!!)(\"'#&'#.# &;\xD3"),
          peg$decode(";\xD9./ &;\xDA.) &;\xDB.# &;\u013C"),
          peg$decode("%2\u018C\"\"6\u018C7\u018D/J#$4\u018E\"\"5!7\u018F/,#0)*4\u018E\"\"5!7\u018F&&&#/($8\":\u0190\"! )(\"'#&'#"),
          peg$decode("%2\u0191\"\"6\u01917\u0192/J#$4\u0193\"\"5!7\u0194/,#0)*4\u0193\"\"5!7\u0194&&&#/($8\":\u0195\"! )(\"'#&'#"),
          peg$decode("%2\u0196\"\"6\u01967\u0197/1#;\xD7/($8\":\u0170\"! )(\"'#&'#"),
          peg$decode("%$;\xD8/&#0#*;\xD8&&&#/' 8!:\u0198!! )"),
          peg$decode("%2\u0199\"\"6\u01997\u019A/& 8!:\u019B! ).\u01BE &%2\u019C\"\"6\u019C7\u019D/& 8!:\u019E! ).\u01A7 &%2\u019F\"\"6\u019F7\u01A0/& 8!:\u01A1! ).\u0190 &%2\u01A2\"\"6\u01A27\u01A3/& 8!:\u01A4! ).\u0179 &%2\u01A5\"\"6\u01A57\u01A6/& 8!:\u01A7! ).\u0162 &%2\u01A8\"\"6\u01A87\u01A9/& 8!:\u01AA! ).\u014B &%2\u01AB\"\"6\u01AB7\u01AC/& 8!:\u01AD! ).\u0134 &%2\u01AE\"\"6\u01AE7\u01AF/& 8!:\u01B0! ).\u011D &%2\u01B1\"\"6\u01B17\u01B2/& 8!:\u01B3! ).\u0106 &%2\u01B4\"\"6\u01B47\u01B5/& 8!:\u01B6! ).\xEF &%2\u01B7\"\"6\u01B77\u01B8.) &2\u01B9\"\"6\u01B97\u01BA/& 8!:\u01BB! ).\xCC &%2\u01BC\"\"6\u01BC7\u01BD.) &2\u01BE\"\"6\u01BE7\u01BF/& 8!:\u01C0! ).\xA9 &%2\u01C1\"\"6\u01C17\u01C2.) &2\u01C3\"\"6\u01C37\u01C4/& 8!:\u01C5! ).\x86 &%2\u01C6\"\"6\u01C67\u01C7.) &2\u01C8\"\"6\u01C87\u01C9/& 8!:\u01CA! ).c &%2\u01CB\"\"6\u01CB7\u01CC.) &2\u01CD\"\"6\u01CD7\u01CE/& 8!:\u01CF! ).@ &%2\u01D0\"\"6\u01D07\u01D1.) &2\u01D2\"\"6\u01D27\u01D3/& 8!:\u01D4! )"),
          peg$decode("%;\xDA.# &;\xDB/A#2\u01CB\"\"6\u01CB7\u01CC/2$;\xDB/)$8#:\u01D5#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xDB/;#;\u0173/2$;\xDD/)$8#:\u01D6#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\xDC.A &%2d\"\"6d7e/1#;\xDC/($8\":\u01D7\"! )(\"'#&'#"),
          peg$decode("%$4\u01D8\"\"5!7\u01D9/,#0)*4\u01D8\"\"5!7\u01D9&&&#/' 8!:\u01DA!! )"),
          peg$decode("%$4\u01D8\"\"5!7\u01D9/,#0)*4\u01D8\"\"5!7\u01D9&&&#/' 8!:<!! )"),
          peg$decode("%2\u01DB\"\"6\u01DB7\u01DC/S#$;\xE5.# &;\xE00)*;\xE5.# &;\xE0&/7$2\u01DB\"\"6\u01DB7\u01DC/($8#:\u01DD#!!)(#'#(\"'#&'#.c &%2\u01DE\"\"6\u01DE7\u01DF/S#$;\xE5.# &;\xE10)*;\xE5.# &;\xE1&/7$2\u01DE\"\"6\u01DE7\u01DF/($8#:\u01DD#!!)(#'#(\"'#&'#"),
          peg$decode(";\xE2.\xE5 &%2\u01E0\"\"6\u01E07\u01E1/1#;\xE3/($8\":$\"! )(\"'#&'#.\xC1 &%2\u01DB\"\"6\u01DB7\u01DC/_#$;\xE5.) &;\xE6.# &;\xE00/*;\xE5.) &;\xE6.# &;\xE0&/7$2\u01DB\"\"6\u01DB7\u01DC/($8#:\u01DD#!!)(#'#(\"'#&'#.o &%2\u01DE\"\"6\u01DE7\u01DF/_#$;\xE5.) &;\xE6.# &;\xE10/*;\xE5.) &;\xE6.# &;\xE1&/7$2\u01DE\"\"6\u01DE7\u01DF/($8#:\u01DD#!!)(#'#(\"'#&'#"),
          peg$decode("%4\u01E2\"\"5!7\u01E3/' 8!:\u01E4!! )"),
          peg$decode("%4\u01E5\"\"5!7\u01E6/' 8!:\u01E4!! )"),
          peg$decode("%2\u01E7\"\"6\u01E77\u01E8/\xAA#;\xE9/\xA1$;\xEC/\x98$;\u0178/\x8F$;\xEC/\x86$$%;\xE3/1#;\xED/($8\":\u01E9\"!!)(\"'#&'#0;*%;\xE3/1#;\xED/($8\":\u01E9\"!!)(\"'#&'#&/F$;\u0179/=$%<;\xEC=/##&'!&&#/($8(:\u01EA(!\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;\xE5.) &;\xE6.# &;\xE40/*;\xE5.) &;\xE6.# &;\xE4&/=#%<;\xEC=/##&'!&&#/($8\":\u01DD\"!!)(\"'#&'#"),
          peg$decode("%4\u01EB\"\"5!7\u01EC/' 8!:\u01E4!! )"),
          peg$decode("%2\xBF\"\"6\xBF7\xC0/6#2\u01DB\"\"6\u01DB7\u01DC/'$8\":\u01ED\" )(\"'#&'#.\u02AA &%2\xBF\"\"6\xBF7\xC0/6#2\u01DE\"\"6\u01DE7\u01DF/'$8\":\u01EE\" )(\"'#&'#.\u0281 &%2\xBF\"\"6\xBF7\xC0/6#2\xCA\"\"6\xCA7\xCB/'$8\":\u01EF\" )(\"'#&'#.\u0258 &%2\xBF\"\"6\xBF7\xC0/6#2\u01F0\"\"6\u01F07\u01F1/'$8\":\u01F2\" )(\"'#&'#.\u022F &%2\xBF\"\"6\xBF7\xC0/6#2\u01F3\"\"6\u01F37\u01F4/'$8\":\u01F5\" )(\"'#&'#.\u0206 &%2\xBF\"\"6\xBF7\xC0/6#2\u01F6\"\"6\u01F67\u01F7/'$8\":\u01F8\" )(\"'#&'#.\u01DD &%2\xBF\"\"6\xBF7\xC0/6#2\u01F9\"\"6\u01F97\u01FA/'$8\":\u01FB\" )(\"'#&'#.\u01B4 &%2\xBF\"\"6\xBF7\xC0/6#2\u01FC\"\"6\u01FC7\u01FD/'$8\":\u01FE\" )(\"'#&'#.\u018B &%2\xBF\"\"6\xBF7\xC0/6#2\u01BC\"\"6\u01BC7\u01BD/'$8\":\u01FF\" )(\"'#&'#.\u0162 &%2\xBF\"\"6\xBF7\xC0/6#2\u01D0\"\"6\u01D07\u01D1/'$8\":\u0200\" )(\"'#&'#.\u0139 &%2\xBF\"\"6\xBF7\xC0/V#2\u0201\"\"6\u02017\u0202/G$4\u0203\"\"5!7\u0204/8$4\u0203\"\"5!7\u0204/)$8$:\u0205$\"! )($'#(#'#(\"'#&'#.\xF0 &%2\xBF\"\"6\xBF7\xC0/v#2\u0206\"\"6\u02067\u0207/g$4\u0203\"\"5!7\u0204/X$4\u0203\"\"5!7\u0204/I$4\u0203\"\"5!7\u0204/:$4\u0203\"\"5!7\u0204/+$8&:\u0208&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\x87 &%2\xBF\"\"6\xBF7\xC0/w#2\u0206\"\"6\u02067\u0207/h$2\u0209\"\"6\u02097\u020A/Y$$4\u0203\"\"5!7\u0204/,#0)*4\u0203\"\"5!7\u0204&&&#/7$2\u020B\"\"6\u020B7\u020C/($8%:\u020D%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2\u020E\"\"6\u020E7\u020F/I#;\xE9/@$;\x9A/7$2\u020B\"\"6\u020B7\u020C/($8$:\u0210$!!)($'#(#'#(\"'#&'#"),
          peg$decode("$;\xEA/&#0#*;\xEA&&&#"),
          peg$decode(";\xEA.5 &%<4\u0211\"\"5!7\u0212=/##&'!&&#"),
          peg$decode("$;\xEA0#*;\xEA&"),
          peg$decode("%;\xED/2#2\u0213\"\"6\u02137\u0214/#$+\")(\"'#&'#.) &4\u0215\"\"5!7\u0216"),
          peg$decode("$;\xED0#*;\xED&"),
          peg$decode("$;\xED/&#0#*;\xED&&&#"),
          peg$decode("%2\u0217\"\"6\u02177\u0218/H#$4\u0219\"\"5!7\u021A0)*4\u0219\"\"5!7\u021A&/,$;\xEE/#$+#)(#'#(\"'#&'#.# &;\xEE"),
          peg$decode("4\u021B\"\"5!7\u021C"),
          peg$decode("2\u0209\"\"6\u02097\u020A"),
          peg$decode("2\u020B\"\"6\u020B7\u020C"),
          peg$decode("%;\xF2/>#%<4\u0173\"\"5!7\u0174=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode(";\u0155.\u01E5 &;\u0120.\u01DF &;\u012D.\u01D9 &;\u015C.\u01D3 &;\u0162.\u01CD &;\u013A.\u01C7 &;\u0167.\u01C1 &;\xFA.\u01BB &;\u013E.\u01B5 &;\u012F.\u01AF &;\xF8.\u01A9 &;\xF7.\u01A3 &;\xFB.\u019D &;\xFC.\u0197 &;\xFD.\u0191 &;\xFE.\u018B &;\xFF.\u0185 &;\u0100.\u017F &;\u0101.\u0179 &;\u0102.\u0173 &;\u0104.\u016D &;\u010C.\u0167 &;\u0105.\u0161 &;\u0107.\u015B &;\u0106.\u0155 &;\u010E.\u014F &;\u010F.\u0149 &;\u0110.\u0143 &;\u0112.\u013D &;\u0115.\u0137 &;\u0117.\u0131 &;\u0118.\u012B &;\u0116.\u0125 &;\u011B.\u011F &;\u011C.\u0119 &;\u014B.\u0113 &;\u011E.\u010D &;\u011F.\u0107 &;\u0121.\u0101 &;\u0123.\xFB &;\u0124.\xF5 &;\u0128.\xEF &;\u012B.\xE9 &;\u012C.\xE3 &;\u0132.\xDD &;\u0134.\xD7 &;\u0135.\xD1 &;\u0136.\xCB &;\u0138.\xC5 &;\u0139.\xBF &;\u013C.\xB9 &;\u013D.\xB3 &;\u0140.\xAD &;\u0142.\xA7 &;\u0141.\xA1 &;\u0143.\x9B &;\u0144.\x95 &;\u0146.\x8F &;\u0149.\x89 &;\u0148.\x83 &;\u014D.} &;\u014E.w &;\u0154.q &;\u0156.k &;\u0159.e &;\u0160._ &;\u015D.Y &;\u015E.S &;\u015F.M &;\u014A.G &;\u0163.A &;\u0168.; &;\u0169.5 &;\u016A./ &;\u016B.) &;\u016F.# &;\u016E"),
          peg$decode("2\u021D\"\"6\u021D7\u021E"),
          peg$decode("2\u021F\"\"6\u021F7\u0220"),
          peg$decode("2\u0221\"\"6\u02217\u0222"),
          peg$decode("2\u0223\"\"6\u02237\u0224"),
          peg$decode("2\u0225\"\"6\u02257\u0226"),
          peg$decode("2\u0227\"\"6\u02277\u0228"),
          peg$decode("2\u0229\"\"6\u02297\u022A"),
          peg$decode("2\u022B\"\"6\u022B7\u022C"),
          peg$decode("2\u022D\"\"6\u022D7\u022E"),
          peg$decode("2\u022F\"\"6\u022F7\u0230"),
          peg$decode("2\u0231\"\"6\u02317\u0232"),
          peg$decode("2\u0233\"\"6\u02337\u0234"),
          peg$decode("2\u0235\"\"6\u02357\u0236"),
          peg$decode("2\u0237\"\"6\u02377\u0238"),
          peg$decode("2\u0239\"\"6\u02397\u023A"),
          peg$decode("2\u023B\"\"6\u023B7\u023C"),
          peg$decode("2\u023D\"\"6\u023D7\u023E"),
          peg$decode("2\u023F\"\"6\u023F7\u0240"),
          peg$decode("2\u0241\"\"6\u02417\u0242"),
          peg$decode("2\u0243\"\"6\u02437\u0244"),
          peg$decode("2\u0245\"\"6\u02457\u0246"),
          peg$decode("2\u0247\"\"6\u02477\u0248"),
          peg$decode("2\u0249\"\"6\u02497\u024A"),
          peg$decode("2\u024B\"\"6\u024B7\u024C"),
          peg$decode("2\u024D\"\"6\u024D7\u024E"),
          peg$decode("2\u024F\"\"6\u024F7\u0250"),
          peg$decode("2\u0251\"\"6\u02517\u0252"),
          peg$decode("2\u0253\"\"6\u02537\u0254"),
          peg$decode("2\u0255\"\"6\u02557\u0256"),
          peg$decode("2\u0257\"\"6\u02577\u0258"),
          peg$decode("2\u0259\"\"6\u02597\u025A"),
          peg$decode("2\u025B\"\"6\u025B7\u025C"),
          peg$decode("2\u025D\"\"6\u025D7\u025E"),
          peg$decode("2\u025F\"\"6\u025F7\u0260"),
          peg$decode("2\u0261\"\"6\u02617\u0262"),
          peg$decode("2\u0263\"\"6\u02637\u0264"),
          peg$decode("2\u0265\"\"6\u02657\u0266"),
          peg$decode("2\u0267\"\"6\u02677\u0268"),
          peg$decode("2\u0269\"\"6\u02697\u026A"),
          peg$decode("2\u026B\"\"6\u026B7\u026C"),
          peg$decode("2\u026D\"\"6\u026D7\u026E"),
          peg$decode("2\u026F\"\"6\u026F7\u0270"),
          peg$decode("2\u0271\"\"6\u02717\u0272"),
          peg$decode("2\u0273\"\"6\u02737\u0274"),
          peg$decode("2\u0275\"\"6\u02757\u0276"),
          peg$decode("2\u0277\"\"6\u02777\u0278"),
          peg$decode("2\u0279\"\"6\u02797\u027A"),
          peg$decode("2\u027B\"\"6\u027B7\u027C"),
          peg$decode("2\u027D\"\"6\u027D7\u027E"),
          peg$decode("2\u027F\"\"6\u027F7\u0280"),
          peg$decode("2\u0281\"\"6\u02817\u0282"),
          peg$decode("2\u0283\"\"6\u02837\u0284"),
          peg$decode("2\u0285\"\"6\u02857\u0286"),
          peg$decode("2\u0287\"\"6\u02877\u0288"),
          peg$decode("2\u0289\"\"6\u02897\u028A"),
          peg$decode("2\u028B\"\"6\u028B7\u028C"),
          peg$decode("2\u028D\"\"6\u028D7\u028E"),
          peg$decode("2\u028F\"\"6\u028F7\u0290"),
          peg$decode("2\u0291\"\"6\u02917\u0292"),
          peg$decode("2\u0293\"\"6\u02937\u0294"),
          peg$decode("2\u0295\"\"6\u02957\u0296"),
          peg$decode("2\u0297\"\"6\u02977\u0298"),
          peg$decode("2\u0299\"\"6\u02997\u029A"),
          peg$decode("2\u029B\"\"6\u029B7\u029C"),
          peg$decode("2\u029D\"\"6\u029D7\u029E"),
          peg$decode("2\u029F\"\"6\u029F7\u02A0"),
          peg$decode("2\u02A1\"\"6\u02A17\u02A2"),
          peg$decode("2\u02A3\"\"6\u02A37\u02A4"),
          peg$decode("2\u02A5\"\"6\u02A57\u02A6"),
          peg$decode("2\u02A7\"\"6\u02A77\u02A8"),
          peg$decode("2\u02A9\"\"6\u02A97\u02AA"),
          peg$decode("2\u02AB\"\"6\u02AB7\u02AC"),
          peg$decode("2\u02AD\"\"6\u02AD7\u02AE"),
          peg$decode("2\u02AF\"\"6\u02AF7\u02B0"),
          peg$decode("2\u02B1\"\"6\u02B17\u02B2"),
          peg$decode("2\u02B3\"\"6\u02B37\u02B4"),
          peg$decode("2\u02B5\"\"6\u02B57\u02B6"),
          peg$decode("2\u02B7\"\"6\u02B77\u02B8"),
          peg$decode("2\u02B9\"\"6\u02B97\u02BA"),
          peg$decode("2\u02BB\"\"6\u02BB7\u02BC"),
          peg$decode("2\u02BD\"\"6\u02BD7\u02BE"),
          peg$decode("2\u02BF\"\"6\u02BF7\u02C0"),
          peg$decode("2\u02C1\"\"6\u02C17\u02C2"),
          peg$decode("2\u02C3\"\"6\u02C37\u02C4"),
          peg$decode("2\u02C5\"\"6\u02C57\u02C6"),
          peg$decode("2\u02C7\"\"6\u02C77\u02C8"),
          peg$decode("2\u02C9\"\"6\u02C97\u02CA"),
          peg$decode("2\u02CB\"\"6\u02CB7\u02CC"),
          peg$decode("2\u02CD\"\"6\u02CD7\u02CE"),
          peg$decode("2\u02CF\"\"6\u02CF7\u02D0"),
          peg$decode("2\u02D1\"\"6\u02D17\u02D2"),
          peg$decode("2\u02D3\"\"6\u02D37\u02D4"),
          peg$decode("2\u02D5\"\"6\u02D57\u02D6"),
          peg$decode("2\u02D7\"\"6\u02D77\u02D8"),
          peg$decode("2\u02D9\"\"6\u02D97\u02DA"),
          peg$decode("2\u02DB\"\"6\u02DB7\u02DC"),
          peg$decode("2\u02DD\"\"6\u02DD7\u02DE"),
          peg$decode("2\u02DF\"\"6\u02DF7\u02E0"),
          peg$decode("2\u02E1\"\"6\u02E17\u02E2"),
          peg$decode("2\u02E3\"\"6\u02E37\u02E4"),
          peg$decode("2\u02E5\"\"6\u02E57\u02E6"),
          peg$decode("2\u02E7\"\"6\u02E77\u02E8"),
          peg$decode("2\u02E9\"\"6\u02E97\u02EA"),
          peg$decode("2\u02EB\"\"6\u02EB7\u02EC"),
          peg$decode("2\u02ED\"\"6\u02ED7\u02EE"),
          peg$decode("2\u02EF\"\"6\u02EF7\u02F0"),
          peg$decode("2\u02F1\"\"6\u02F17\u02F2"),
          peg$decode("2\u02F3\"\"6\u02F37\u02F4"),
          peg$decode("2\u02F5\"\"6\u02F57\u02F6"),
          peg$decode("2\u02F7\"\"6\u02F77\u02F8"),
          peg$decode("2\u02F9\"\"6\u02F97\u02FA"),
          peg$decode("2\u02FB\"\"6\u02FB7\u02FC"),
          peg$decode("2\u02FD\"\"6\u02FD7\u02FE"),
          peg$decode("2\u02FF\"\"6\u02FF7\u0300"),
          peg$decode("2\u0301\"\"6\u03017\u0302"),
          peg$decode("2\u0303\"\"6\u03037\u0304"),
          peg$decode("2\u0305\"\"6\u03057\u0306"),
          peg$decode("2\u0307\"\"6\u03077\u0308"),
          peg$decode("2\u0309\"\"6\u03097\u030A"),
          peg$decode("2\u030B\"\"6\u030B7\u030C"),
          peg$decode("2\u030D\"\"6\u030D7\u030E"),
          peg$decode("2\u030F\"\"6\u030F7\u0310"),
          peg$decode("2\u0311\"\"6\u03117\u0312"),
          peg$decode("2\u0313\"\"6\u03137\u0314"),
          peg$decode("2\u0315\"\"6\u03157\u0316"),
          peg$decode("2\u0317\"\"6\u03177\u0318"),
          peg$decode("2\u0319\"\"6\u03197\u031A"),
          peg$decode("2\u031B\"\"6\u031B7\u031C"),
          peg$decode("2\xC2\"\"6\xC27\xC3"),
          peg$decode("2\u031D\"\"6\u031D7\u031E"),
          peg$decode("20\"\"6071"),
          peg$decode("2V\"\"6V7W"),
          peg$decode("%2\u031F\"\"6\u031F7\u0320/B#%<2\u031F\"\"6\u031F7\u0320=.##&&!&'#/'$8\":\u0321\" )(\"'#&'#"),
          peg$decode("2\u0209\"\"6\u02097\u020A"),
          peg$decode("2\u020B\"\"6\u020B7\u020C"),
          peg$decode("2\u013A\"\"6\u013A7\u013B"),
          peg$decode("2\u0164\"\"6\u01647\u0165"),
          peg$decode("2\xEF\"\"6\xEF7\xF0")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 349 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      var _bindings={};
      var _locals={};
      var reCache={};
      var Entity=false;
      var FunctionChain=false;
      var SafetyFetch=false;
      var References={};
      var InstanceVars={};
      var UnresolvedLocals={};
      var readOnlyReference=true;
      
      var _db=false;
      var lp='_'; // prefix for bareword variables
      var LeakedMagic=/\^\{([a-z0-9]+)\}/;
      
      function addInstanceVar(v) {
        if (!InstanceVars[v]) {
          //console.log("Added instance var "+v)
          CheckScope(v,"instance");
          InstanceVars[v]=true;
        }
      }

      function addInstanceVars(v) {
        var vt='return '+v[1]+';';
        try {
          var inst=new Function(vt)();
          for (var i in inst) {
            addInstanceVar(i);
          }
        } catch (e) {
          error(e.message+"\n\nSAI compiler: Instance/Given variables can only be initialized with simple literal values. For more complex initialization, use Instantiate (but still declare them with instance).\n\nYour vars: "+v[1]);
        }
      }
      
      function CheckScope(v,context) {
        //console.log("check scope "+context+": "+v);
        if (References[v]) {
          var message="SAI compiler: variable "+v+" is a Reference variable and cannot be used as a "+context+".";
          //console.log(message);
          error(message);
        }
        if (InstanceVars[v]) {
          var message="SAI compiler: variable "+v+" is an Instance variable and cannot be used as a "+context+".";
          //console.log(message);
          error(message);
        }
      }
      
      function addLocal(v,a) { 
        if (_db) console.log("request local "+v+" - "+a);
        if (References[v]) return;
        if (_bindings[v]) return;
        _locals._hasLocals=true;
        if (!_locals[v]) {
          _locals[v]=a?(v+a):v;
        } else if (a) {
          _locals[v]=v+a;
        }
        if (_db) console.log("  added local "+v+" - "+_locals[v]);
      }
      
      function checkLocal(v,name) {
        if (References[v]) return v;
        if (_bindings[v]) return v;
        if (!_locals[v]) {
          UnresolvedLocals[v]=name;
          return '^U['+v+','+name+','+location().start.offset+']';
        }
        return v;
      }
      
      function Linker(code,final) {
        var p=/\^U\[([^,]+),([^,]+),([^\]]+)\]/g;
        return code.replace(p,function(x,v,name,loc) {
          if (References[v]) return v;
          if (_bindings[v]) return v;
          if (_locals[v]) return v;
          if (InstanceVars[name]) {
            //console.log("Resolved instance var "+name);
            return '$.'+name;
          }
          if (final) {
            error('SAI Compiler: local variable "'+name+'" used without initialization at:'+loc);
          } 
          return x; // unchanged
        });
      }
      
      function removeLocal(v) {
        if (_db) console.log("removed local "+v);
        delete _locals[v];
      }
      
      function getLocals() { 
        if (!_locals._hasLocals) return ''; 
        var k=[]; 
        for (var i in _locals) if (i!=='_hasLocals') {
          if (i!=_locals[i]) {
            k.push(_locals[i]);
          } else {
            k.unshift(_locals[i]);
          }
        } 
        var finalk=[];
        var klookup={};
        if (_db) {
          console.log("references");
          console.log(References);
          console.log("locals");
          console.log(_locals);
        }
        for (var i in k) {
          //console.log(k[i]);
          if (!References[k[i]]) finalk.push(k[i]);
          klookup[k[i]]=k;
        }
    //    for (var i in UnresolvedLocals) {
    //      if (!klookup[i] && !References[i]) {
    //        error("SAI compiler: local variable used before initialization (beware forward declarations): "+UnresolvedLocals[i]);
    //      }
    //    }
        //console.log(finalk);
        var r='var '+finalk.join(',')+';\n'; 
        _locals={};
        UnresolvedLocals={};
        return r; 
      }

      function rep(list,val) {
        var j;
        for (var i in list) {
          if (j==val[list[i]]) list[i]=j;
        }
      }
     
      function RV(code,varnames) {
        if (!varnames) varnames={};
        if (!code) error("SAI compiler: RV has undefined code; likely a syntax error; perhaps you need to use 'self'");
        if (!code.replace) {
          code=code.toString();
        }
        var repl=function(key) {
          var val=varnames[key];
          if (undefined===val || null===val || false===val) {
            val=tempvar();
            addLocal(val);
          }
          var re=reCache[key]; if (!re) re=reCache[i]=new RegExp('\\^\\{'+key+'\\}','g');
          //console.log(" -- replace "+key+" with "+val)
          code=code.replace(re,val);
        };
        //console.log("###############################")
        //console.log(code);
        //console.log("........................");
        //console.log(varnames);
        var completed={};
        var precedence=['block','this','key','list','counter'];
        for (var j in precedence) {
          var i=precedence[j];
          if (varnames.hasOwnProperty(i)) {
            //console.log("intercept "+i+" with "+varnames[i]);
            repl(i);
            completed[i]=true;
          }
        }
        for (var i in varnames) {
          if (undefined===completed[i]) {
            repl(i);
          }
        }
        //console.log(code)
        //console.log("---------------------------------")
        return code;
      }
      
      var varnum=0;
      function tempvar() {
        var v="$"+(varnum++);
        return v;
      }
      
      function quoted(v) {
        return "'"+v.replace(/\'/g,"\\\'")+"'";
      }
      
      var accessors = {
        firstfetch: { // [0]+key+[1]
          this: [ '$' , '' ],
          currentthis: [ 'this' , ''],
          local: [ '' , '' ], 
          arguments: [ 'arguments','' ],
          parameters: [ 'p','' ],
          it: [ '^{this}','' ],
          key: [ '^{key}','' ],
          counter: [ '^{counter}','' ],
          trial: [ '^{trial}','' ],
          sum: [ '^{sum}','' ],
          error: [ '^{error}','' ],
          self: [ '^{self}','' ],
          super: [ '^{super}','' ],
          paren: [ '', '' ],
          bound: [ '' , '' ],
          global: [ '' , '' ],
          function: [ '' , '' ],
          literal: ['','']
        },
        nextfetch: { // +[0]+key+[1]
          function: [ '(' , ')' ],
          attribute: [ '.' , '' ], 
          index: [ '[' , ']' ],
        },
        firststore: { //[0]+key+[1]
          function: [ '' , '' ],
          paren: [ '', '' ],
          local: [ '' , ''  ],
          error: [ '^{error}','' ],
          attribute: [ '^{this}.' ,  '' ],
          self: [ '^{self}','' ],
          sum: [ '^{sum}' , '' ],
          property: [ '$["' , '"]' ], 
          parameter: [ 'p["','"]' ],
        },
        laststore: { // +[0]+key+[1]
          attribute: [ '.' , '' ], 
          index: [ '[' , ']'  ],
        }
      };

      function safetyFetch(root,leaf) {
        SafetyFetch=true;
        return '(undefined===($_b=('+root+'))?undefined:($_b'+leaf+'))';
      }

      function ValueCompositor(v,safe) {
        //console.log("Value Compositor...");
        //console.log(v);
        var code='';
        if (v[0][0]=='local') {
          var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
          var binding=options.globals[test];
          if (binding) {
            v[0][0]='bound';
            v[0][1]=binding;
          }
        }
        if (v[0][0]=='local') {
          code+=VarUse(v[0][1]);
        }
        var patternbase=accessors.firstfetch;
        var i=0; while (i<v.length) {
          var pattern=patternbase[v[i][0]]; 
          patternbase=accessors.nextfetch;
          if (!pattern) error("SAI Compiler: RV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
          var leaf=pattern[0] + v[i][1] + pattern[1];
          if (i>0 && safe) {
            code=safetyFetch(code,leaf);
          } else {
            code=code+leaf;
          }
          i++;
        }
        return code;
      }

      var itselfops = {
        '+': '^{1} += ^{2}' , // test 'self +'
        '-': '^{1} -= ^{2}' , // test 'self -'
        
        '*': '^{1} *= ^{2}' , // test 'self *'
        '/': '^{1} /= ^{2}' , // test 'self /'
        '%': '^{1} %= ^{2}' , // test 'self %'
        '<<': '^{1} <<= ^{2}' , // 
        '>>': '^{1} >>= ^{2}' , // 
        '>>>': '^{1} >>>= ^{2}' , // 
        '**': '^{1} = Math.pow(^{1},^{2})' , // test 'self **'

        xorb: '^{1} ^= ^{2}' , // test 'self xorb'
        andb: '^{1} &= ^{2}' , // test 'self andb'
        orb: '^{1} |= ^{2}' , // test 'self orb'

        and: '^{1} = ^{1} && ^{2}', // test 'self and'
        or: '^{1} = ^{1} || ^{2}', // test 'self or'
        xor: '^{1} = $AI.xor_op(^{1},^{2})',  // test 'self xor'
        nand: '^{1} = (!((^{1})&&(^{2})))', // test 'self nand'
        nor: '^{1} = (!((^{1})||(^{2})))', // test 'self nor'

        '?>': '^{1} = Math.max(^{1},^{2})', // test 'self ?>'
        '?<': '^{1} = Math.min(^{1},^{2})', // test 'self ?<'
        
        update: '^{1} = $AI.update_op(^{1},^{2})', // test 'self update'
        delete: '$AI.delete_op(^{1},^{2})', // test 'self delete*'
        default: 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        '?': 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        concat: '^{1} = $AI.concat_op(^{1},^{2}, true)', // test 'self concat inplace*'
      };

      var unops={
        '-': '^{1}=-(^{1})' , // test 'self negate'
        'not': '^{1}=!(^{1})', // test 'self not'
        'notb': '^{1}=~(^{1})', // test 'self notb'
        'inc': '^{1}=(^{1} || 0)+1;', // test 'self inc'
        'dec': '^{1}--', // test 'self dec'
        'delete': 'delete ^{1}', // test 'self delete'
        'collect': '^{1} = $AI.collect_op(^{1})' // test 'self collect*'
      };  

      
      function assembleLiteral(v) {
        var build='';
        var result=[];
        for (var i in v) {
          var c=v[i];
          if (c[0]) {
            build+=c[1];
          } else {
            if (build.length) result.push(quoted(build));
            build='';
            if (!result.length) result.push(quoted(''));
            result.push(c[1]);
          }
        }
        if (build.length) result.push(quoted(build));
        if (!result.length) result=[quoted('')];
        return result.join('+');
      }

      var Lists={};
      function addToList(list,e) {
        var list=Lists[list] || (Lists[list]=[]);
        list.push(e);
      }
      function getList(list) {
        var list=Lists[list] || (Lists[list]=[]);
        if (list.length) {
          return '["'+list.join('","')+'"]';
        } 
        return '[]';
      }
      function clearLists() {
        Lists={};
      }
        
      function GetExpectsTester(x,name) {
        var l =[];
        for (var i in x) {
          var t=x[i][1] || 'true';
          var p='"'+x[i][0][1]+'":'+x[i][1];
          l.push(p);
        }
        return '$AI.expectsThrow(p,{'+l.join(',')+'},'+quoted(name)+');\n';
      }
      
      
      // expects
      // as
      // kind
      // body
      // preface
      // appendix
      function TaskClauseFormatter(o) {
        var params=['p'];
        var expects='',locals=[];//$unused=this';
        if (o.expects && o.as) Error("cannot have both EXPECTS and AS in a function declaration");
        if (o.expects && o.expects.length) {
          expects=GetExpectsTester(o.expects,'in-line');
        } else if (o.as) {
          for (var i in o.as) {
            if (i==0) {
              locals.push(o.as[i][0][1]+'=p');
            } else {
              params.push(o.as[i][0][1]);
            }
          }
        }
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var finallocals=[];
        for (var i in locals) if (!References[locals[i]]) finallocals.push(locals[i]);
        locals=locals.length?('var '+finallocals.join(',')+';'):'';
        var code = o.kind+'('+params.join(',')+'){'+o.preface+FunStart()+locals+expects+'{'+o.block+'}'+FunStop()+o.postface+'}';
        if (o.execute) code+='()';
        return code;
      }

      
      // prefix (v0)
      // name (v1)
      // as (v2)
      // expects (v3)
      // kind 
      // body (k)
      function TaskFormatter(o) {
        
        var fn=(o.prefix?o.prefix+'_':'')+o.name;
        var params='p';
        var paramspec=o.as||[];
        
        for (var i in paramspec) {
          var pname=paramspec[i][0][1];
          if (i==0) {
            addLocal(pname,'=p');
          } else {
            removeLocal(pname);
            params+=','+pname;
          }
        }

        if (SafetyFetch) { addLocal('$_b'); SafetyFetch=false; }
        if (FunctionChain) { addLocal('$_c'); addLocal('$_d'); FunctionChain=false; }
        if (!o.nothis) {
          if (o.unbound) {
            addLocal('$','=this');
          } else {
            addLocal('$','=this['+fn+']?this:$bindfail('+fn+')');
          }
        }
        var head='', tail='';
        var sup=GlobVar();
        if (o.prefix!='get' && o.prefix!='set') {
          addToList('lock',fn);
          head='var '+sup+'=prototype['+fn+'] || function(){};\n';
          head+='prototype['+fn+']=';
          tail=';\n';
        }
      
        o.body=Linker(o.body,false);
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var fun=o.kind+'('+params+') {\n'+o.preface+FunStart()+getLocals();
        if (o.expects) {
          fun+=GetExpectsTester(o.expects,fn);
        }
        fun+='{'+o.body+'}'+FunStop()+o.postface; // function body
        fun+='}';
      
        if (o.name) {
          if (fun.indexOf('^{this}')>-1) error("SAI Compiler: Cannot use unrooted . accessor without a context\n\n"+fun);
        }
        var r=RV(head+fun+tail,{this:false,super:sup});

        return r;

      }

      function VerbCat(v) {
    //       console.log("VerbCat");
    //       console.log(v);
         if (v.left) {
           return v.left+v.base+v.right;
    //     } else if (v.call) {
    //       if (test) {
    //         return RV('((undefined===($_c=^{verb}(($_d=^{base}),^{param})))?$_d:$_c)',v);
    //       } else {
    //         return v.verb+'('+v.base+(v.param?(','+v.param):'')+')';
    //       }
         } else {
           if (v.test) {
             return RV('((undefined===($_c=(($_d=^{base})^{verb}(^{param}))))?$_d:$_c)',v);
           } else {
             return v.base+v.verb+'('+v.param+')';
           }
         }
      }
     
      function AssembleVerb(v) {
         FunctionChain=true;
         if (v.length==1) {
    //       console.log("AV 1");
    //       console.log(v[0]);
           return VerbCat(v[0]);
         }
         var base=v[0].base;
         for (var i in v) {
           v[i].base=base;
           v[i].test=true;
           base=VerbCat(v[i]);
         }
         return base;
      }
      
      function EnumCheck(v) {
        var start=1;
        for (var i in v) {
          if (v[i][1]==='enum') {
            v[i][1]=start++;
          } else {
            var n=parseInt(v[i][1],10);
            if (!isNaN(n)) {
              start=n+1;
            }
          }
        }
        return v;
      }
      
      function GlobVar() {
        return '$'+(options.persist.globalcount++)+'g';
      }
      function FunStart() {
        return '';
        //return ' /*:FUNSTART:*/ ';
      }
      function FunStop() {
        return '';
        //return ' /*:FUNSTOP:*/ ';
      }
      function VarUse(v) {
        return '';
        //return [].concat(v).map(function(v) { return ' /*:VAR:'+v+':*/ '});
      }
      function FixVars(code) {
      }

      function MagicCheck(code) {
        var lm=LeakedMagic.exec(code);
        if (lm) error("SAI Compiler: Pronoun '"+lm[1]+"' used in the wrong place (but I can't tell you where yet, please search for your use of this variable and make sure it is contained within a construct that uses it.)");
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()