/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { startFile: 0, startExpression: 1 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(r, o) {
              var code='';
              if (r) code+=r;
              code+=o.join('\n')
              MagicCheck(code);
              //console.log(code);
              code=Linker(code,true);
              return code;
            },
          function(code) {
             MagicCheck(code); 
             code=Linker(code);
             return code;
           },
          function(v) {
            if (v[0]!='fields') error("SAI Compiler: REFERENCE requires a trait list.");
            var code='';
            for (var i in v[2]) {
              var r=v[2][i];
              References[lp+r[0]]=true; 
              if (r[1].indexOf('function')==0) {
                error("SAI Compiler: Cannot define functions in a reference block. Sorry, maybe someday.");
              }
              code+='var '+lp+r[0]+'='+r[1]+';\n'; 
            }
            return code;
          },
          function(k, typ, v, d, s) {
              if (!v) v=quoted('0.0.0-unspecified');
              var code='',isof=[];
              var isa=quoted(k);
              addToList('lock','isa')
              addToList('freeze','isof')
              code+='var isa=prototype.isa='+isa+';\n';
              isof.push('version:'+v);
              isof.push('isa:isa');
              isof.push('context:__context');
              if (typ) {
                isof.push('type:"'+typ+'"');
              }
              code+='var $bindfail=function(m){ throw new Error("SAI: A call to "+m+" on object "+isa+" has come unbound from any instance of that object. (If this is not in error, mark the declaration of "+m+" as unbound.)"); }\n';
              code+='prototype.isof['+isa+']={'+isof.join(',')+'};\n';
              var l;
              if (l=getList('lock')) code+='prototype.__tobelocked=prototype.__tobelocked.concat('+l+');\n';
              if (l=getList('freeze')) code+='prototype.__tobefrozen=prototype.__tobefrozen.concat('+l+');\n';
              code+=d.join('\n');
              code+=s.join('\n');
              clearLists();
              return code;
            },
          function(v) { return v },
          function(v) {
             var inherit='['+v.join(',')+']';
             var code='prototype.isof[prototype.isa].inherit=prototype.__inherits='+inherit+';\n';
             return code;
            },
          function(v) {
             return 'prototype.__contracts=prototype.__contracts.concat(['+v.join(',')+']);\n';
            },
          function(v, p1, p2) {
             addInstanceVar(v);
             var prop={get: undefined, set: undefined};
             prop[p1[0]]=p1[1];
             if (p2) {
               prop[p2[0]]=p2[1]; 
             }
             var ret='Object.defineProperty(prototype,"'+v+
               '",{configurable:true,enumerable:true,get:'+prop.get+
               ',set:'+prop.set+
               '});\n';
             addToList('lock',v);
             return ret;
          },
          function(g, w, b) { 
             if (!g) g='get'; 
             if (g=='get') w=null; 
             return [g,TaskFormatter({prefix:g,as:w,property:true,body:b,kind:'function'})]; 
            },
          function(v, k) {
             v.body=k;
             return TaskFormatter(v);    
            },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:"'"+v+"'",unbound:unbound,expects:x,as:w,kind:'function'};
           },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:v,expects:x,unbound:unbound,as:w,kind:'function*'};
           },
          function(v, unbound, x, o) { 
             addInstanceVar(v);
             var vn="'"+v+"'";
             var isthis='this['+vn+']?this:$bindfail('+vn+')';
             if (unbound) {
               isthis='this';
             }
             return {
              name:vn
              ,expects:x
              ,unbound:unbound
              ,as:o
              ,nothis:true
              ,kind:'function'
              ,preface:'var $='+isthis+'; return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
              };
            },
          function(v) { return "Symbol.iterator" },
          function(v) { return "'"+v+"'" },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function'});
          },
          ";",
          peg$literalExpectation(";", false),
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:'return '+b+';',kind:'function'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function*'});
          },
          function(o, option, x) {
            var f='';
            if (option=='any') {
              f="Promise.race("+x+")";
            } else if (option=='all') {
              f="Promise.all("+x+")";
            } else {
              f=x;
            }
            
            var b=RV('^{f}.then( function(){ return $_resolve.apply($,arguments); } ).catch( function(){ $_reject.apply($,arguments); });',{f:f});

            return TaskClauseFormatter({
              as:o
              ,block:b
              ,nodefaultparam:true
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(x, o, b) {
            return TaskClauseFormatter({
              expects:x
              ,as:o
              ,block:b
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(i, t) { return [i[1],t?t:true] },
          function(i) {return i},
          function(is, i) { is.push(i); return is; },
          function(t) { return [[['','_root'],t]] },
          "..",
          peg$literalExpectation("..", false),
          function(v) { return v+';' },
          function(v) { return v.join('') },
          function(i) { return options.constructs[i]; },
          function(i) {return options.constructs[i].clauses[i].exproutblock},
          function(i, ca) {return ca},
          function(i) {return options.constructs[i].clauses[i].exprout},
          function(i) {return options.constructs[i].clauses[i].exprsblock},
          function(i) {return options.constructs[i].clauses[i].exprsoutblock},
          function(i) {return options.constructs[i].clauses[i].exprusing},
          function(i) {return options.constructs[i].clauses[i].outblock},
          function(i) {return options.constructs[i].clauses[i].block},
          function(i) {return options.constructs[i].clauses[i].exprs},
          function(i) {return options.constructs[i].clauses[i].verb},
          function(i) {return options.constructs[i].clauses[i].none},
          function(i, a, cli) {
                if (cli===i && !options.constructs[i].repeats) return false;
                return options.constructs[i].clauses[cli];
              },
          function(i, a, cli) {return options.constructs[i].clauses[cli].exproutblock},
          function(i, a, cli, claa) {return claa},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprout},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprsblock},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprsoutblock},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprusing},
          function(i, a, cli) {return options.constructs[i].clauses[cli].outblock},
          function(i, a, cli) {return options.constructs[i].clauses[cli].block},
          function(i, a, cli) {return options.constructs[i].clauses[cli].exprs},
          function(i, a, cli) {return options.constructs[i].clauses[cli].verb},
          function(i, a, cli) {return options.constructs[i].clauses[cli].none},
          function(i, a, cli, cla) {return [cli,cla];},
          function(i, a, cl) {
             
               var work=[[i,a]].concat(cl);
               var work2=[];
               for (var i1=0; i1<work.length; i1++) {
                 var j=work[i1];
                 //console.log(j);
                 work2.push({
                   clause: j[0],
                   syntax: j[1].syntax,
                   type: j[0]+'.'+j[1].syntax,
                   args: j[1]
                 });
               }
              var result=options.constructs[i].handler({
                clauses:work2,
                tools:{
                  addlocal:function(v){ if (!v) v=tempvar(); addLocal(v); return v; },
                  replacer:RV,
                  tasker:TaskClauseFormatter
                }
              });
              if (result.error) error(result.error);
              return result.body;
           },
          function(pl, mo, b) { return {
            syntax: 'exprsoutblock',
            exprs: pl,
            out: mo,
            block: b
          }; },
          function(x, mo, b) { return {
            syntax: 'exproutblock',
            expr: x,
            out: mo,
            block: b
          }; },
          function(x, mo) { return {
            syntax: 'exprout',
            expr: x,
            out: mo,
          }; },
          function(x, task) { return {
            syntax: 'exprusing',
            expr: x,
            using: task
          }; },
          function(mo, b) { return {
            syntax: 'outblock',
            out: mo,
            block: b
          }; },
          function(b) { return {
            syntax: 'block',
            block: b
          }; },
          function(pl) { return {
            syntax: 'exprs',
            exprs: pl
          }; },
          function(pl, b) { return {
            syntax: 'exprsblock',
            exprs: pl,
            block: b
          }; },
          function(v) { return {
            syntax: 'verb',
            verb: v
          }; },
          function() { return { 
            syntax: 'none' 
          }; },
          function() { return 'var $=this;\n' },
          function() { return ';' },
          function(value, out, block) {
                var r={this:(out?out:tempvar())};
                var code=RV('var ^{this}=',r)+value+RV(';\n'+block+'\n',r);
                return code; 
            },
          function(a, b) {
             return RV('var ^{t1}=^{v1}; var ^{t2}=^{v2}; ^{v2}=^{t1}; ^{v1}=^{t2};',{t1:tempvar(),t2:tempvar(),v1:a,v2:b});
           },
          function(t) { return t },
          function(t) { return t.join(''); },
          function(v) { return v+'=('+v+' || 0)+1;\n'; },
          function(v) { return v+'--;\n'; },
          function(v) { return 'delete '+v+';\n'; },
          ",",
          peg$literalExpectation(",", false),
          function(t, v) { return v },
          function(t, v) { return v.concat(t) },
          function(v) { return v.reduce(function(a,b){return a.concat(b)}) },
          "-",
          peg$literalExpectation("-", false),
          function(l, e) {
               error('SAI Compiler: the "set val - expr" construct is unclear. Please use "set val to -expr" or "set val self - expr" as appropriate.');
             },
          function(l, o, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) error("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(itselfops[o], {'1':l[i], '2':RV(e,{self:l[i]}) } )+';\n';
             }
             return code;
           },
          function(l, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) error("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             if (l.length==1) return l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+=l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) error("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(unops[o],{'1':l[i]})+';\n';
             }
             return code;
           },
          function(l, o, e) {
             error("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function(l, e) {
             for (var i in l) {
               //console.log("local scope check "+l[i]);
               if ('$.'==l[i].substring(0,2)) CheckScope(l[i].substring(2),"local-1");
               if (lp==l[i].substring(0,lp.length)) CheckScope(l[i],"local-2");
             }
             if (l.length==1) return 'let '+l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+='let '+l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             error("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function() { return 'local '; },
          "+",
          peg$literalExpectation("+", false),
          "**",
          peg$literalExpectation("**", false),
          "*",
          peg$literalExpectation("*", false),
          "/",
          peg$literalExpectation("/", false),
          "%",
          peg$literalExpectation("%", false),
          "<<",
          peg$literalExpectation("<<", false),
          ">>",
          peg$literalExpectation(">>", false),
          ">>>",
          peg$literalExpectation(">>>", false),
          "?>",
          peg$literalExpectation("?>", false),
          "?<",
          peg$literalExpectation("?<", false),
          "?",
          peg$literalExpectation("?", false),
          function(v) { return v+';\n'; },
          function(v) { return v+";\n"; },
          function(v) { return '$AI.drain_op('+v+');\n'; },
          function(v, a) { return [v].concat(a) },
          function(v) {
              var j=v.length;
              if (!j) error("SAI Compiler: Expected something to assign into");
              if (j==1) {
                var pattern=accessors.firststore[v[0][0]];
                if (!pattern) error("SAI Compiler: Couldn't construct recipient from "+v);
                return pattern[0] + v[0][1] + pattern[1];
              }
              j--;
              var code='';
              var patternbase=accessors.firstfetch;
              var i=0; while (i<j) {
                var pattern=patternbase[v[i][0]]; patternbase=accessors.nextfetch;
                if (!pattern) error("SAI Compiler: Couldn't construct recipient from "+v);
                code+=pattern[0] + v[i][1] + pattern[1];
                i++;
              }
              var pattern=accessors.laststore[v[j][0]];
              if (!pattern) error("SAI Compiler: Couldn't construct recipient from "+v);
              code= code+pattern[0]+v[j][1]+pattern[1];
              return code;
            },
          function(v) { return ValueCompositor(v,false) },
          function(v) { return ValueCompositor(v,true) },
          function(v) {
              var verb='',stem='';
              if (v[0][0]=='local') {
                var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
                var binding=options.globals[test];
                if (binding) {
                  v[0][0]='bound';
                  v[0][1]=binding;
                }
              }
              var patternbase=accessors.firstfetch;
              var i=0; while (i<v.length) {
                var pattern=patternbase[v[i][0]]; 
                patternbase=accessors.nextfetch;
                if (!pattern) error("SAI Compiler: VV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
                stem+=verb;
                verb=pattern[0] + v[i][1] + pattern[1];
          //      console.log("VV"+i+": stem:"+stem+" verb:"+verb);
                i++;
              }
              return [stem,verb];
            },
          function(v) { return [['literal',v]] },
          function() { return [['super','']]; },
          function(x, y) { 
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
            },
          function(x, y) {
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
           },
          function() { return [['it','']] },
          function() { return [['key','']]},
          function() { return [['counter','']]},
          function() { return [['trial','']]},
          function() { return [['sum','']]},
          function() { return [['self','']]},
          function() { return [['error','']]},
          function(v) { return [[ 'attribute', v ]] },
          "'s",
          peg$literalExpectation("'s", false),
          function(p) { 
             return [[ 'function', p?p[1]:'' ]] 
          },
          function(v) { return [[ 'it', ''],[ 'attribute', v ]] },
          function(v) { return [[ 'it', ''],[ 'index', v ]] },
          function() { return [[ 'it', '']] },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(v) { return [[ 'index', v ]] },
          "\\",
          peg$literalExpectation("\\", false),
          function(v) { return [['index',v]] },
          ".",
          peg$literalExpectation(".", false),
          function(v) { return [[ 'paren', v ]] },
          function(v) { 
             //console.log("LLocal "+v);
             if (InstanceVars[v]) {
               usedMemberVar=v;
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v) { 
             //console.log("RLocal "+v);
             if (InstanceVars[v]) {
               usedMemberVar=v;
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) {
               v=checkLocal(lp+v,v);
             } else {
               v=lp+v;
             }
             return [[ 'local',v ]];
          },
          "$$",
          peg$literalExpectation("$$", false),
          function() { return [['arguments','']]},
          "$",
          peg$literalExpectation("$", false),
          function(v) { return [[ 'parameters','' ],['attribute',v]] },
          function() { return [[ 'parameters','' ]]},
          function(v) { return [['literal',v]]},
          "~",
          peg$literalExpectation("~", false),
          function(v) { return [['global',v]] },
          "@",
          peg$literalExpectation("@", false),
          function(v) { return [['this',''],[ 'attribute',v ]] },
          "@@",
          peg$literalExpectation("@@", false),
          function(v) { return [['currentthis',''],[ 'attribute',v ]] },
          function() { return [['currentthis','']] },
          function() { return [['this','']] },
          function(k, v) { 
               addToList('freeze',k);
               addInstanceVar(k);
               return 'prototype["'+k+'"]='+v[1]+';\n';
             },
          function(v) { 
          //    addToList('lock',i);
              addInstanceVars(v);
              var code='';
              code+='var t='+v[1]+';\nfor (var i in t) { prototype.__tobelocked.push(i); prototype[i]=t[i]; };\n'; 
              return code;
            },
          function(v) {
              var ivar=GlobVar();
              addInstanceVars(v);
              var proof='var '+ivar+'=function(){ var $=this; return '+v[1]+'; }\nfor (var i in '+ivar+'()) { prototype[i]=undefined; };\n'; 
              var sup=GlobVar();
              var setup= 'var '+sup+'=prototype.Constructor || function(){};\nprototype.Constructor=function() {\n'+sup+'.call(this);\n  var t='+ivar+'();\n  for (var i in t) if (t[i] !== undefined) this[i]=t[i];\n};\n'; 
              return proof+setup;
            },
          function(maj, min, patch) {
             return "'"+maj+"."+min+"."+patch+"'";
           },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields', '{'+w.join(',')+'}',v] },
          function(v) { return ['array',v.join(','),v] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields','{'+w.join(',')+'}',v] },
          function() { return null },
          function(v) { return ['literal',v] },
          function() { return ['literal','[]']; },
          function() { return ['literal','{}']; },
          function(v) { return ['literal','['+v.join(',')+']'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { return v[1] },
          /^[^\n},);|]/,
          peg$classExpectation(["\n", "}", ",", ")", ";", "|"], true, false),
          "|",
          peg$literalExpectation("|", false),
          ")",
          peg$literalExpectation(")", false),
          function(v) { return quoted(v.join('').trim()) },
          function(v, t) { return v.concat(t) },
          function(k) { return [[k,true]] },
          function(k, v) { return [[k,v]] },
          function(v, t) { 
             var r=[]; 
             for (var i in v) r=r.concat(v[i]); 
             r=r.concat(t);  
             return r; 
          },
          function(v, t) { var r=[]; for (var i in v) r=r.concat(v[i]); r=r.concat(t); return r; },
          function(v) { return v[0][1] },
          function(o) {
             var v=[];
             for (var i in o) v.push(o[i][0][1]);
             return v;
           },
          function(k) {return k},
          function(k, v) { k.push(v); return k; },
          function(v) {
             
             CheckScope(v,"parameter/as/given");
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v, c) {return c},
          function(v, c) {
             for (var i in c) {
               v=c[i][0]+v+c[i][1];
             }
             return v;
           },
          function() { // test 'sow *'
               return ['$AI.iterate_op(',')'];
             },
          function() { // test 'keys comp*'
               return ['$AI.keys_op(',')'];
             },
          function() { // test 'values comp*'
               return ['$AI.values_op(',')'];
             },
          function(x) {
             return ['$AI.concat_op(' , ','+x+')' ];
           },
          function() { return ['$AI.collect_op(',')']; },
          function() { return ['$AI.enlist_op(',')']; },
          function() { return ['$AI.entrait_op(',')']; },
          function(x) { return x },
          function(o, b) {
              if (!o) o=[lp+'a',lp+'b'];
              var block=RV('function('+o[0]+','+o[1]+'){'+b+'}');
              return ['$AI.sort_op(' , ','+block+')']; 
            },
          function(x) {
             return ['$AI.sort_op(' , ','+x+')' ];
            },
          function(x) { // test 'thru inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'}',{this:'$_v',key:'$_k'});
               return ['$AI.map_op(' , ','+block+' )']; 
            },
          function(o, b) { // test 'thru block'
               var block=RV('function(^{this},^{key}){'+b+'; return ^{this};}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.map_op(' , ','+block+' )']; 
            },
          function(x) { // test 'thru using'
             return ['$AI.map_op(' , ','+x+')' ];
            },
          function(x) { // test 'audit inline *'
               var block=RV('function(^{this},^{key}){ '+x+'; }',{this:'$_v',key:'$_k'});
               return ['$AI.audit_op(' , ','+block+' )']; 
            },
          function(o, b) { // test 'audit block*'
               var block=RV('function(^{this},^{key}){'+b+' }',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.audit_op(' , ','+block+' )']; 
            },
          function(x) { // test 'audit using*'
             return ['$AI.audit_op(' , ','+x+')' ];
            },
          function(into, o, b) {
              if (!o) o=[];
              if (!o[0]) o[0]=lp+'sum'; 
              if (!o[1]) o[1]='$_v';
              if (!o[2]) o[2]='$_k';
              b+='return ^{sum};\n';
              var block=RV('function(^{sum},^{this},^{key}){'+b+'}',{sum:o[0],this:o[1],key:o[2]});
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+block+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+block+','+into+')' ];
              }
            },
          function(into, b) {
              var block=RV('function(^{sum},^{this},^{key}){ return '+b+';}',{sum:lp+'sum',this:'$_v',key:'$_k'});
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+block+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+block+','+into+')' ];
              }
            },
          function(into, x) {
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+x+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+x+','+into+')' ];
              }
            },
          function(x) { // test 'filter inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'; }',{this:'$_v',key:'$_k'});
               //console.log("filter comp exp");
               return ['$AI.filter_op(' , ','+block+' )']; 
            },
          function(o, b) {
               var block=RV('function(^{this},^{key}){'+b+'}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.filter_op(' , ','+block+')']; 
            },
          function(x) {
              return ['$AI.filter_op(' , ','+x+')' ];
            },
          function(x) { // test 'alter inline*'
               var block=RV('function(^{this}){ return '+x+'; }',{this:'$_v'});
               return [ '$AI.alter_op(' , ','+block+')']; 
            },
          function(o, b) { // test 'alter block*'
               var block=RV('function(^{this}){'+b+'; return ^{this}; }',{this:o?o[0]:'$_v'});
               return [ '$AI.alter_op(' , ','+block+')']; 
            },
          function(x) { // test 'alter using'
               return [ '$AI.alter_op(' , ','+x+')']; 
            },
          function(x) { // test 'observe inline'
               var block=RV('function(^{this}){ '+x+'; }',{this:'$_v'});
               return [ '$AI.observe_op(' , ','+block+')']; 
            },
          function(o, b) { // test 'observe block'
               var block=RV('function(^{this}){'+b+'; }',{this:o?o[0]:'$_v'});
               return [ '$AI.observe_op(' , ','+block+')']; 
            },
          function(x) { // test 'observe using'
               return [ '$AI.observe_op(' , ','+x+')']; 
            },
          function(q) {
             var code='({<>})';
             q=[].concat(q);
             var expr={quality:[],having:[],by:[],map:[],limit:[]};
             for (var i in q) { 
               for (var j=0; j<q[i].length; j+=2) {
                 expr[q[i][j]].push(q[i][j+1]); 
               }
             }
             var conds=[];
             if (expr.quality.length) {
               for (var i in expr.quality) { 
                 conds.push(expr.quality[i]); 
                }
             }
             if (expr.having.length) {
               var conds=conds.concat(expr.having.map(function(c){ return '('+c+')';}));
             }
             if (conds.length) {
               code=RV('$AI.filter_op(^{source},function($_v,$_k){ return ^{block}; })',{source:code,block:conds.join(' && '),this:'$_v',key:'$_k'});
             }
             if (expr.limit.length && expr.limit[0].extract && expr.by.length) { // first/last singleton with a sort
               code='$AI.reduce_op('+code+',function(a,b) { if (undefined===a) return b; var r; ';
               expr.by[0][1]*=expr.limit[0].sort; // flip sort if looking for "last"
               var conds=expr.by.map(function(c){
                 c[0]=c[0]||'^{this}';
                 var x1=RV(c[0],{this:'a'});
                 var x2=RV(c[0],{this:'b'});
                 return RV('r=$AI.compare_op(^{x1},^{x2}); if (r<0) return ^{lt}; if (r>0) return ^{gt};\n',{x1:x1,x2:x2,lt:(c[1]>0?'a':'b'),gt:(c[1]>0?'b':'a')});
               });
               code+=conds.join(' ')+'return a; },undefined)';     
             } else {
               if (expr.by.length) {
                 code='$AI.sort_op('+code+',function(a,b) { var aa,bb; ';
                 var conds=expr.by.map(function(c){
                   c[0]=c[0]||'^{this}';
                   var x1=RV('aa='+c[0]+'; ',{this:'a'});
                   var x2=RV('bb='+c[0]+'; ',{this:'b'});
                   return x1+x2+RV('if (aa<bb) return ^{lt}; if (aa>bb) return ^{gt}; ',{c:c[0],lt:-c[1],gt:c[1]});
                 });
                 code+=conds.join(' ')+'return 0; })';
               }
               if (expr.limit.length) {
                 var l=expr.limit[0];
                 if (l.slice) {
                   code='$AI.slice_op('+code+','+l.start+','+l.len+')';
                 }
                 if (l.extract) { 
                   code='$AI.element_op('+code+',0)';
                 }
                 if (l.count) {
                   code='$AI.count_op('+code+')';
                 }
               }
             } 
             return code.split('{<>}');
           },
          function() { return ['limit',{extract:true,sort:1}]; },
          function() { return ['limit',{extract:true,slice:true,start:-1}]; },
          function(s, c) { return ['limit',{slice:true,start:s,len:c}]; },
          function(s) { return ['limit',{slice:true,start:undefined,len:s}]; },
          function() { return ['limit',{count:true}]; },
          function(v) { return ['quality', '^{this}["'+v+'"]'] },
          function(v) { return ['quality', '(!^{this}["'+v+'"])'] },
          function(v) { return ['having',v] },
          function(d) { return ['by',[null,d?d:1]] },
          function(v, d) { return ['by',[v,d?d:1]] },
          function(v) { return ['by',[v,-1],'limit',{extract:true,sort:1}]},
          function(v) { return ['by',[v,1],'limit',{extract:true,sort:1}]},
          function() { return 1 },
          function() { return -1 },
          function(l, o, r) { return '('+l+o+r+')' },
          function(c, l) { return '($AI.xor_op('+c+','+l+'))' },
          function(l, f) { return '(!('+l+' && '+f+'))' },
          function(l, f) { return '(!('+l+' || '+f+'))' },
          "??",
          peg$literalExpectation("??", false),
          "::",
          peg$literalExpectation("::", false),
          function(c, l, r) { 
               return RV('((^{c})?(^{l}):(^{r}))',{c:c,l:l,r:r}); 
             },
          function() { return '&&' },
          function() { return '||' },
          function(l, o, r) { return o+'('+l+','+r+')' },
          ">=",
          peg$literalExpectation(">=", false),
          function() { return '>=' },
          ">",
          peg$literalExpectation(">", false),
          function() { return '>' },
          "=",
          peg$literalExpectation("=", false),
          function() { return '==' },
          function() { return '!==' },
          function() { return '===' },
          "<=",
          peg$literalExpectation("<=", false),
          function() { return '<=' },
          "<",
          peg$literalExpectation("<", false),
          function() { return '<' },
          "!=",
          peg$literalExpectation("!=", false),
          function() { return '!=' },
          function() { return '$AI.max_op' },
          function() { return '$AI.min_op' },
          "<=>",
          peg$literalExpectation("<=>", false),
          function() { return '$AI.compare_op' },
          function() {return '|' },
          function() {return '&'},
          function() { return '^'},
          function(l, r) { // test '**'
             return 'Math.pow('+l+','+r+')' 
           },
          function(l, op, x) {
             var p=undefined;
             if (x) {
               p=x[1];
             }
             return '('+op+').call($,('+l+'),'+p+')';
           },
          function(l, r) { // test 'overlay *'
             return '$AI.overlay_op('+l+','+r+')' 
           },
          function(l, r) { // test 'select *'
             return '$AI.select_op('+l+','+r+')' 
           },
          function(l, r) { // test 'delete *'
             return '$AI.delete_op($AI.clone_op('+l+'),'+r+')' 
           },
          function(l, r) { 
             return '$AI.expects_op('+l+','+r+')' 
           },
          function(l, r) { 
             return '('+l+').isof['+r+']'; 
           },
          function(l, v) {  // test 'default*'
               SafetyFetch=true; 
               return RV('((undefined!==($_b=^{l}))?$_b:^{v})',{l:l,v:v}); 
             },
          function(v) { return '(0-('+v+'))' },
          function(v) { return '(~('+v+'))' },
          function(v) { return '(!('+v+'))' },
          function(v) { return 'typeof ('+v+')'; },
          function(v) { return 'isNaN('+v+')'; },
          function(v) { return '($AI.number_op('+v+'))'; },
          function(v) { return '(undefined!=='+v+')' },
          function(v) { return '$AI.clone_op('+v+')'; },
          function(v) { return  'function(){return ('+v+').apply($,arguments);}'; },
          function(o) { return o },
          "(",
          peg$literalExpectation("(", false),
          function(v, o) { 
             if (o) {
               addLocal(o);
               return RV('(^{out}='+v+')',{out:o}); 
             } else {
               return '('+v+')'; 
             }
            },
          /^[igm]/,
          peg$classExpectation(["i", "g", "m"], false, false),
          function(x, m) {
             var re= '/'+x.join('')+'/'+m.join('');
             return re;
           },
          "\\/",
          peg$literalExpectation("\\/", false),
          /^[^\n\r\/]/,
          peg$classExpectation(["\n", "\r", "/"], true, false),
          /^[.([|]/,
          peg$classExpectation([".", "(", "[", "|"], false, false),
          function(v) {var hop=ResWords.hasOwnProperty(v);return hop;},
          function(v) { return v; },
          /^[a-zA-Z_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
          /^[a-zA-Z_0-9]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false),
          function(v1, v2) { return v1+v2.join('') },
          function() { return 'NaN' },
          function() { return 'Infinity' },
          function() { return 'it' },
          function(v) {
             return AssembleVerb(v);
           },
          "'d",
          peg$literalExpectation("'d", false),
          function(v, b, o) {
            return AssembleVerb([{ base:b, verb:'.'+v, param:(o?o[1]:'')}]);
          },
          function(v, o) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$'+(o?(','+o[1]):'') }]; 
               return [{ base:v[0], verb:v[1], param:(o?o[1]:'') }]
            },
          function(v) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$' }]; 
               return [{ base:v[0], verb:v[1], param:'' }]
             },
          function(v, c) {
             c[0].base=v;
             return AssembleVerb(c);
           },
          function(l) { 
               return l ;
             },
          function(c) {
               return {left:c[0], right: c[1]}
            },
          function(i, o) {
               return {verb:'.'+i, param:(o?o[1]:''), test:true}; 
            },
          function(v, o) { 
             return '$AI.create_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) { 
             return '$AI.singleton_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) {
             return 'new '+v+'('+(o?o[1]:'')+')'; 
           },
          /^[a-zA-Z0-9_\/]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "/"], false, false),
          function(n) { return n.join('') },
          "o",
          peg$literalExpectation("o", false),
          function(v) { return v*(Math.PI/180) },
          "0b",
          peg$literalExpectation("0b", false),
          /^[0-1]/,
          peg$classExpectation([["0", "1"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*2+Number(v[i++]));
             return r.toString();
           },
          "0o",
          peg$literalExpectation("0o", false),
          /^[0-7]/,
          peg$classExpectation([["0", "7"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*8+Number(v[i++]));
             return r.toString();
           },
          "0x",
          peg$literalExpectation("0x", false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*16+v[i++]);
             return r;
           },
          "0",
          peg$literalExpectation("0", false),
          function() { return 0; },
          "1",
          peg$literalExpectation("1", false),
          function() { return 1; },
          "2",
          peg$literalExpectation("2", false),
          function() { return 2; },
          "3",
          peg$literalExpectation("3", false),
          function() { return 3; },
          "4",
          peg$literalExpectation("4", false),
          function() { return 4; },
          "5",
          peg$literalExpectation("5", false),
          function() { return 5; },
          "6",
          peg$literalExpectation("6", false),
          function() { return 6; },
          "7",
          peg$literalExpectation("7", false),
          function() { return 7; },
          "8",
          peg$literalExpectation("8", false),
          function() { return 8; },
          "9",
          peg$literalExpectation("9", false),
          function() { return 9; },
          "a",
          peg$literalExpectation("a", false),
          "A",
          peg$literalExpectation("A", false),
          function() { return 10; },
          "b",
          peg$literalExpectation("b", false),
          "B",
          peg$literalExpectation("B", false),
          function() { return 11; },
          "c",
          peg$literalExpectation("c", false),
          "C",
          peg$literalExpectation("C", false),
          function() { return 12; },
          "d",
          peg$literalExpectation("d", false),
          "D",
          peg$literalExpectation("D", false),
          function() { return 13; },
          "e",
          peg$literalExpectation("e", false),
          "E",
          peg$literalExpectation("E", false),
          function() { return 14; },
          "f",
          peg$literalExpectation("f", false),
          "F",
          peg$literalExpectation("F", false),
          function() { return 15; },
          function(r, x) { return r+'e'+x },
          function(w, f) { return Number(w+'.'+f) },
          function(v) { return -v },
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          function(v) { return parseInt(v.join('')) },
          "'",
          peg$literalExpectation("'", false),
          function(v) { return assembleLiteral(v) },
          "\"",
          peg$literalExpectation("\"", false),
          "`",
          peg$literalExpectation("`", false),
          /^[^'\n]/,
          peg$classExpectation(["'", "\n"], true, false),
          function(v) { return [true,v] },
          /^[^"\n]/,
          peg$classExpectation(["\"", "\n"], true, false),
          "'''",
          peg$literalExpectation("'''", false),
          function(v) { return v},
          function(v) { return v.join("+'\\n'+"); },
          "^",
          peg$literalExpectation("^", false),
          function() { return [true, "\\"+"x5e"] },
          /^[^\n]/,
          peg$classExpectation(["\n"], true, false),
          function() { return [true,'\\'+"'"] },
          function() { return [true,'\\'+'"'] },
          function() { return [true,'\\'+'$'] },
          "&#123;",
          peg$literalExpectation("&#123;", false),
          function() { return [true,'\\'+'&#123;'] },
          "&#125;",
          peg$literalExpectation("&#125;", false),
          function() { return [true,'\\'+'&#125;'] },
          "n",
          peg$literalExpectation("n", false),
          function() { return [true,'\\'+'n'] },
          "r",
          peg$literalExpectation("r", false),
          function() { return [true,'\\'+'r'] },
          "t",
          peg$literalExpectation("t", false),
          function() { return [true,'\\'+'t'] },
          function() { return [true,'\\'+'b'] },
          function() { return [true,'\\'+'f'] },
          "x",
          peg$literalExpectation("x", false),
          /^[0-9a-fA-F]/,
          peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
          function(a, b) { return [true,'\\'+'x'+a+b ] },
          "u",
          peg$literalExpectation("u", false),
          function(a, b, c, d) { return [true,'\\'+'u'+a+b+c+d] },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function(a) { return [true,'\\'+'u{'+a.join('')+'}' ] },
          "${",
          peg$literalExpectation("${", false),
          function(v) { return [false,v] },
          /^[^a-zA-Z0-9_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], true, false),
          "...",
          peg$literalExpectation("...", false),
          /^[ ]/,
          peg$classExpectation([" "], false, false),
          "//",
          peg$literalExpectation("//", false),
          /^[^\r\n]/,
          peg$classExpectation(["\r", "\n"], true, false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "__source",
          peg$literalExpectation("__source", false),
          "__offset",
          peg$literalExpectation("__offset", false),
          "__column",
          peg$literalExpectation("__column", false),
          "__line",
          peg$literalExpectation("__line", false),
          "adopt",
          peg$literalExpectation("adopt", false),
          "all",
          peg$literalExpectation("all", false),
          "and",
          peg$literalExpectation("and", false),
          "andb",
          peg$literalExpectation("andb", false),
          "any",
          peg$literalExpectation("any", false),
          "arguments",
          peg$literalExpectation("arguments", false),
          "array",
          peg$literalExpectation("array", false),
          "as",
          peg$literalExpectation("as", false),
          "asc",
          peg$literalExpectation("asc", false),
          "audit",
          peg$literalExpectation("audit", false),
          "bind",
          peg$literalExpectation("bind", false),
          "blank",
          peg$literalExpectation("blank", false),
          "by",
          peg$literalExpectation("by", false),
          "catch",
          peg$literalExpectation("catch", false),
          "chain",
          peg$literalExpectation("chain", false),
          "collect",
          peg$literalExpectation("collect", false),
          "copy",
          peg$literalExpectation("copy", false),
          "concat",
          peg$literalExpectation("concat", false),
          "contract",
          peg$literalExpectation("contract", false),
          "count",
          peg$literalExpectation("count", false),
          "counter",
          peg$literalExpectation("counter", false),
          "create",
          peg$literalExpectation("create", false),
          "dec",
          peg$literalExpectation("dec", false),
          "default",
          peg$literalExpectation("default", false),
          "delete",
          peg$literalExpectation("delete", false),
          "desc",
          peg$literalExpectation("desc", false),
          "do",
          peg$literalExpectation("do", false),
          "down",
          peg$literalExpectation("down", false),
          "else",
          peg$literalExpectation("else", false),
          "empty",
          peg$literalExpectation("empty", false),
          "enum",
          peg$literalExpectation("enum", false),
          "enlist",
          peg$literalExpectation("enlist", false),
          "entrait",
          peg$literalExpectation("entrait", false),
          "error",
          peg$literalExpectation("error", false),
          "exists",
          peg$literalExpectation("exists", false),
          "expects",
          peg$literalExpectation("expects", false),
          "fields",
          peg$literalExpectation("fields", false),
          "first",
          peg$literalExpectation("first", false),
          "from",
          peg$literalExpectation("from", false),
          "get",
          peg$literalExpectation("get", false),
          "given",
          peg$literalExpectation("given", false),
          "has",
          peg$literalExpectation("has", false),
          "highest",
          peg$literalExpectation("highest", false),
          "Infinity",
          peg$literalExpectation("Infinity", false),
          "instance",
          peg$literalExpectation("instance", false),
          "into",
          peg$literalExpectation("into", false),
          "inc",
          peg$literalExpectation("inc", false),
          "inherit",
          peg$literalExpectation("inherit", false),
          "isnt",
          peg$literalExpectation("isnt", false),
          "isNaN",
          peg$literalExpectation("isNaN", false),
          "is",
          peg$literalExpectation("is", false),
          "isof",
          peg$literalExpectation("isof", false),
          "iterate",
          peg$literalExpectation("iterate", false),
          "Iterator",
          peg$literalExpectation("Iterator", false),
          "it",
          peg$literalExpectation("it", false),
          "keys",
          peg$literalExpectation("keys", false),
          "key",
          peg$literalExpectation("key", false),
          "last",
          peg$literalExpectation("last", false),
          "limit",
          peg$literalExpectation("limit", false),
          "list",
          peg$literalExpectation("list", false),
          "local",
          peg$literalExpectation("local", false),
          "lowest",
          peg$literalExpectation("lowest", false),
          "me",
          peg$literalExpectation("me", false),
          "my",
          peg$literalExpectation("my", false),
          "main",
          peg$literalExpectation("main", false),
          "NaN",
          peg$literalExpectation("NaN", false),
          "nand",
          peg$literalExpectation("nand", false),
          "new",
          peg$literalExpectation("new", false),
          "nop",
          peg$literalExpectation("nop", false),
          "nor",
          peg$literalExpectation("nor", false),
          "not",
          peg$literalExpectation("not", false),
          "notb",
          peg$literalExpectation("notb", false),
          "number",
          peg$literalExpectation("number", false),
          "null",
          peg$literalExpectation("null", false),
          "object",
          peg$literalExpectation("object", false),
          "observe",
          peg$literalExpectation("observe", false),
          "orphan",
          peg$literalExpectation("orphan", false),
          "or",
          peg$literalExpectation("or", false),
          "orb",
          peg$literalExpectation("orb", false),
          "true",
          peg$literalExpectation("true", false),
          "false",
          peg$literalExpectation("false", false),
          "promise",
          peg$literalExpectation("promise", false),
          "process",
          peg$literalExpectation("process", false),
          "reference",
          peg$literalExpectation("reference", false),
          "select",
          peg$literalExpectation("select", false),
          "self",
          peg$literalExpectation("self", false),
          "set",
          peg$literalExpectation("set", false),
          "singleton",
          peg$literalExpectation("singleton", false),
          "step",
          peg$literalExpectation("step", false),
          "sum",
          peg$literalExpectation("sum", false),
          "swap",
          peg$literalExpectation("swap", false),
          "super",
          peg$literalExpectation("super", false),
          "task",
          peg$literalExpectation("task", false),
          "then",
          peg$literalExpectation("then", false),
          "thru",
          peg$literalExpectation("thru", false),
          "traits",
          peg$literalExpectation("traits", false),
          "trial",
          peg$literalExpectation("trial", false),
          "try",
          peg$literalExpectation("try", false),
          "to",
          peg$literalExpectation("to", false),
          "typeof",
          peg$literalExpectation("typeof", false),
          "unbound",
          peg$literalExpectation("unbound", false),
          "undefined",
          peg$literalExpectation("undefined", false),
          "update",
          peg$literalExpectation("update", false),
          "using",
          peg$literalExpectation("using", false),
          "values",
          peg$literalExpectation("values", false),
          "via",
          peg$literalExpectation("via", false),
          "with",
          peg$literalExpectation("with", false),
          "xor",
          peg$literalExpectation("xor", false),
          "xorb",
          peg$literalExpectation("xorb", false),
          "!",
          peg$literalExpectation("!", false),
          "#",
          peg$literalExpectation("#", false),
          ":",
          peg$literalExpectation(":", false),
          function() { return ':' },
          "%%INDENT%%",
          peg$literalExpectation("%%INDENT%%", false),
          "%%DEDENT%%",
          peg$literalExpectation("%%DEDENT%%", false)
        ],

        peg$bytecode = [
          peg$decode("%;\xE3/M#;\".\" &\"/?$$;#/&#0#*;#&&&#/)$8#: #\"! )(#'#(\"'#&'#"),
          peg$decode("%;\x92/1#;\xE4/($8\":!\"!!)(\"'#&'#"),
          peg$decode("%;\u0140/C#;\xE1/:$;u/1$;\xE4/($8$:\"$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0137/\xA4#;\xE1/\x9B$;\xBD/\x92$;\xE1/\x89$;\u012D.# &;\u0144.\" &\"/u$;\xE1/l$;t.\" &\"/^$;\xE1/U$;\xE4/L$$;$0#*;$&/<$$;%0#*;%&/,$8+:#+%(&$! )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;&./ &;'.) &;(.# &;s/' 8!:$!! ).# &;\xE4"),
          peg$decode("%;*/' 8!:$!! ).# &;\xE4"),
          peg$decode("%;\u011C/C#;\xE1/:$;y/1$;\xE4/($8$:%$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xFF/C#;\xE1/:$;y/1$;\xE4/($8$:&$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xBD/A#;)/8$;).\" &\"/*$8#:'##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\xE1/k#;\u0114.# &;\u0143/\\$;\xE1/S$;\x90.\" &\"/E$;\xE1/<$;2/3$;\xE4/*$8':('#%#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;+/;#;2/2$;\xE4/)$8#:)#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;\xBD/\xA2#;\xE1/\x99$;\u014F.\" &\"/\x8B$;\xE1/\x82$;\u0151.\" &\"/t$;\xE1/k$;\u0149/b$;\xE1/Y$;1.\" &\"/K$;\xE1/B$;\x90.\" &\"/4$;\xE1/+$8,:*,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u013B &%;,/\xA2#;\xE1/\x99$;\u014F.\" &\"/\x8B$;\xE1/\x82$;\u0151.\" &\"/t$;\xE1/k$;\u013F/b$;\xE1/Y$;1.\" &\"/K$;\xE1/B$;\x90.\" &\"/4$;\xE1/+$8,:+,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAC &%;\xBD/\xA2#;\xE1/\x99$;\u014F.\" &\"/\x8B$;\xE1/\x82$;\u0151.\" &\"/t$;\xE1/k$;\u013E/b$;\xE1/Y$;1.\" &\"/K$;\xE1/B$;\x90.\" &\"/4$;\xE1/+$8,:,,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0122/' 8!:-!! )./ &%;\xBD/' 8!:.!! )"),
          peg$decode("%;1.\" &\"/S#;\xE1/J$;\x90.\" &\"/<$;\xE1/3$;2/*$8%:/%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xE1/g$;\x90.\" &\"/Y$;\xE1/P$20\"\"6071.\" &\"/<$;\xE1/3$;\x92/*$8':2'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;1.\" &\"/S#;\xE1/J$;\x90.\" &\"/<$;\xE1/3$;2/*$8%:3%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xE1/g$;\x90.\" &\"/Y$;\xE1/P$20\"\"6071.\" &\"/<$;\xE1/3$;\x92/*$8':3'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x90.\" &\"/Z#;\xE1/Q$;\xF1.) &;\xEE.# &;\xED/<$;\xE1/3$;\x92/*$8%:4%#$\" )(%'#($'#(#'#(\"'#&'#.b &%;1.\" &\"/S#;\xE1/J$;\x90.\" &\"/<$;\xE1/3$;2/*$8%:5%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;n/I#;\xE1/@$;z.\" &\"/2$;\xE1/)$8$:6$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0110/\x8D#;\xE1/\x84$$%;0/:#;\u015E/1$;\xE1/($8#:7#!\")(#'#(\"'#&'#0D*%;0/:#;\u015E/1$;\xE1/($8#:7#!\")(#'#(\"'#&'#&/2$;0/)$8$:8$\"! )($'#(#'#(\"'#&'#.M &%;\u0110/C#;\xE1/:$;z/1$;\xE1/($8$:9$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE1/j#;\xE4/a$;\u0160/X$;\xE4/O$;3/F$;\u0161/=$%<;\xE4=/##&'!&&#/($8':$'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.h &%;\xE1/^#2:\"\"6:7;/O$;\xE1/F$;5/=$%<;\xE4=/##&'!&&#/($8%:<%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;4/&#0#*;4&&&#/' 8!:=!! )"),
          peg$decode("%;5/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode(";6.; &;D.5 &;B./ &;C.) &;A.# &;P"),
          peg$decode("%;\xBE/\u0610#9:> ! -\"\"&!&#/\u05FC$;\xE1/\u05F3$%9:? !#-\"\"&!&#/2#;8/)$8\":@\"\"% )(\"'#&'#.\u0197 &%9:A !#-\"\"&!&#/2#;9/)$8\":@\"\"% )(\"'#&'#.\u016D &%9:B !#-\"\"&!&#/2#;>/)$8\":@\"\"% )(\"'#&'#.\u0143 &%9:C !#-\"\"&!&#/2#;7/)$8\":@\"\"% )(\"'#&'#.\u0119 &%9:D !#-\"\"&!&#/2#;:/)$8\":@\"\"% )(\"'#&'#.\xEF &%9:E !#-\"\"&!&#/2#;;/)$8\":@\"\"% )(\"'#&'#.\xC5 &%9:F !#-\"\"&!&#/2#;</)$8\":@\"\"% )(\"'#&'#.\x9B &%9:G !#-\"\"&!&#/2#;=/)$8\":@\"\"% )(\"'#&'#.q &%9:H !#-\"\"&!&#/2#;?/)$8\":@\"\"% )(\"'#&'#.G &%9:I !#-\"\"&!&#/2#;@/)$8\":@\"\"% )(\"'#&'#/\u044C$$%;\xE4/\u0222#;\xBD/\u0219$9:J #'$ -\"\"&!&#/\u0203$;\xE1/\u01FA$%9:K #*'#-\"\"&!&#/4#;8/+$8\":L\"$,)% )(\"'#&'#.\u01BB &%9:M #*'#-\"\"&!&#/4#;9/+$8\":L\"$,)% )(\"'#&'#.\u018D &%9:N #*'#-\"\"&!&#/4#;>/+$8\":L\"$,)% )(\"'#&'#.\u015F &%9:O #*'#-\"\"&!&#/4#;7/+$8\":L\"$,)% )(\"'#&'#.\u0131 &%9:P #*'#-\"\"&!&#/4#;:/+$8\":L\"$,)% )(\"'#&'#.\u0103 &%9:Q #*'#-\"\"&!&#/4#;;/+$8\":L\"$,)% )(\"'#&'#.\xD5 &%9:R #*'#-\"\"&!&#/4#;</+$8\":L\"$,)% )(\"'#&'#.\xA7 &%9:S #*'#-\"\"&!&#/4#;=/+$8\":L\"$,)% )(\"'#&'#.y &%9:T #*'#-\"\"&!&#/4#;?/+$8\":L\"$,)% )(\"'#&'#.K &%9:U #*'#-\"\"&!&#/4#;@/+$8\":L\"$,)% )(\"'#&'#/+$8%:V%$*'# )(%'#($'#(#'#(\"'#&'#0\u022C*%;\xE4/\u0222#;\xBD/\u0219$9:J #'$ -\"\"&!&#/\u0203$;\xE1/\u01FA$%9:K #*'#-\"\"&!&#/4#;8/+$8\":L\"$,)% )(\"'#&'#.\u01BB &%9:M #*'#-\"\"&!&#/4#;9/+$8\":L\"$,)% )(\"'#&'#.\u018D &%9:N #*'#-\"\"&!&#/4#;>/+$8\":L\"$,)% )(\"'#&'#.\u015F &%9:O #*'#-\"\"&!&#/4#;7/+$8\":L\"$,)% )(\"'#&'#.\u0131 &%9:P #*'#-\"\"&!&#/4#;:/+$8\":L\"$,)% )(\"'#&'#.\u0103 &%9:Q #*'#-\"\"&!&#/4#;;/+$8\":L\"$,)% )(\"'#&'#.\xD5 &%9:R #*'#-\"\"&!&#/4#;</+$8\":L\"$,)% )(\"'#&'#.\xA7 &%9:S #*'#-\"\"&!&#/4#;=/+$8\":L\"$,)% )(\"'#&'#.y &%9:T #*'#-\"\"&!&#/4#;?/+$8\":L\"$,)% )(\"'#&'#.K &%9:U #*'#-\"\"&!&#/4#;@/+$8\":L\"$,)% )(\"'#&'#/+$8%:V%$*'# )(%'#($'#(#'#(\"'#&'#&/*$8%:W%#$! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;u/S#;\xE1/J$;\x90.\" &\"/<$;\xE1/3$;2/*$8%:X%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x92/S#;\xE1/J$;\x90.\" &\"/<$;\xE1/3$;2/*$8%:Y%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x92/I#;\xE1/@$;\x90.\" &\"/2$;\xE1/)$8$:Z$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x92/M#;\xE1/D$;\u0154/;$;\xE0/2$;\xB8/)$8%:[%\"$ )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x90.\" &\"/;#;\xE1/2$;2/)$8#:\\#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xE1/1#;2/($8\":]\"! )(\"'#&'#"),
          peg$decode("%;u/' 8!:^!! )"),
          peg$decode("%;\xE1/D#;u/;$;\xE1/2$;2/)$8$:_$\"\" )($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC1/' 8!:`!! )"),
          peg$decode("%;\xE1/<#%<;\xE4=/##&'!&&#/'$8\":a\" )(\"'#&'#"),
          peg$decode("%;\u0139/0#;\xE1/'$8\":b\" )(\"'#&'#.: &%;\u0131/0#;\xE1/'$8\":c\" )(\"'#&'#"),
          peg$decode("%;\u0157/S#;\xE0/J$;\x92/A$;\x8E.\" &\"/3$;2/*$8%:d%#\"! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0147/M#;\xE0/D$;S/;$;\xE0/2$;S/)$8%:e%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0143/:#;\xE1/1$;E/($8#:f#! )(#'#(\"'#&'#.\u016A &%;\u0143/^#;\xE0/U$;\xE4/L$;\u0160/C$;\xE4/:$;G/1$;\u0161/($8':g'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u011F &%;\u0129/:#;\xE1/1$;I/($8#:f#! )(#'#(\"'#&'#.\xF8 &%;\u0129/^#;\xE0/U$;\xE4/L$;\u0160/C$;\xE4/:$;K/1$;\u0161/($8':g'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAD &%;\u011B/C#;\xE1/:$;W/1$;\xE1/($8$:h$!!)($'#(#'#(\"'#&'#.} &%;\u0103/C#;\xE1/:$;W/1$;\xE1/($8$:i$!!)($'#(#'#(\"'#&'#.M &%;\u0105/C#;\xE1/:$;W/1$;\xE1/($8$:j$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;H/\xA4#;\xE1/\x9B$$%2k\"\"6k7l/D#;\xE1/;$;H/2$;\xE1/)$8$:m$\"'!)($'#(#'#(\"'#&'#0T*%2k\"\"6k7l/D#;\xE1/;$;H/2$;\xE1/)$8$:m$\"'!)($'#(#'#(\"'#&'#&/)$8#:n#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;E/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;F/&#0#*;F&&&#/' 8!:o!! )"),
          peg$decode("%;T/S#;\xE1/J$2p\"\"6p7q/;$;\xE1/2$;\x92/)$8%:r%\"$ )(%'#($'#(#'#(\"'#&'#.\xF5 &%;T/N#;\xE1/E$;O/<$;\xE1/3$;\x92/*$8%:s%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;Q/\x88#;\xE1/\x7F$;\u014F.\" &\".S &%<;\u0113=/##&'!&&#.A &%<;\u015A=/##&'!&&#./ &%<;\xFB=/##&'!&&#/;$;\xE1/2$;\x92/)$8%:t%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;T/;#;\xE1/2$;N/)$8#:u#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;L/\xA4#;\xE1/\x9B$$%2k\"\"6k7l/D#;\xE1/;$;L/2$;\xE1/)$8$:m$\"'!)($'#(#'#(\"'#&'#0T*%2k\"\"6k7l/D#;\xE1/;$;L/2$;\xE1/)$8$:m$\"'!)($'#(#'#(\"'#&'#&/)$8#:n#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;I/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;J/&#0#*;J&&&#/' 8!:o!! )"),
          peg$decode("%;T/N#;\xE1/E$;O/<$;\xE1/3$;\x92/*$8%:v%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;Q/\x88#;\xE1/\x7F$;\u014F.\" &\".S &%<;\u0113=/##&'!&&#.A &%<;\u015A=/##&'!&&#./ &%<;\xFB=/##&'!&&#/;$;\xE1/2$;\x92/)$8%:w%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;T/;#;\xE1/2$;N/)$8#:x#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\u0129/0#;\xE0/'$8\":y\" )(\"'#&'#"),
          peg$decode("2p\"\"6p7q./ &;\u0105.) &;\u0134.# &;\u0133"),
          peg$decode("2z\"\"6z7{.\xE9 &2p\"\"6p7q.\xDD &2|\"\"6|7}.\xD1 &2~\"\"6~7\x7F.\xC5 &2\x80\"\"6\x807\x81.\xB9 &2\x82\"\"6\x827\x83.\xAD &2\x84\"\"6\x847\x85.\xA1 &2\x86\"\"6\x867\x87.\x95 &2\x88\"\"6\x887\x89.\x89 &;\xF0.\x83 &;\u013B.} &;\u0159.w &;\xEF.q &;\u013A.k &;\u0158.e &;\u012F._ &;\u0132.Y &2\x8A\"\"6\x8A7\x8B.M &2\x8C\"\"6\x8C7\x8D.A &;\u0153.; &;\u0105.5 &;\u0104./ &2\x8E\"\"6\x8E7\x8F.# &;\xFE"),
          peg$decode("%;\xC2/' 8!:\x90!! ).A &%;\xC1/' 8!:\x91!! )./ &%;\xC4/' 8!:\x92!! )"),
          peg$decode("%;S/B#$;R0#*;R&/2$;\xE1/)$8#:\x93#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%2k\"\"6k7l/:#;\xE1/1$;S/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;Z/' 8!:\x94!! )"),
          peg$decode("%;W/9#$;U0#*;U&/)$8\":\x93\"\"! )(\"'#&'#"),
          peg$decode("%2k\"\"6k7l/:#;\xE1/1$;W/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;r/' 8!:\x95!! )"),
          peg$decode("%;[/' 8!:\x95!! )"),
          peg$decode("%;[/' 8!:\x96!! )"),
          peg$decode("%;\\/' 8!:\x97!! )"),
          peg$decode(";d.G &;].A &;_.; &;^.5 &;c./ &;a.) &;`.# &;e"),
          peg$decode(";d.G &;].A &;_.; &;^.5 &;c./ &;b.) &;`.# &;e"),
          peg$decode(";[.\xAD &%;\u0149/C#;\xE0/:$;-/1$;\xE1/($8$:\x98$!!)($'#(#'#(\"'#&'#.} &%;\u013F/C#;\xE0/:$;./1$;\xE1/($8$:\x98$!!)($'#(#'#(\"'#&'#.M &%;\u013E/C#;\xE0/:$;//1$;\xE1/($8$:\x98$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0148/0#;\xE1/'$8\":\x99\" )(\"'#&'#"),
          peg$decode("%;q/Q#$;g.) &;j.# &;h0/*;g.) &;j.# &;h&/)$8\":\x9A\"\"! )(\"'#&'#"),
          peg$decode("%;i/Q#$;g.) &;j.# &;h0/*;g.) &;j.# &;h&/)$8\":\x9A\"\"! )(\"'#&'#"),
          peg$decode("%;p/Q#$;g.) &;j.# &;h0/*;g.) &;j.# &;h&/)$8\":\x9A\"\"! )(\"'#&'#"),
          peg$decode("%;l/Q#$;g.) &;j.# &;h0/*;g.) &;j.# &;h&/)$8\":\x9A\"\"! )(\"'#&'#"),
          peg$decode("%;m/Q#$;g.) &;j.# &;h0/*;g.) &;j.# &;h&/)$8\":\x9A\"\"! )(\"'#&'#"),
          peg$decode("%;n/Q#$;g.) &;j.# &;h0/*;g.) &;j.# &;h&/)$8\":\x9B\"\"! )(\"'#&'#"),
          peg$decode("%;f/Q#$;g.) &;j.# &;h0/*;g.) &;j.# &;h&/)$8\":\x9B\"\"! )(\"'#&'#"),
          peg$decode("%;k.# &;o/Q#$;g.) &;j.# &;h0/*;g.) &;j.# &;h&/)$8\":\x9B\"\"! )(\"'#&'#"),
          peg$decode("%;\u0123/0#;\xE0/'$8\":\x9C\" )(\"'#&'#.\xCB &%;\u0125/0#;\xE0/'$8\":\x9D\" )(\"'#&'#.\xAE &%;\u0101/0#;\xE0/'$8\":\x9E\" )(\"'#&'#.\x91 &%;\u014D/0#;\xE0/'$8\":\x9F\" )(\"'#&'#.t &%;\u0146/0#;\xE0/'$8\":\xA0\" )(\"'#&'#.W &%;\u0142/0#;\xE0/'$8\":\xA1\" )(\"'#&'#.: &%;\u010E/0#;\xE0/'$8\":\xA2\" )(\"'#&'#"),
          peg$decode("%;\u015B/1#;\xBE/($8\":\xA3\"! )(\"'#&'#.J &%2\xA4\"\"6\xA47\xA5/:#;\xE0/1$;\xBE/($8#:\xA3#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0163/Z#;\xE1/Q$;u.\" &\"/C$;\xE1/:$;\u0164/1$;\xE1/($8&:\xA6&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015B/F#%<;\u015B=.##&&!&'#/1$;\xBE/($8#:\xA7#! )(#'#(\"'#&'#.d &%;\u015B/1#;\xD4/($8\":\xA8\"! )(\"'#&'#.F &%;\u015B/<#%<;\u015B=.##&&!&'#/'$8\":\xA9\" )(\"'#&'#"),
          peg$decode("%2\xAA\"\"6\xAA7\xAB/R#;\xE1/I$;\x92/@$;\xE1/7$2\xAC\"\"6\xAC7\xAD/($8%:\xAE%!\")(%'#($'#(#'#(\"'#&'#.e &%2\xAF\"\"6\xAF7\xB0/1#;V/($8\":\xB1\"! )(\"'#&'#.A &%2\xB2\"\"6\xB27\xB3/1#;\xD4/($8\":\xAE\"! )(\"'#&'#"),
          peg$decode("%;\u0163/L#;\xE1/C$;\x92/:$;\xE1/1$;\u0164/($8%:\xB4%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xBD/' 8!:\xB5!! )"),
          peg$decode("%;\xBD/' 8!:\xB6!! )"),
          peg$decode("%2\xB7\"\"6\xB77\xB8/& 8!:\xB9! ).u &%;\xF2/0#;\xE1/'$8\":\xB9\" )(\"'#&'#.X &%2\xBA\"\"6\xBA7\xBB/1#;\xBE/($8\":\xBC\"! )(\"'#&'#.4 &%2\xBA\"\"6\xBA7\xBB/& 8!:\xBD! )"),
          peg$decode("%;\xBF/' 8!:\xBE!! )"),
          peg$decode("%2\xBF\"\"6\xBF7\xC0/1#;\xBE/($8\":\xC1\"! )(\"'#&'#"),
          peg$decode("%2\xC2\"\"6\xC27\xC3/1#;\xBE/($8\":\xC4\"! )(\"'#&'#.\xB3 &%;\u012C/:#;\xE0/1$;\xBE/($8#:\xC4#! )(#'#(\"'#&'#.\x8C &%2\xC5\"\"6\xC57\xC6/1#;\xBE/($8\":\xC7\"! )(\"'#&'#.h &%2\xC5\"\"6\xC57\xC6/& 8!:\xC8! ).Q &%2\xC2\"\"6\xC27\xC3/& 8!:\xC9! ).: &%;\u012B/0#;\xE1/'$8\":\xC9\" )(\"'#&'#"),
          peg$decode(";f.Y &;m.S &;n.M &;q.G &;i.A &%;\xCA/' 8!:\x98!! )./ &%;\xD7/' 8!:\x98!! )"),
          peg$decode("%;\u0115/V#;\xE1/M$;\xBD/D$;\xE1/;$;v/2$;\xE4/)$8&:\xCA&\"#!)(&'#(%'#($'#(#'#(\"'#&'#.} &%;\u0115/C#;\xE1/:$;x/1$;\xE4/($8$:\xCB$!!)($'#(#'#(\"'#&'#.M &%;\u0119/C#;\xE1/:$;x/1$;\xE4/($8$:\xCC$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xD4/N#;\u015B/E$;\xD4/<$;\u015B/3$;\xD4/*$8%:\xCD%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015F/^#;\xE1/U$;\xE4/L$;\u0160/C$;\xE4/:$;\x8D/1$;\u0161/($8':\xCE'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xD1 &%;\u015F/^#;\xE1/U$;\xE4/L$;\u0160/C$;\xE4/:$;\x83/1$;\u0161/($8':\xCF'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x86 &%;\x81/<#20\"\"6071.\" &\"/($8\":\xCF\"!!)(\"'#&'#.] &%;\x8B/<#20\"\"6071.\" &\"/($8\":\xD0\"!!)(\"'#&'#.4 &%20\"\"6071/& 8!:\xD1! )"),
          peg$decode("%;\xE1/1#;\x92/($8\":\xD2\"! )(\"'#&'#"),
          peg$decode("%;\xE1/9#;\u010A/0$;\xE1/'$8#:\xD3# )(#'#(\"'#&'#.\u02EB &%;\xE1/9#;\xF8/0$;\xE1/'$8#:\xD4# )(#'#(\"'#&'#.\u02C5 &%;\xE1/c#;\u0128/Z$;\xE1/Q$;}/H$;\xE1/?$;\u015D.\" &\"/1$;\xE1/($8':\xD5'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0275 &%;\xE1/g#;\u0128/^$;\xE1/U$;\xE4/L$;\u0160/C$;\xE4/:$;\x7F/1$;\u0161/($8(:\xD5(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0221 &%;\xE1/c#;\u014C/Z$;\xE1/Q$;\x86/H$;\xE1/?$;\u015D.\" &\"/1$;\xE1/($8':\xD6'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01D1 &%;\xE1/g#;\u014C/^$;\xE1/U$;\xE4/L$;\u0160/C$;\xE4/:$;\x88/1$;\u0161/($8(:\xD7(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u017D &%;\xE1/i#;\u015F.# &;\u0111/Z$;\xE1/Q$;\x8B/H$;\xE1/?$;\u015D.\" &\"/1$;\xE1/($8':\xD8'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0127 &%;\xE1/m#;\u015F.# &;\u0111/^$;\xE1/U$;\xE4/L$;\u0160/C$;\xE4/:$;\x8D/1$;\u0161/($8(:\xD9(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xCD &%;\xE1/i#;\u015F.# &;\xF3/Z$;\xE1/Q$;\x81/H$;\xE1/?$;\u015D.\" &\"/1$;\xE1/($8':\xD5'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xE1/m#;\u015F.# &;\xF3/^$;\xE1/U$;\xE4/L$;\u0160/C$;\xE4/:$;\x83/1$;\u0161/($8(:\xD5(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE1/i#;\u015F.# &;\u0111/Z$;\xE1/Q$;\x8B/H$;\xE1/?$;\u015D.\" &\"/1$;\xE1/($8':\xD8'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xE1/m#;\u015F.# &;\u0111/^$;\xE1/U$;\xE4/L$;\u0160/C$;\xE4/:$;\x8D/1$;\u0161/($8(:\xD9(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE1/i#;\u015F.# &;\u0128/Z$;\xE1/Q$;}/H$;\xE1/?$;\u015D.\" &\"/1$;\xE1/($8':$'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xE1/m#;\u015F.# &;\u0128/^$;\xE1/U$;\xE4/L$;\u0160/C$;\xE4/:$;\x7F/1$;\u0161/($8(:$(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0162/:#;\xE1/1$;\x92/($8#:$#! )(#'#(\"'#&'#._ &%;w/' 8!:\xDA!! ).M &;\xDA.G &;\xCA.A &;\u013C.; &;\u013D.5 &;\u0152./ &;\u0136.) &;\xD7.# &;{"),
          peg$decode("%$4\xDB\"\"5!7\xDC/,#0)*4\xDB\"\"5!7\xDC&&&#/m#%<2\xDD\"\"6\xDD7\xDE.G &2k\"\"6k7l.; &2\xDF\"\"6\xDF7\xE0./ &20\"\"6071.# &;\xE4=/##&'!&&#/($8\":\xE1\"!!)(\"'#&'#"),
          peg$decode("%;z/C#;\xE1/:$;\u015E/1$;\xE1/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;|0#*;|&/2#;z/)$8\":\xE2\"\"! )(\"'#&'#"),
          peg$decode("%%<;\u0161=.##&&!&'#/:#;}/1$;\xE4/($8#:$#!!)(#'#(\"'#&'#"),
          peg$decode("%$;~/&#0#*;~&&&#/' 8!:o!! )"),
          peg$decode("%;\x92/C#;\xE1/:$;\u015E/1$;\xE1/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x800#*;\x80&/2#;\x92/)$8\":\xE2\"\"! )(\"'#&'#"),
          peg$decode("%;\x81/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x82/&#0#*;\x82&&&#/' 8!:o!! )"),
          peg$decode("%;\u015C/:#;\xBC/1$;\xE1/($8#:\xE3#!!)(#'#(\"'#&'#.N &%;\xBC/D#;\xE0/;$;z/2$;\xE1/)$8$:\xE4$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x84/C#;\xE1/:$;\u015E/1$;\xE1/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x850#*;\x85&/2#;\x84/)$8\":\xE5\"\"! )(\"'#&'#"),
          peg$decode("%;\x86/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x87/&#0#*;\x87&&&#/' 8!:o!! )"),
          peg$decode("%;\u015C/:#;\xBC/1$;\xE1/($8#:\xE3#!!)(#'#(\"'#&'#.T &%;\xBC/J#;\xE0/A$;\x92.# &;\u010B/2$;\xE1/)$8$:\xE4$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x89/C#;\xE1/:$;\u015E/1$;\xE1/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x8A0#*;\x8A&/2#;\x89/)$8\":\xE6\"\"! )(\"'#&'#"),
          peg$decode("%;\x8B/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x8C/&#0#*;\x8C&&&#/' 8!:o!! )"),
          peg$decode("%;\xF4/C#;\xE1/:$;\x91/1$;\xE1/($8$:\xE7$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x90/' 8!:\xE8!! )"),
          peg$decode("%;\xF4.# &;\u0115/\xA8#;\xE1/\x9F$$%;\x91/C#;\xE1/:$;\u015E/1$;\xE1/($8$:\xE9$!#)($'#(#'#(\"'#&'#0M*%;\x91/C#;\xE1/:$;\u015E/1$;\xE1/($8$:\xE9$!#)($'#(#'#(\"'#&'#&/;$;\xE1/2$;m/)$8%:\xEA%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xBD/' 8!:\xEB!! )"),
          peg$decode(";\x93"),
          peg$decode("%;\xAE/t#;\xE1/k$$%;\x94/2#;\xE1/)$8\":\xEC\"\"%!)(\"'#&'#0<*%;\x94/2#;\xE1/)$8\":\xEC\"\"%!)(\"'#&'#&/)$8#:\xED#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\x9C.e &;\x9E._ &;\xA0.Y &;\x96.S &;\x97.M &;\x95.G &;\x99.A &;\xA4.; &;\xA6.5 &;\xA8./ &;\xA2.) &;\x9A.# &;\x98"),
          peg$decode("%;\u0121/& 8!:\xEE! )"),
          peg$decode("%;\u0124/& 8!:\xEF! )"),
          peg$decode("%;\u0155/& 8!:\xF0! )"),
          peg$decode("%;\xFE/:#;\xE0/1$;\x92/($8#:\xF1#! )(#'#(\"'#&'#"),
          peg$decode("%;\xFC/& 8!:\xF2! ).? &%;\u010C/& 8!:\xF3! ).. &%;\u010D/& 8!:\xF4! )"),
          peg$decode("%;\xF9/:#;\xE0/1$;\x9B/($8#:\xF5#! )(#'#(\"'#&'#"),
          peg$decode("%;\x8F.\" &\"/2#;2/)$8\":\xF6\"\"! )(\"'#&'#.D &%;\u0154/:#;\xE0/1$;\xB8/($8#:\xF7#! )(#'#(\"'#&'#"),
          peg$decode("%;\u014B/:#;\xE0/1$;\x9D/($8#:\xF5#! )(#'#(\"'#&'#"),
          peg$decode("%;\x92/' 8!:\xF8!! ).\xAA &%;\u0163/U#;\xE1/L$;\x92/C$;\xE1/:$;\u0164/1$;\xE1/($8&:\xF8&!#)(&'#(%'#($'#(#'#(\"'#&'#.h &%;\x8F.\" &\"/2#;2/)$8\":\xF9\"\"! )(\"'#&'#.D &%;\u0154/:#;\xE0/1$;\xB8/($8#:\xFA#! )(#'#(\"'#&'#"),
          peg$decode("%;\xF6/:#;\xE0/1$;\x9F/($8#:\xF5#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0163/U#;\xE1/L$;\x92/C$;\xE1/:$;\u0164/1$;\xE1/($8&:\xFB&!#)(&'#(%'#($'#(#'#(\"'#&'#.z &%;\x92/' 8!:\xFB!! ).h &%;\x8F.\" &\"/2#;2/)$8\":\xFC\"\"! )(\"'#&'#.D &%;\u0154/:#;\xE0/1$;\xB8/($8#:\xFD#! )(#'#(\"'#&'#"),
          peg$decode("%;\u011A/:#;\xE0/1$;\xA1/($8#:\xF5#! )(#'#(\"'#&'#"),
          peg$decode("%;\xC0/A#;\x8F.\" &\"/3$;2/*$8#:\xFE##\"! )(#'#(\"'#&'#.m &%;\xC0/2#;\x92/)$8\":\xFF\"\"! )(\"'#&'#.N &%;\xC0/D#;\u0154/;$;\xE0/2$;\xB8/)$8$:\u0100$\"# )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0116/:#;\xE0/1$;\xA3/($8#:\xF5#! )(#'#(\"'#&'#"),
          peg$decode("%;\x92/' 8!:\u0101!! ).h &%;\x8F.\" &\"/2#;2/)$8\":\u0102\"\"! )(\"'#&'#.D &%;\u0154/:#;\xE0/1$;\xB8/($8#:\u0103#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0143/:#;\xE0/1$;\xA5/($8#:\xF5#! )(#'#(\"'#&'#"),
          peg$decode("%;\x92/' 8!:\u0104!! ).h &%;\x8F.\" &\"/2#;2/)$8\":\u0105\"\"! )(\"'#&'#.D &%;\u0154/:#;\xE0/1$;\xB8/($8#:\u0106#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0138/:#;\xE0/1$;\xA7/($8#:\xF5#! )(#'#(\"'#&'#"),
          peg$decode("%;\x92/' 8!:\u0107!! ).h &%;\x8F.\" &\"/2#;2/)$8\":\u0108\"\"! )(\"'#&'#.D &%;\u0154/:#;\xE0/1$;\xB8/($8#:\u0109#! )(#'#(\"'#&'#"),
          peg$decode("%;\xE1/k#$;\xAA./ &;\xAB.) &;\xAC.# &;\xA9/8#05*;\xAA./ &;\xAB.) &;\xAC.# &;\xA9&&&#/1$;\xE1/($8#:\u010A#!!)(#'#(\"'#&'#"),
          peg$decode("%;\u0112/0#;\xE1/'$8\":\u010B\" )(\"'#&'#.\xDC &%;\u0126/0#;\xE1/'$8\":\u010C\" )(\"'#&'#.\xBF &%;\u0127/h#;\xE1/_$;\xAE/V$;\xE1/M$;\u015E/D$;\xE1/;$;\xAE/2$;\xE1/)$8(:\u010D(\"%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.j &%;\u0127/C#;\xE1/:$;\xAE/1$;\xE1/($8$:\u010E$!!)($'#(#'#(\"'#&'#.: &%;\u0100/0#;\xE1/'$8\":\u010F\" )(\"'#&'#"),
          peg$decode("%;\u015C/:#;\xBC/1$;\xE1/($8#:\u0110#!!)(#'#(\"'#&'#.M &%;\u015A/C#;\u015C/:$;\xBC/1$;\xE1/($8$:\u0111$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0116/C#;\xE1/:$;\xAE/1$;\xE1/($8$:\u0112$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xF9/C#;\xE1/:$;\xAD/1$;\xE1/($8$:\u0113$!!)($'#(#'#(\"'#&'#.\xBC &%;\xF9/R#;\xE1/I$;\xAE/@$;\xAD.\" &\"/2$;\xE1/)$8%:\u0114%\"\"!)(%'#($'#(#'#(\"'#&'#.} &%;\u0117/C#;\xE1/:$;\xAE/1$;\xE1/($8$:\u0115$!!)($'#(#'#(\"'#&'#.M &%;\u012A/C#;\xE1/:$;\xAE/1$;\xE1/($8$:\u0116$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xF5/0#;\xE1/'$8\":\u0117\" )(\"'#&'#.: &%;\u0106/0#;\xE1/'$8\":\u0118\" )(\"'#&'#"),
          peg$decode("%;\xB0/N#;\xE1/E$;\xAF/<$;\xE1/3$;\xAE/*$8%:\u0119%#$\" )(%'#($'#(#'#(\"'#&'#.\u0154 &%;\xB0/M#;\xE1/D$;\u0158/;$;\xE1/2$;\xAE/)$8%:\u011A%\"$ )(%'#($'#(#'#(\"'#&'#.\u011A &%;\xB0/M#;\xE1/D$;\u012F/;$;\xE1/2$;\xAE/)$8%:\u011B%\"$ )(%'#($'#(#'#(\"'#&'#.\xE0 &%;\xB0/M#;\xE1/D$;\u0132/;$;\xE1/2$;\xAE/)$8%:\u011C%\"$ )(%'#($'#(#'#(\"'#&'#.\xA6 &%;\xB0/~#;\xE1/u$2\u011D\"\"6\u011D7\u011E/f$;\xE1/]$;\xAE/T$;\xE1/K$2\u011F\"\"6\u011F7\u0120/<$;\xE1/3$;\xAE/*$8):\u0121)#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xB0/1#;\xE1/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xEF/0#;\xE0/'$8\":\u0122\" )(\"'#&'#.: &%;\u013A/0#;\xE0/'$8\":\u0123\" )(\"'#&'#"),
          peg$decode("%;\xB3/N#;\xE1/E$;\xB2/<$;\xE1/3$;\xB0/*$8%:\u0124%#$\" )(%'#($'#(#'#(\"'#&'#.v &%;\xB3/N#;\xE1/E$;\xB1/<$;\xE1/3$;\xB0/*$8%:\u0119%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xB3/1#;\xE1/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%2\u0125\"\"6\u01257\u0126/& 8!:\u0127! ).\u0106 &%2\u0128\"\"6\u01287\u0129/B#%<2\u0128\"\"6\u01287\u0129=.##&&!&'#/'$8\":\u012A\" )(\"'#&'#.\xD1 &%2\u012B\"\"6\u012B7\u012C/& 8!:\u012D! ).\xBA &%;\u011D/0#;\xE0/'$8\":\u012E\" )(\"'#&'#.\x9D &%;\u011F/0#;\xE0/'$8\":\u012F\" )(\"'#&'#.\x80 &%2\u0130\"\"6\u01307\u0131/& 8!:\u0132! ).i &%2\u0133\"\"6\u01337\u0134/B#%<2\u0133\"\"6\u01337\u0134=.##&&!&'#/'$8\":\u0135\" )(\"'#&'#.4 &%2\u0136\"\"6\u01367\u0137/& 8!:\u0138! )"),
          peg$decode("%2\x8A\"\"6\x8A7\x8B/& 8!:\u0139! ).K &%2\x8C\"\"6\x8C7\x8D/& 8!:\u013A! ).4 &%2\u013B\"\"6\u013B7\u013C/& 8!:\u013D! )"),
          peg$decode("%;\xB5/N#;\xE1/E$;\xB4/<$;\xE1/3$;\xB3/*$8%:\u0119%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xB5/1#;\xE1/($8\":$\"!!)(\"'#&'#"),
          peg$decode("2z\"\"6z7{.\x80 &2p\"\"6p7q.t &%;\u013B/0#;\xE0/'$8\":\u013E\" )(\"'#&'#.W &%;\xF0/0#;\xE0/'$8\":\u013F\" )(\"'#&'#.: &%;\u0159/0#;\xE0/'$8\":\u0140\" )(\"'#&'#"),
          peg$decode(";\xB6.\u022A &%;\xB8/N#;\xE1/E$;\xB7/<$;\xE1/3$;\xB5/*$8%:\u0119%#$\" )(%'#($'#(#'#(\"'#&'#.\u01EF &%;\xB8/S#;\xE1/J$2|\"\"6|7}/;$;\xE1/2$;\xB5/)$8%:\u0141%\"$ )(%'#($'#(#'#(\"'#&'#.\u01AF &%;\xB8/e#;\xE1/\\$;\u0156/S$;\xE1/J$;\xB8/A$;\xE1/8$;u.\" &\"/*$8':\u0142'#&\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.\u015D &%;\xB8/M#;\xE1/D$;\u0153/;$;\xE0/2$;\xB5/)$8%:\u0143%\"$ )(%'#($'#(#'#(\"'#&'#.\u0123 &%;\xB8/M#;\xE1/D$;\u0141/;$;\xE0/2$;\xB5/)$8%:\u0144%\"$ )(%'#($'#(#'#(\"'#&'#.\xE9 &%;\xB8/M#;\xE1/D$;\u0105/;$;\xE0/2$;\xB5/)$8%:\u0145%\"$ )(%'#($'#(#'#(\"'#&'#.\xAF &%;\xB8/M#;\xE1/D$;\u0110/;$;\xE0/2$;\xB5/)$8%:\u0146%\"$ )(%'#($'#(#'#(\"'#&'#.u &%;\xB8/M#;\xE1/D$;\u0120/;$;\xE0/2$;\xB5/)$8%:\u0147%\"$ )(%'#($'#(#'#(\"'#&'#.; &%;\xB8/1#;\xE1/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xB8/M#;\xE1/D$;\u0104/;$;\xE1/2$;\xB5/)$8%:\u0148%\"$ )(%'#($'#(#'#(\"'#&'#.x &%;\xB8/n#;\xE1/e$2\x8E\"\"6\x8E7\x8F/V$%<2\x8E\"\"6\x8E7\x8F=.##&&!&'#/;$;\xE1/2$;\xB5/)$8&:\u0148&\"% )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2~\"\"6~7\x7F.Y &2\x80\"\"6\x807\x81.M &2\x82\"\"6\x827\x83.A &2\x88\"\"6\x887\x89.5 &2\x86\"\"6\x867\x87.) &2\x84\"\"6\x847\x85"),
          peg$decode("%2p\"\"6p7q/C#;\xE1/:$;\xB8/1$;\xE1/($8$:\u0149$!!)($'#(#'#(\"'#&'#.\u038B &%;\u0134/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u014A$!!)($'#(#'#(\"'#&'#.\u035B &%;\u0133/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u014B$!!)($'#(#'#(\"'#&'#.\u032B &%;\u0150/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u014C$!!)($'#(#'#(\"'#&'#.\u02FB &%;\u011E/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u014D$!!)($'#(#'#(\"'#&'#.\u02CB &%;\u0135/:#;\xE0/1$;\xB8/($8#:\u014E#! )(#'#(\"'#&'#.\u02A4 &%;\u010F/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u014F$!!)($'#(#'#(\"'#&'#.\u0274 &%;\xFD/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u0150$!!)($'#(#'#(\"'#&'#.\u0244 &%;\u0149/C#;\xE0/:$;-/1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u0214 &%;\u013F/C#;\xE0/:$;./1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u01E4 &%;\u013E/C#;\xE0/:$;//1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u01B4 &%;\u015A/H#;\xE0.\" &\"/:$;\xC1/1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u017F &%;\u0113/C#;\xE0/:$;\xC1/1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u014F &%;\xF7/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u0151$!!)($'#(#'#(\"'#&'#.\u011F &;\xC2.\u0119 &%2\x8E\"\"6\x8E7\x8F/:#;X/1$;\xE1/($8#:$#!!)(#'#(\"'#&'#.\xEC &%;W/1#;\xE1/($8\":$\"!!)(\"'#&'#.\xCE &;\xC4.\xC8 &%;w/' 8!:\xDA!! ).\xB6 &%;\xC7/1#;\xE1/($8\":\u0152\"!!)(\"'#&'#.\x98 &%2\u0153\"\"6\u01537\u0154/j#;\xE1/a$;\x92/X$;\xE1/O$;\x8E.\" &\"/A$2\xDF\"\"6\xDF7\xE0/2$;\xE1/)$8':\u0155'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xB9/1#;\xE1/($8\":\xF5\"!!)(\"'#&'#"),
          peg$decode("%2\x80\"\"6\x807\x81/\x7F#$;\xBA.# &;\xBB/,#0)*;\xBA.# &;\xBB&&&#/]$2\x80\"\"6\x807\x81/N$$4\u0156\"\"5!7\u01570)*4\u0156\"\"5!7\u0157&/2$;\xE1/)$8%:\u0158%\"#!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2\u0159\"\"6\u01597\u015A"),
          peg$decode("4\u015B\"\"5!7\u015C"),
          peg$decode("%;\xBD/C#%<4\u015D\"\"5!7\u015E=.##&&!&'#/($8\":$\"!!)(\"'#&'#.# &;\xD7"),
          peg$decode("%;\xBE/<#9:\u015F ! -\"\"&#&!/($8\":\u0160\"!!)(\"'#&'#"),
          peg$decode("%4\u0161\"\"5!7\u0162/E#$4\u0163\"\"5!7\u01640)*4\u0163\"\"5!7\u0164&/)$8\":\u0165\"\"! )(\"'#&'#"),
          peg$decode(";\xCA.] &;\xD7.W &;\u013C.Q &;\u013D.K &;\u0152.E &;\u0136.? &%;\u012E/& 8!:\u0166! ).. &%;\u0118/& 8!:\u0167! )"),
          peg$decode("%;\u0123/0#;\xE0/'$8\":\u0168\" )(\"'#&'#.# &;\x92"),
          peg$decode("%;\xC3/' 8!:\u0169!! )"),
          peg$decode("%;\xBD/b#2\u016A\"\"6\u016A7\u016B/S$;\xE1/J$;\xB8/A$;\xE1/8$;u.\" &\"/*$8&:\u016C&#%\" )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;Y/@#;\xE1/7$;u.\" &\"/)$8#:\u016D#\"\" )(#'#(\"'#&'#.; &%;Y/1#;\xE1/($8\":\u016E\"!!)(\"'#&'#"),
          peg$decode("%;\xFB/M#;\xE1/D$;\x92/;$;\xE1/2$;\xC5/)$8%:\u016F%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE4/Y#;\u0160/P$;\xE4/G$$;\xC6/&#0#*;\xC6&&&#/1$;\u0161/($8%:\u0170%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x94/:#;\xE1/1$;\xE4/($8#:\u0171#!\")(#'#(\"'#&'#.\\ &%;\xBD/R#;\xE1/I$;u.\" &\"/;$;\xE1/2$;\xE4/)$8%:\u0172%\"$\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0102/R#;\xE1/I$;\xB8/@$;\xE1/7$;u.\" &\"/)$8%:\u0173%\"\" )(%'#($'#(#'#(\"'#&'#.\x9B &%;\u0144/R#;\xE1/I$;\xB8/@$;\xE1/7$;u.\" &\"/)$8%:\u0174%\"\" )(%'#($'#(#'#(\"'#&'#.\\ &%;\u0130/R#;\xE1/I$;\xB8/@$;\xE1/7$;u.\" &\"/)$8%:\u0175%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%<;\xE4=/##&'!&&#.G &%<;\xE8=/##&'!&&#.5 &%<2\xDF\"\"6\xDF7\xE0=/##&'!&&#"),
          peg$decode("%$4\u0176\"\"5!7\u0177/,#0)*4\u0176\"\"5!7\u0177&&&#/' 8!:\u0178!! )"),
          peg$decode(";\xCD.S &;\xCE.M &;\xCC.G &%;\xCB/7#2\u0179\"\"6\u01797\u017A/($8\":\u017B\"!!)(\"'#&'#.# &;\xCB"),
          peg$decode(";\xD1./ &;\xD2.) &;\xD3.# &;\u012E"),
          peg$decode("%2\u017C\"\"6\u017C7\u017D/J#$4\u017E\"\"5!7\u017F/,#0)*4\u017E\"\"5!7\u017F&&&#/($8\":\u0180\"! )(\"'#&'#"),
          peg$decode("%2\u0181\"\"6\u01817\u0182/J#$4\u0183\"\"5!7\u0184/,#0)*4\u0183\"\"5!7\u0184&&&#/($8\":\u0185\"! )(\"'#&'#"),
          peg$decode("%2\u0186\"\"6\u01867\u0187/1#;\xCF/($8\":\u0160\"! )(\"'#&'#"),
          peg$decode("%$;\xD0/&#0#*;\xD0&&&#/' 8!:\u0188!! )"),
          peg$decode("%2\u0189\"\"6\u01897\u018A/& 8!:\u018B! ).\u01BE &%2\u018C\"\"6\u018C7\u018D/& 8!:\u018E! ).\u01A7 &%2\u018F\"\"6\u018F7\u0190/& 8!:\u0191! ).\u0190 &%2\u0192\"\"6\u01927\u0193/& 8!:\u0194! ).\u0179 &%2\u0195\"\"6\u01957\u0196/& 8!:\u0197! ).\u0162 &%2\u0198\"\"6\u01987\u0199/& 8!:\u019A! ).\u014B &%2\u019B\"\"6\u019B7\u019C/& 8!:\u019D! ).\u0134 &%2\u019E\"\"6\u019E7\u019F/& 8!:\u01A0! ).\u011D &%2\u01A1\"\"6\u01A17\u01A2/& 8!:\u01A3! ).\u0106 &%2\u01A4\"\"6\u01A47\u01A5/& 8!:\u01A6! ).\xEF &%2\u01A7\"\"6\u01A77\u01A8.) &2\u01A9\"\"6\u01A97\u01AA/& 8!:\u01AB! ).\xCC &%2\u01AC\"\"6\u01AC7\u01AD.) &2\u01AE\"\"6\u01AE7\u01AF/& 8!:\u01B0! ).\xA9 &%2\u01B1\"\"6\u01B17\u01B2.) &2\u01B3\"\"6\u01B37\u01B4/& 8!:\u01B5! ).\x86 &%2\u01B6\"\"6\u01B67\u01B7.) &2\u01B8\"\"6\u01B87\u01B9/& 8!:\u01BA! ).c &%2\u01BB\"\"6\u01BB7\u01BC.) &2\u01BD\"\"6\u01BD7\u01BE/& 8!:\u01BF! ).@ &%2\u01C0\"\"6\u01C07\u01C1.) &2\u01C2\"\"6\u01C27\u01C3/& 8!:\u01C4! )"),
          peg$decode("%;\xD2.# &;\xD3/A#2\u01BB\"\"6\u01BB7\u01BC/2$;\xD3/)$8#:\u01C5#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xD3/;#;\u015B/2$;\xD5/)$8#:\u01C6#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\xD4.A &%2p\"\"6p7q/1#;\xD4/($8\":\u01C7\"! )(\"'#&'#"),
          peg$decode("%$4\u01C8\"\"5!7\u01C9/,#0)*4\u01C8\"\"5!7\u01C9&&&#/' 8!:\u01CA!! )"),
          peg$decode("%$4\u01C8\"\"5!7\u01C9/,#0)*4\u01C8\"\"5!7\u01C9&&&#/' 8!:=!! )"),
          peg$decode("%2\u01CB\"\"6\u01CB7\u01CC/S#$;\xDD.# &;\xD80)*;\xDD.# &;\xD8&/7$2\u01CB\"\"6\u01CB7\u01CC/($8#:\u01CD#!!)(#'#(\"'#&'#.c &%2\u01CE\"\"6\u01CE7\u01CF/S#$;\xDD.# &;\xD90)*;\xDD.# &;\xD9&/7$2\u01CE\"\"6\u01CE7\u01CF/($8#:\u01CD#!!)(#'#(\"'#&'#"),
          peg$decode(";\xDA.\xE5 &%2\u01D0\"\"6\u01D07\u01D1/1#;\xDB/($8\":$\"! )(\"'#&'#.\xC1 &%2\u01CB\"\"6\u01CB7\u01CC/_#$;\xDD.) &;\xDE.# &;\xD80/*;\xDD.) &;\xDE.# &;\xD8&/7$2\u01CB\"\"6\u01CB7\u01CC/($8#:\u01CD#!!)(#'#(\"'#&'#.o &%2\u01CE\"\"6\u01CE7\u01CF/_#$;\xDD.) &;\xDE.# &;\xD90/*;\xDD.) &;\xDE.# &;\xD9&/7$2\u01CE\"\"6\u01CE7\u01CF/($8#:\u01CD#!!)(#'#(\"'#&'#"),
          peg$decode("%4\u01D2\"\"5!7\u01D3/' 8!:\u01D4!! )"),
          peg$decode("%4\u01D5\"\"5!7\u01D6/' 8!:\u01D4!! )"),
          peg$decode("%2\u01D7\"\"6\u01D77\u01D8/\xAA#;\xE1/\xA1$;\xE4/\x98$;\u0160/\x8F$;\xE4/\x86$$%;\xDB/1#;\xE5/($8\":\u01D9\"!!)(\"'#&'#0;*%;\xDB/1#;\xE5/($8\":\u01D9\"!!)(\"'#&'#&/F$;\u0161/=$%<;\xE4=/##&'!&&#/($8(:\u01DA(!\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%%<;\u0161=.##&&!&'#/e#$;\xDD.) &;\xDE.# &;\xDC0/*;\xDD.) &;\xDE.# &;\xDC&/=$%<;\xE4=/##&'!&&#/($8#:\u01CD#!!)(#'#(\"'#&'#"),
          peg$decode("%2\u01DB\"\"6\u01DB7\u01DC/& 8!:\u01DD! ).5 &%4\u01DE\"\"5!7\u01DF/' 8!:\u01D4!! )"),
          peg$decode("%2\xAF\"\"6\xAF7\xB0/6#2\u01CB\"\"6\u01CB7\u01CC/'$8\":\u01E0\" )(\"'#&'#.\u02AA &%2\xAF\"\"6\xAF7\xB0/6#2\u01CE\"\"6\u01CE7\u01CF/'$8\":\u01E1\" )(\"'#&'#.\u0281 &%2\xAF\"\"6\xAF7\xB0/6#2\xBA\"\"6\xBA7\xBB/'$8\":\u01E2\" )(\"'#&'#.\u0258 &%2\xAF\"\"6\xAF7\xB0/6#2\u01E3\"\"6\u01E37\u01E4/'$8\":\u01E5\" )(\"'#&'#.\u022F &%2\xAF\"\"6\xAF7\xB0/6#2\u01E6\"\"6\u01E67\u01E7/'$8\":\u01E8\" )(\"'#&'#.\u0206 &%2\xAF\"\"6\xAF7\xB0/6#2\u01E9\"\"6\u01E97\u01EA/'$8\":\u01EB\" )(\"'#&'#.\u01DD &%2\xAF\"\"6\xAF7\xB0/6#2\u01EC\"\"6\u01EC7\u01ED/'$8\":\u01EE\" )(\"'#&'#.\u01B4 &%2\xAF\"\"6\xAF7\xB0/6#2\u01EF\"\"6\u01EF7\u01F0/'$8\":\u01F1\" )(\"'#&'#.\u018B &%2\xAF\"\"6\xAF7\xB0/6#2\u01AC\"\"6\u01AC7\u01AD/'$8\":\u01F2\" )(\"'#&'#.\u0162 &%2\xAF\"\"6\xAF7\xB0/6#2\u01C0\"\"6\u01C07\u01C1/'$8\":\u01F3\" )(\"'#&'#.\u0139 &%2\xAF\"\"6\xAF7\xB0/V#2\u01F4\"\"6\u01F47\u01F5/G$4\u01F6\"\"5!7\u01F7/8$4\u01F6\"\"5!7\u01F7/)$8$:\u01F8$\"! )($'#(#'#(\"'#&'#.\xF0 &%2\xAF\"\"6\xAF7\xB0/v#2\u01F9\"\"6\u01F97\u01FA/g$4\u01F6\"\"5!7\u01F7/X$4\u01F6\"\"5!7\u01F7/I$4\u01F6\"\"5!7\u01F7/:$4\u01F6\"\"5!7\u01F7/+$8&:\u01FB&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\x87 &%2\xAF\"\"6\xAF7\xB0/w#2\u01F9\"\"6\u01F97\u01FA/h$2\u01FC\"\"6\u01FC7\u01FD/Y$$4\u01F6\"\"5!7\u01F7/,#0)*4\u01F6\"\"5!7\u01F7&&&#/7$2\u01FE\"\"6\u01FE7\u01FF/($8%:\u0200%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2\u0201\"\"6\u02017\u0202/I#;\xE1/@$;\x92/7$2\u01FE\"\"6\u01FE7\u01FF/($8$:\u0203$!!)($'#(#'#(\"'#&'#"),
          peg$decode("$;\xE2/&#0#*;\xE2&&&#"),
          peg$decode(";\xE2.5 &%<4\u0204\"\"5!7\u0205=/##&'!&&#"),
          peg$decode("$;\xE20#*;\xE2&"),
          peg$decode("%;\xE5/2#2\u0206\"\"6\u02067\u0207/#$+\")(\"'#&'#.) &4\u0208\"\"5!7\u0209"),
          peg$decode("$;\xE50#*;\xE5&"),
          peg$decode("$;\xE5/&#0#*;\xE5&&&#"),
          peg$decode("%2\u020A\"\"6\u020A7\u020B/H#$4\u020C\"\"5!7\u020D0)*4\u020C\"\"5!7\u020D&/,$;\xE6/#$+#)(#'#(\"'#&'#.# &;\xE6"),
          peg$decode("4\u020E\"\"5!7\u020F"),
          peg$decode("2\u01FC\"\"6\u01FC7\u01FD"),
          peg$decode("2\u01FE\"\"6\u01FE7\u01FF"),
          peg$decode("2\u0210\"\"6\u02107\u0211"),
          peg$decode("2\u0212\"\"6\u02127\u0213"),
          peg$decode("2\u0214\"\"6\u02147\u0215"),
          peg$decode("2\u0216\"\"6\u02167\u0217"),
          peg$decode("2\u0218\"\"6\u02187\u0219"),
          peg$decode("2\u021A\"\"6\u021A7\u021B"),
          peg$decode("2\u021C\"\"6\u021C7\u021D"),
          peg$decode("2\u021E\"\"6\u021E7\u021F"),
          peg$decode("2\u0220\"\"6\u02207\u0221"),
          peg$decode("2\u0222\"\"6\u02227\u0223"),
          peg$decode("2\u0224\"\"6\u02247\u0225"),
          peg$decode("2\u0226\"\"6\u02267\u0227"),
          peg$decode("2\u0228\"\"6\u02287\u0229"),
          peg$decode("2\u022A\"\"6\u022A7\u022B"),
          peg$decode("2\u022C\"\"6\u022C7\u022D"),
          peg$decode("2\u022E\"\"6\u022E7\u022F"),
          peg$decode("2\u0230\"\"6\u02307\u0231"),
          peg$decode("2\u0232\"\"6\u02327\u0233"),
          peg$decode("2\u0234\"\"6\u02347\u0235"),
          peg$decode("2\u0236\"\"6\u02367\u0237"),
          peg$decode("2\u0238\"\"6\u02387\u0239"),
          peg$decode("2\u023A\"\"6\u023A7\u023B"),
          peg$decode("2\u023C\"\"6\u023C7\u023D"),
          peg$decode("2\u023E\"\"6\u023E7\u023F"),
          peg$decode("2\u0240\"\"6\u02407\u0241"),
          peg$decode("2\u0242\"\"6\u02427\u0243"),
          peg$decode("2\u0244\"\"6\u02447\u0245"),
          peg$decode("2\u0246\"\"6\u02467\u0247"),
          peg$decode("2\u0248\"\"6\u02487\u0249"),
          peg$decode("2\u024A\"\"6\u024A7\u024B"),
          peg$decode("2\u024C\"\"6\u024C7\u024D"),
          peg$decode("2\u024E\"\"6\u024E7\u024F"),
          peg$decode("2\u0250\"\"6\u02507\u0251"),
          peg$decode("2\u0252\"\"6\u02527\u0253"),
          peg$decode("2\u0254\"\"6\u02547\u0255"),
          peg$decode("2\u0256\"\"6\u02567\u0257"),
          peg$decode("2\u0258\"\"6\u02587\u0259"),
          peg$decode("2\u025A\"\"6\u025A7\u025B"),
          peg$decode("2\u025C\"\"6\u025C7\u025D"),
          peg$decode("2\u025E\"\"6\u025E7\u025F"),
          peg$decode("2\u0260\"\"6\u02607\u0261"),
          peg$decode("2\u0262\"\"6\u02627\u0263"),
          peg$decode("2\u0264\"\"6\u02647\u0265"),
          peg$decode("2\u0266\"\"6\u02667\u0267"),
          peg$decode("2\u0268\"\"6\u02687\u0269"),
          peg$decode("2\u026A\"\"6\u026A7\u026B"),
          peg$decode("2\u026C\"\"6\u026C7\u026D"),
          peg$decode("2\u026E\"\"6\u026E7\u026F"),
          peg$decode("2\u0270\"\"6\u02707\u0271"),
          peg$decode("2\u0272\"\"6\u02727\u0273"),
          peg$decode("2\u0274\"\"6\u02747\u0275"),
          peg$decode("2\u0276\"\"6\u02767\u0277"),
          peg$decode("2\u0278\"\"6\u02787\u0279"),
          peg$decode("2\u027A\"\"6\u027A7\u027B"),
          peg$decode("2\u027C\"\"6\u027C7\u027D"),
          peg$decode("2\u027E\"\"6\u027E7\u027F"),
          peg$decode("2\u0280\"\"6\u02807\u0281"),
          peg$decode("2\u0282\"\"6\u02827\u0283"),
          peg$decode("2\u0284\"\"6\u02847\u0285"),
          peg$decode("2\u0286\"\"6\u02867\u0287"),
          peg$decode("2\u0288\"\"6\u02887\u0289"),
          peg$decode("2\u028A\"\"6\u028A7\u028B"),
          peg$decode("2\u028C\"\"6\u028C7\u028D"),
          peg$decode("2\u028E\"\"6\u028E7\u028F"),
          peg$decode("2\u0290\"\"6\u02907\u0291"),
          peg$decode("2\u0292\"\"6\u02927\u0293"),
          peg$decode("2\u0294\"\"6\u02947\u0295"),
          peg$decode("2\u0296\"\"6\u02967\u0297"),
          peg$decode("2\u0298\"\"6\u02987\u0299"),
          peg$decode("2\u029A\"\"6\u029A7\u029B"),
          peg$decode("2\u029C\"\"6\u029C7\u029D"),
          peg$decode("2\u029E\"\"6\u029E7\u029F"),
          peg$decode("2\u02A0\"\"6\u02A07\u02A1"),
          peg$decode("2\u02A2\"\"6\u02A27\u02A3"),
          peg$decode("2\u02A4\"\"6\u02A47\u02A5"),
          peg$decode("2\u02A6\"\"6\u02A67\u02A7"),
          peg$decode("2\u02A8\"\"6\u02A87\u02A9"),
          peg$decode("2\u02AA\"\"6\u02AA7\u02AB"),
          peg$decode("2\u02AC\"\"6\u02AC7\u02AD"),
          peg$decode("2\u02AE\"\"6\u02AE7\u02AF"),
          peg$decode("2\u02B0\"\"6\u02B07\u02B1"),
          peg$decode("2\u02B2\"\"6\u02B27\u02B3"),
          peg$decode("2\u02B4\"\"6\u02B47\u02B5"),
          peg$decode("2\u02B6\"\"6\u02B67\u02B7"),
          peg$decode("2\u02B8\"\"6\u02B87\u02B9"),
          peg$decode("2\u02BA\"\"6\u02BA7\u02BB"),
          peg$decode("2\u02BC\"\"6\u02BC7\u02BD"),
          peg$decode("2\u02BE\"\"6\u02BE7\u02BF"),
          peg$decode("2\u02C0\"\"6\u02C07\u02C1"),
          peg$decode("2\u02C2\"\"6\u02C27\u02C3"),
          peg$decode("2\u02C4\"\"6\u02C47\u02C5"),
          peg$decode("2\u02C6\"\"6\u02C67\u02C7"),
          peg$decode("2\u02C8\"\"6\u02C87\u02C9"),
          peg$decode("2\u02CA\"\"6\u02CA7\u02CB"),
          peg$decode("2\u02CC\"\"6\u02CC7\u02CD"),
          peg$decode("2\u02CE\"\"6\u02CE7\u02CF"),
          peg$decode("2\u02D0\"\"6\u02D07\u02D1"),
          peg$decode("2\u02D2\"\"6\u02D27\u02D3"),
          peg$decode("2\u02D4\"\"6\u02D47\u02D5"),
          peg$decode("2\u02D6\"\"6\u02D67\u02D7"),
          peg$decode("2\u02D8\"\"6\u02D87\u02D9"),
          peg$decode("2\u02DA\"\"6\u02DA7\u02DB"),
          peg$decode("2\u02DC\"\"6\u02DC7\u02DD"),
          peg$decode("2\u02DE\"\"6\u02DE7\u02DF"),
          peg$decode("2\u02E0\"\"6\u02E07\u02E1"),
          peg$decode("2\u02E2\"\"6\u02E27\u02E3"),
          peg$decode("2\u02E4\"\"6\u02E47\u02E5"),
          peg$decode("2\u02E6\"\"6\u02E67\u02E7"),
          peg$decode("2\u02E8\"\"6\u02E87\u02E9"),
          peg$decode("2\u02EA\"\"6\u02EA7\u02EB"),
          peg$decode("2\u02EC\"\"6\u02EC7\u02ED"),
          peg$decode("2\u02EE\"\"6\u02EE7\u02EF"),
          peg$decode("2\u02F0\"\"6\u02F07\u02F1"),
          peg$decode("2\u02F2\"\"6\u02F27\u02F3"),
          peg$decode("2\xB2\"\"6\xB27\xB3"),
          peg$decode("2\u02F4\"\"6\u02F47\u02F5"),
          peg$decode("20\"\"6071"),
          peg$decode("2k\"\"6k7l"),
          peg$decode("%2\u02F6\"\"6\u02F67\u02F7/B#%<2\u02F6\"\"6\u02F67\u02F7=.##&&!&'#/'$8\":\u02F8\" )(\"'#&'#"),
          peg$decode("2\u02F9\"\"6\u02F97\u02FA"),
          peg$decode("2\u02FB\"\"6\u02FB7\u02FC"),
          peg$decode("2\u012B\"\"6\u012B7\u012C"),
          peg$decode("2\u0153\"\"6\u01537\u0154"),
          peg$decode("2\xDF\"\"6\xDF7\xE0")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 325 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      var _bindings={};
      var _locals={};
      var reCache={};
      var Entity=false;
      var FunctionChain=false;
      var SafetyFetch=false;
      var References={};
      var InstanceVars={};
      var UnresolvedLocals={};
      var readOnlyReference=true;
      var usedMemberVar=false;
      var DynamicTaskClauseFormatter=undefined;

      var ResWords={},ResWordsA=(
        "andb,and,array,as,asc,audit,"+
        "bind,blank,break,by,"+
        "chain,create,collect,concat,copy,"+
        "default,delete,desc,down,"+
        "empty,enlist,entrait,enum,exists,expects,"+
        "false,fields,first,from,"+
        "get,"+
        "has,highest,"+
        "into,is,isnt,isNaN,iterate,"+
        "keys,"+
        "last,limit,list,lowest,"+
        "me,my,"+
        "NaN,nand,new,nor,notb,not,number,null,"+
        "observe,orb,or,"+
        "promise,process,"+
        "self,set,singleton,swap,"+
        "task,trial,throw,thru,to,traits,true,typeof,"+
        "undefined,update,using,"+
        "values,via,"+
        "xorb,xor").split(/,/);
      for (var i=0; i<ResWordsA.length; i++) ResWords[ResWordsA[i]]=1;
      
      var _db=false;
      var lp='_'; // prefix for bareword variables
      var LeakedMagic=/\^\{([a-z0-9]+)\}/;
      
      if (undefined===options.constructs) options.constructs={};
      
      function addInstanceVar(v) {
        if (!InstanceVars[v]) {
          //console.log("Added instance var "+v)
          CheckScope(v,"instance");
          InstanceVars[v]=true;
        }
      }

      function addInstanceVars(v) {
        var vt='return '+v[1]+';';
        try {
          var inst=new Function(vt)();
          for (var i in inst) {
            addInstanceVar(i);
          }
        } catch (e) {
          error(e.message+"\n\nSAI compiler: Instance/Given variables can only be initialized with simple literal values. For more complex initialization, use Instantiate (but still declare them with instance).\n\nYour vars: "+v[1]);
        }
      }
      
      function checkUsedMemberVar(v) {
        if (usedMemberVar) {
          error("SAI compiler: object task "+v+" is declared as unbound but uses a bareword access to "+usedMemberVar);
        }
        usedMemberVar=false;
      }

      function CheckScope(v,context) {
        //console.log("check scope "+context+": "+v);
        if (References[v]) {
          var message="SAI compiler: variable "+v+" is a Reference variable and cannot be used as a "+context+".";
          //console.log(message);
          error(message);
        }
        if (InstanceVars[v]) {
          var message="SAI compiler: variable "+v+" is an Instance variable and cannot be used as a "+context+".";
          //console.log(message);
          error(message);
        }
      }
      
      function addLocal(v,a) { 
        if (_db) console.log("request local "+v+" - "+a);
        if (References[v]) return;
        if (_bindings[v]) return;
        _locals._hasLocals=true;
        if (!_locals[v]) {
          _locals[v]=a?(v+a):v;
        } else if (a) {
          _locals[v]=v+a;
        }
        if (_db) console.log("  added local "+v+" - "+_locals[v]);
      }
      
      function checkLocal(v,name) {
        if (References[v]) return v;
        if (_bindings[v]) return v;
        if (!_locals[v]) {
          UnresolvedLocals[v]=name;
          return '^[U,b,?,'+v+','+name+','+location().start.offset+']';
        }
        return v;
      }
      
      function Linker(code,final) {
        var p=/\^\[U,(.),([^,]+),([^,]+),([^,]+),([^\]]+)\]/g;
        return code.replace(p,function(x,bound,task,v,name,loc) {
          if (References[v]) return v;
          if (_bindings[v]) return v;
          if (_locals[v]) return v;
          if (InstanceVars[name]) {
            usedMemberVar=name;
            if (bound=='u') {
              checkUsedMemberVar(task+"(u)");
            }
            return '$.'+name;
          }
          if (final) {
            //console.log(JSON.stringify(InstanceVars));
            //console.log('SAI Compiler: local variable "'+name+'" used without initialization at:'+loc);
            error('SAI Compiler: local variable "'+name+'" used without initialization at:'+loc);
          } 
          return x; // unchanged
        });
      }
      
      function removeLocal(v) {
        if (_db) console.log("removed local "+v);
        delete _locals[v];
      }
      
      function getLocals() { 
        if (!_locals._hasLocals) return ''; 
        var k=[]; 
        for (var i in _locals) if (i!=='_hasLocals') {
          if (i!=_locals[i]) {
            k.push(_locals[i]);
          } else {
            k.unshift(_locals[i]);
          }
        } 
        var finalk=[];
        var klookup={};
        if (_db) {
          console.log("references");
          console.log(References);
          console.log("locals");
          console.log(_locals);
        }
        for (var i in k) {
          //console.log(k[i]);
          if (!References[k[i]]) finalk.push(k[i]);
          klookup[k[i]]=k;
        }
    //    for (var i in UnresolvedLocals) {
    //      if (!klookup[i] && !References[i]) {
    //        error("SAI compiler: local variable used before initialization (beware forward declarations): "+UnresolvedLocals[i]);
    //      }
    //    }
        //console.log(finalk);
        var r='var '+finalk.join(',')+';\n'; 
        _locals={};
        UnresolvedLocals={};
        return r; 
      }

      function rep(list,val) {
        var j;
        for (var i in list) {
          if (j==val[list[i]]) list[i]=j;
        }
      }
     
      function RV(code,varnames) {
        if (!varnames) varnames={};
        if (!code) error("SAI compiler: RV has undefined code; likely a syntax error; perhaps you need to use 'self'");
        if (!code.replace) {
          code=code.toString();
        }
        var repl=function(key) {
          var val=varnames[key];
          if (undefined===val || null===val || false===val) {
            val=tempvar();
            addLocal(val);
          }
          var re=reCache[key]; if (!re) re=reCache[i]=new RegExp('\\^\\{'+key+'\\}','g');
          //console.log(" -- replace "+key+" with "+val)
          code=code.replace(re,val);
        };
        //console.log("###############################")
        //console.log(code);
        //console.log("........................");
        //console.log(varnames);
        var completed={};
        var precedence=['block','this','key','list','counter'];
        for (var j in precedence) {
          var i=precedence[j];
          if (varnames.hasOwnProperty(i)) {
            //console.log("intercept "+i+" with "+varnames[i]);
            repl(i);
            completed[i]=true;
          }
        }
        for (var i in varnames) {
          if (undefined===completed[i]) {
            repl(i);
          }
        }
        //console.log(code)
        //console.log("---------------------------------")
        return code;
      }
      
      var varnum=0;
      function tempvar() {
        var v="$"+(varnum++);
        return v;
      }
      
      function quoted(v) {
        return "'"+v.replace(/\'/g,"\\\'")+"'";
      }
      
      var accessors = {
        firstfetch: { // [0]+key+[1]
          this: [ '$' , '' ],
          currentthis: [ 'this' , ''],
          local: [ '' , '' ], 
          arguments: [ 'arguments','' ],
          parameters: [ 'p','' ],
          it: [ '^{this}','' ],
          key: [ '^{key}','' ],
          counter: [ '^{counter}','' ],
          trial: [ '^{trial}','' ],
          sum: [ '^{sum}','' ],
          error: [ '^{error}','' ],
          self: [ '^{self}','' ],
          super: [ '^{super}','' ],
          paren: [ '', '' ],
          bound: [ '' , '' ],
          global: [ '' , '' ],
          function: [ '' , '' ],
          literal: ['','']
        },
        nextfetch: { // +[0]+key+[1]
          function: [ '(' , ')' ],
          attribute: [ '.' , '' ], 
          index: [ '[' , ']' ],
        },
        firststore: { //[0]+key+[1]
          function: [ '' , '' ],
          paren: [ '', '' ],
          local: [ '' , ''  ],
          error: [ '^{error}','' ],
          attribute: [ '^{this}.' ,  '' ],
          self: [ '^{self}','' ],
          sum: [ '^{sum}' , '' ],
          property: [ '$["' , '"]' ], 
          parameter: [ 'p["','"]' ],
        },
        laststore: { // +[0]+key+[1]
          attribute: [ '.' , '' ], 
          index: [ '[' , ']'  ],
        }
      };

      function safetyFetch(root,leaf) {
        SafetyFetch=true;
        return '(undefined===($_b=('+root+'))?undefined:($_b'+leaf+'))';
      }

      function ValueCompositor(v,safe) {
        //console.log("Value Compositor...");
        //console.log(v);
        var code='';
        if (v[0][0]=='local') {
          var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
          var binding=options.globals[test];
          if (binding) {
            v[0][0]='bound';
            v[0][1]=binding;
          }
        }
        if (v[0][0]=='local') {
          code+=VarUse(v[0][1]);
        }
        var patternbase=accessors.firstfetch;
        var i=0; while (i<v.length) {
          var pattern=patternbase[v[i][0]]; 
          patternbase=accessors.nextfetch;
          if (!pattern) error("SAI Compiler: RV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
          var leaf=pattern[0] + v[i][1] + pattern[1];
          if (i>0 && safe) {
            code=safetyFetch(code,leaf);
          } else {
            code=code+leaf;
          }
          i++;
        }
        return code;
      }

      var itselfops = {
        '+': '^{1} += ^{2}' , // test 'self +'
        '-': '^{1} -= ^{2}' , // test 'self -'
        
        '*': '^{1} *= ^{2}' , // test 'self *'
        '/': '^{1} /= ^{2}' , // test 'self /'
        '%': '^{1} %= ^{2}' , // test 'self %'
        '<<': '^{1} <<= ^{2}' , // 
        '>>': '^{1} >>= ^{2}' , // 
        '>>>': '^{1} >>>= ^{2}' , // 
        '**': '^{1} = Math.pow(^{1},^{2})' , // test 'self **'

        xorb: '^{1} ^= ^{2}' , // test 'self xorb'
        andb: '^{1} &= ^{2}' , // test 'self andb'
        orb: '^{1} |= ^{2}' , // test 'self orb'

        and: '^{1} = ^{1} && ^{2}', // test 'self and'
        or: '^{1} = ^{1} || ^{2}', // test 'self or'
        xor: '^{1} = $AI.xor_op(^{1},^{2})',  // test 'self xor'
        nand: '^{1} = (!((^{1})&&(^{2})))', // test 'self nand'
        nor: '^{1} = (!((^{1})||(^{2})))', // test 'self nor'

        '?>': '^{1} = Math.max(^{1},^{2})', // test 'self ?>'
        '?<': '^{1} = Math.min(^{1},^{2})', // test 'self ?<'
        
        update: '^{1} = $AI.update_op(^{1},^{2})', // test 'self update'
        delete: '$AI.delete_op(^{1},^{2})', // test 'self delete*'
        default: 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        '?': 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        concat: '^{1} = $AI.concat_op(^{1},^{2}, true)', // test 'self concat inplace*'
      };

      var unops={
        '-': '^{1}=-(^{1})' , // test 'self negate'
        'not': '^{1}=!(^{1})', // test 'self not'
        'notb': '^{1}=~(^{1})', // test 'self notb'
        'inc': '^{1}=(^{1} || 0)+1;', // test 'self inc'
        'dec': '^{1}--', // test 'self dec'
        'delete': 'delete ^{1}', // test 'self delete'
        'collect': '^{1} = $AI.collect_op(^{1})' // test 'self collect*'
      };  

      
      function assembleLiteral(v) {
        var build='';
        var result=[];
        for (var i in v) {
          var c=v[i];
          if (c[0]) {
            build+=c[1];
          } else {
            if (build.length) result.push(quoted(build));
            build='';
            if (!result.length) result.push(quoted(''));
            result.push(c[1]);
          }
        }
        if (build.length) result.push(quoted(build));
        if (!result.length) result=[quoted('')];
        return result.join('+');
      }

      var Lists={};
      function addToList(list,e) {
        var list=Lists[list] || (Lists[list]=[]);
        list.push(e);
      }
      function getList(list) {
        var list=Lists[list] || (Lists[list]=[]);
        if (list.length) {
          return '["'+list.join('","')+'"]';
        } 
        return '[]';
      }
      function clearLists() {
        Lists={};
      }
        
      function GetExpectsTester(x,name) {
        var l =[];
        for (var i in x) {
          var t=x[i][1] || 'true';
          var p='"'+x[i][0][1]+'":'+x[i][1];
          l.push(p);
        }
        return '$AI.expectsThrow(p,{'+l.join(',')+'},'+quoted(name)+');\n';
      }
      
      
      // expects
      // as
      // kind
      // body
      // preface
      // appendix
      function TaskClauseFormatter(o) {
        var params=[];
        if (!o.nodefaultparam) {
          params.push('p');
        }
        var expects='',locals=[];//$unused=this';
        if (o.expects && o.as) error("SAI compile: cannot have both EXPECTS and AS in a function declaration");
        if (o.expects && o.expects.length) {
          expects=GetExpectsTester(o.expects,'in-line');
        } else if (o.as) {
          for (var i in o.as) {
            if (i==0) {
              locals.push(o.as[i][0][1]+'='+params[0]);
            } else {
              params.push(o.as[i][0][1]);
            }
          }
        }
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var finallocals=[];
        for (var i in locals) if (!References[locals[i]]) finallocals.push(locals[i]);
        locals=locals.length?('var '+finallocals.join(',')+';'):'';
        var code = o.kind+'('+params.join(',')+'){'+o.preface+locals+expects+'{'+o.block+'}'+o.postface+'}';
        if (o.execute) code+='()';
        return code;
      }

      
      // prefix (v0)
      // name (v1)
      // as (v2)
      // expects (v3)
      // kind 
      // body (k)
      function TaskFormatter(o) {
        
        var fn=(o.prefix?o.prefix+'_':'')+o.name;
        var params='p';
        var paramspec=o.as||[];
        
        for (var i in paramspec) {
          var pname=paramspec[i][0][1];
          if (i==0) {
            addLocal(pname,'=p');
          } else {
            removeLocal(pname);
            params+=','+pname;
          }
        }

        if (SafetyFetch) { addLocal('$_b'); SafetyFetch=false; }
        if (FunctionChain) { addLocal('$_c'); addLocal('$_d'); FunctionChain=false; }
        if (!o.nothis) {
          if (o.unbound || o.property) {
            addLocal('$','=this');
          } else {
            addLocal('$','=this['+fn+']?this:$bindfail('+fn+')');
          }
        }
        var head='', tail='';
        var sup=GlobVar();
        if (o.prefix!='get' && o.prefix!='set') {
          addToList('lock',fn.substring(1,fn.length-1));
          head='var '+sup+'=prototype['+fn+'] || function(){};\n';
          head+='prototype['+fn+']=';
          tail=';\n';
        }
      
        if (o.unbound) {
          o.body=o.body.replace(/\^\[U,b,\?/g, "^[U,u,"+o.name);
        }
        o.body=Linker(o.body,false);
        if (o.unbound) {
          checkUsedMemberVar(fn+'(t)');
        } usedMemberVar=false;
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var fun=o.kind+'('+params+') {\n'+o.preface+getLocals();
        if (o.expects) {
          fun+=GetExpectsTester(o.expects,fn);
        }
        fun+='{'+o.body+'}'+o.postface; // function body
        fun+='}';
      
        if (o.name) {
          if (fun.indexOf('^{this}')>-1) error("SAI Compiler: Cannot use unrooted . accessor without a context\n\n"+fun);
        }
        var r=RV(head+fun+tail,{this:false,super:sup});

        return r;

      }

      function VerbCat(v) {
    //       console.log("VerbCat");
    //       console.log(v);
         if (v.left) {
           return v.left+v.base+v.right;
    //     } else if (v.call) {
    //       if (test) {
    //         return RV('((undefined===($_c=^{verb}(($_d=^{base}),^{param})))?$_d:$_c)',v);
    //       } else {
    //         return v.verb+'('+v.base+(v.param?(','+v.param):'')+')';
    //       }
         } else {
           if (v.test) {
             return RV('((undefined===($_c=(($_d=^{base})^{verb}(^{param}))))?$_d:$_c)',v);
           } else {
             return v.base+v.verb+'('+v.param+')';
           }
         }
      }
     
      function AssembleVerb(v) {
         FunctionChain=true;
         if (v.length==1) {
    //       console.log("AV 1");
    //       console.log(v[0]);
           return VerbCat(v[0]);
         }
         var base=v[0].base;
         for (var i in v) {
           v[i].base=base;
           v[i].test=true;
           base=VerbCat(v[i]);
         }
         return base;
      }
      
      function EnumCheck(v) {
        var start=1;
        for (var i in v) {
          if (v[i][1]==='enum') {
            v[i][1]=start++;
          } else {
            var n=parseInt(v[i][1],10);
            if (!isNaN(n)) {
              start=n+1;
            }
          }
        }
        return v;
      }
      
      function GlobVar() {
        return '$'+(options.persist.globalcount++)+'g';
      }
      function VarUse(v) {
        return '';
        //return [].concat(v).map(function(v) { return ' /*:VAR:'+v+':*/ '});
      }
      function FixVars(code) {
      }

      function MagicCheck(code) {
        var lm=LeakedMagic.exec(code);
        if (lm) error("SAI Compiler: Pronoun '"+lm[1]+"' used in the wrong place (but I can't tell you where yet, please search for your use of this variable and make sure it is contained within a construct that uses it.)");
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()