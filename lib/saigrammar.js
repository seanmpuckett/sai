/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { startFile: 0, startExpression: 1 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(r, o) {
              var code='';
              if (r) code+=r;
              code+=o.join('\n')
              MagicCheck(code);
              code=Linker(code,true);
              return code;
            },
          function(code) {
             MagicCheck(code); 
             code=Linker(code);
             return code;
           },
          function(v) {
            if (v[0]!='fields') error("SAI Compiler: REFERENCE requires a trait list.");
            var code='';
            for (var i in v[2]) {
              var r=v[2][i];
              References[lp+r[0]]=true; 
              if (r[1].indexOf('function')==0) {
                error("SAI Compiler: Cannot define functions in a reference block. Sorry, maybe someday.");
              }
              code+='var '+lp+r[0]+'='+r[1]+';\n'; 
            }
            return code;
          },
          function(k, typ, v, d, s) {
              if (!v) v=quoted('0.0.0-unspecified');
              var code='',isof=[];
              var isa=quoted(k);
              addToList('lock','isa')
              addToList('freeze','isof')
              code+='var isa=prototype.isa='+isa+';\n';
              isof.push('version:'+v);
              isof.push('isa:isa');
              isof.push('context:__context');
              if (typ) {
                isof.push('type:"'+typ+'"');
              }
              code+='var $bindfail=function(m){ throw new Error("SAI: A call to "+m+" on object "+isa+" has come unbound from any instance of that object. (If this is not in error, mark the declaration of "+m+" as unbound.)"); }\n';
              code+='prototype.isof['+isa+']={'+isof.join(',')+'};\n';
              var l;
              if (l=getList('lock')) code+='prototype.__tobelocked=prototype.__tobelocked.concat('+l+');\n';
              if (l=getList('freeze')) code+='prototype.__tobefrozen=prototype.__tobefrozen.concat('+l+');\n';
              code+=d.join('\n');
              code+=s.join('\n');
              clearLists();
              return code;
            },
          function(v) { return v },
          function(v) {
             var inherit='['+v.join(',')+']';
             var code='prototype.isof[prototype.isa].inherit=prototype.__inherits='+inherit+';\n';
             return code;
            },
          function(v) {
             return 'prototype.__contracts=prototype.__contracts.concat(['+v.join(',')+']);\n';
            },
          function(v, p1, p2) {
             addInstanceVar(v);
             var prop={get: undefined, set: undefined};
             prop[p1[0]]=p1[1];
             if (p2) {
               prop[p2[0]]=p2[1]; 
             }
             var ret='Object.defineProperty(prototype,"'+v+
               '",{configurable:true,enumerable:true,get:'+prop.get+
               ',set:'+prop.set+
               '});\n';
             addToList('lock',v);
             return ret;
          },
          function(g, w, b) { 
             if (!g) g='get'; 
             if (g=='get') w=null; 
             return [g,TaskFormatter({prefix:g,as:w,property:true,body:b,kind:'function'})]; 
            },
          function(v, k) {
             v.body=k;
             return TaskFormatter(v);    
            },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:"'"+v+"'",unbound:unbound,expects:x,as:w,kind:'function'};
           },
          function(v, unbound, x, w) { 
             addInstanceVar(v);
             return  {name:v,expects:x,unbound:unbound,as:w,kind:'function*'};
           },
          function(v, unbound, x, o) { 
             addInstanceVar(v);
             var vn="'"+v+"'";
             var isthis='this['+vn+']?this:$bindfail('+vn+')';
             if (unbound) {
               isthis='this';
             }
             return {
              name:vn
              ,expects:x
              ,unbound:unbound
              ,as:o
              ,nothis:true
              ,kind:'function'
              ,preface:'var $='+isthis+'; return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
              };
            },
          function(v) { return "Symbol.iterator" },
          function(v) { return "'"+v+"'" },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function'});
          },
          ";",
          peg$literalExpectation(";", false),
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:'return '+b+';',kind:'function'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function*'});
          },
          function(o, option, x) {
            var f='';
            if (option=='any') {
              f="Promise.race("+x+")";
            } else if (option=='all') {
              f="Promise.all("+x+")";
            } else {
              f=x;
            }
            
            var b=RV('^{f}.then( function(){ $_resolve.apply($,arguments); } ).catch( function(){ $_reject.apply($,arguments); });',{f:f});
            
            return TaskClauseFormatter({
              as:o
              ,block:b
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(x, o, b) {
            return TaskClauseFormatter({
              expects:x
              ,as:o
              ,block:b
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(i, t) { return [i[1],t?t:true] },
          function(i) {return i},
          function(is, i) { is.push(i); return is; },
          function(t) { return [[['','_root'],t]] },
          "..",
          peg$literalExpectation("..", false),
          function(v) { return v+';' },
          function(v) { return v.join('') },
          function(i) {return options.constructs[i];},
          function(i, a, cli) {return options.constructs[i].clauses[cli];},
          function(i, a, cli, cla) {return [cli,cla];},
          function(i, a, cl) {
              var work=[[i,a]].concat(cl);
              var work2=[];
              for (var i1=0; i1<work.length; i1++) {
                var j=work[i1];
                var syntax=j[1].shift();
                work2.push({
                  clause: j[0],
                  syntax: syntax,
                  type: j[0]+'-'+syntax,
                  args: j[1]
                });
              }
              var result=options.constructs[i].handler(work2);
              if (result.error) error(result.error);
              return result.body;
           },
          function(mo, b) { return [ 'block', mo, b ]; },
          function(pl) { return [ 'exprs', pl ]; },
          function() { return 'break;\n'; },
          function() { return 'continue;\n' },
          function() { return 'var $=this;\n' },
          function() { return ';' },
          function(s, o, c) {return c},
          function(s, o, c, d) {return d},
          function(s, o, c, d) {
             o=o?o:tempvar();
             addLocal(o);
             var repl={trial:o};
             var r=RV('switch (^{trial}=('+s+')) {\n',repl);
             for (var i in c) {
               for (var j in c[i][0]) {
                 r+='case ('+c[i][0][j]+'): ';
               }
               r+=RV(c[i][1]+' break; \n',repl);
             }
             if (d) r+=RV('default: '+d+' break; \n',repl);
             r+='}\n';
             return r;
           },
          function(e) { return e; },
          function(e, b) { return [e,b]; },
          function(b) { return b; },
          function(p) { // test 'throw'
           return 'throw '+p+';\n' },
          function(t, c) {return c},
          function(t, c, f) {return f},
          function(t, c, f) {
             if (!(c||f)) error("SAI Compiler: TRY needs a CATCH and/or FINALLY");
             return t+(c?c:'')+(f?f:'');
           },
          function(b) { return 'try {'+b+'}\n'; },
          function(o, b) { 
             o=o?o:tempvar();
             addLocal(o);
             return RV('catch (^{error}) {'+b+'}\n',{error:o}); 
           },
          function(b) { return 'finally {'+b+'}\n' },
          function(i, l) {return l},
          function(i, l, e) {return e},
          function(i, l, e) { return i+l.join('')+(e?e:'') },
          function(c, out, b) { // test 'exists*'
             if (!out) out=tempvar();
             addLocal(out);
             return RV('if (undefined !==(^{this}=(^{condition}))) {\n'+b+'\n}\n',{this:out,condition:c}); 
           },
          function(c, out, b) { // test 'if*'
             if (!out) out=tempvar();
             addLocal(out);
             return RV('if ((^{trial}=(^{condition}))) {\n'+b+'\n}\n',{trial:out,condition:c}); 
           },
          function(c, b) { // test 'unless*'
             return 'if (!('+c+')) {\n'+b+'\n}\n' },
          function(b) { return 'else '+b+'\n' },
          function(b) { return 'else {'+b+'}\n' },
          ",",
          peg$literalExpectation(",", false),
          function(l) { return l },
          function(l, o) {
             l=l||[]; l.push(o);
             var j=[]; for (var i in l) j.push(l[i][0][1]);
             for (var i in j) CheckScope(j[i].substring(1),"local");
             return 'var '+j.join(',')+';\n';
           },
          function(value, out, block) {
                var r={this:(out?out:tempvar())};
                var code=RV('var ^{this}=',r)+value+RV(';\n'+block+'\n',r);
                return code; 
            },
          function(a, b) {
             return RV('var ^{t1}=^{v1}; var ^{t2}=^{v2}; ^{v2}=^{t1}; ^{v1}=^{t2};',{t1:tempvar(),t2:tempvar(),v1:a,v2:b});
           },
          function(t) { return t },
          function(t) { return t.join(''); },
          function(v) { return v+'=('+v+' || 0)+1;\n'; },
          function(v) { return v+'--;\n'; },
          function(v) { return 'delete '+v+';\n'; },
          function(t, v) { return v },
          function(t, v) { return v.concat(t) },
          function(v) { return v.reduce(function(a,b){return a.concat(b)}) },
          "-",
          peg$literalExpectation("-", false),
          function(l, e) {
               error('SAI Compiler: the "set val - expr" construct is unclear. Please use "set val to -expr" or "set val self - expr" as appropriate.');
             },
          function(l, o, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) error("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(itselfops[o], {'1':l[i], '2':RV(e,{self:l[i]}) } )+';\n';
             }
             return code;
           },
          function(l, e) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) error("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             if (l.length==1) return l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+=l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             if (readOnlyReference) for (var i in l) if (References[l[i]]) error("SAI Compiler: Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(unops[o],{'1':l[i]})+';\n';
             }
             return code;
           },
          function(l, o, e) {
             error("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function(l, e) {
             for (var i in l) {
               //console.log("local scope check "+l[i]);
               if ('$.'==l[i].substring(0,2)) CheckScope(l[i].substring(2),"local-1");
               if (lp==l[i].substring(0,lp.length)) CheckScope(l[i],"local-2");
             }
             if (l.length==1) return 'let '+l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+='let '+l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             error("SAI compiler: 'local' should only be used when declaring variables, not when modifying them.");
           },
          function() { return 'local '; },
          "+",
          peg$literalExpectation("+", false),
          "**",
          peg$literalExpectation("**", false),
          "*",
          peg$literalExpectation("*", false),
          "/",
          peg$literalExpectation("/", false),
          "%",
          peg$literalExpectation("%", false),
          "<<",
          peg$literalExpectation("<<", false),
          ">>",
          peg$literalExpectation(">>", false),
          ">>>",
          peg$literalExpectation(">>>", false),
          "?>",
          peg$literalExpectation("?>", false),
          "?<",
          peg$literalExpectation("?<", false),
          "?",
          peg$literalExpectation("?", false),
          function(v) { return v+';\n'; },
          function(v) { return v+";\n"; },
          function(v) { return '$AI.drain_op('+v+');\n'; },
          function(k) { return k },
          function(k) { 
             return 'return '+(k?k:'')+';\n' 
            },
          function(r, k) { 
             return r+'('+(k?k:'')+');\n' ;
            },
          function(k) { 
             return 'yield *'+'('+k+');\n' ;
            },
          function(k) { 
             return 'yield '+'('+k+');\n' ;
            },
          function() { return '$_resolve' },
          function() { return '$_reject' },
          function(b) { return '{'+b+'}\n' },
          function(v, o, b, n) {return n},
          function(v, o, b, n) {
             var w={block:b,t1:tempvar(),t2:tempvar(),v:v,none:n,key:(o?o[1]:false),this:(o?o[0]:false)};
             var setup='var ^{t1}=$AI.kviterate_op(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'if (!^{t2}.done) ';
             var iterate='for (; !^{t2}.done; ^{t2}=^{t1}.next()) { ^{this}=^{t2}.value[1]; ^{key}=^{t2}.value[0]; ^{block}; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, task, n) {return n},
          function(v, task, n) {
             var w={task:task,t1:tempvar(),t2:tempvar(),v:v,none:n,key:tempvar()};
             var setup='var ^{t1}=$AI.kviterate_op(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'';
             var iterate='while (!^{t2}.done) { ^{task}(^{t2}.value[1],^{t2}.value[0]); ^{t2}=^{t1}.next();}\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, o, b, n) {
             var w={block:b,t1:tempvar(),t2:tempvar(),v:v,none:n,key:(o?o[1]:false),this:(o?o[0]:false)};
             var setup='var ^{t1}=$AI.iterator_op(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'if (!^{t2}.done) ';
             var iterate='for (var ^{key}=0; !^{t2}.done; ^{t2}=^{t1}.next(), ^{key}++) { ^{this}=^{t2}.value; ^{block}; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, task, n) {
             var w={task:task,t1:tempvar(),t2:tempvar(),v:v,none:n,key:tempvar()};
             var setup='var ^{t1}=$AI.iterator_op(^{v}), ^{t2}=^{t1}.next(), ^{key}=0;\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'';
             var iterate='while (!^{t2}.done) { ^{task}(^{t2}.value,^{key}); ^{t2}=^{t1}.next(); ^{key}++; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, o, b, n) {
               var w={block:b,j:tempvar(),v:v,n:n,k:tempvar(),key:(o?o[1]:false),this:(o?o[0]:false),list:(o?o[2]:false)};
               var setup='var ^{list}=^{v};\nif (undefined===^{list}) ^{list}=[];';
               var iterate='for (var ^{key} in ^{list}) { var ^{this}=^{list}[^{key}];\n^{block}}\n'+(n?'if (undefined===^{key}) { ^{n} }\n':'');
               return RV(setup+iterate,w); 
            },
          function(list, task, n) {return n},
          function(list, task, none) {
               var w={task:task,list:list,j:tempvar(),k:tempvar(),none:none};
               var setup='var ^{j}=^{list};\nif (undefined===^{j}) ^{j}=[]; ';
               var iterate='for (var ^{k} in ^{j}) ^{task}(^{j}[^{k}],^{k},^{j});\n';
               var final=none?'if (^{k}===undefined) { ^{none} }\n':'';
               return RV(setup+iterate+final,w); 
            },
          function(v, o, b, n) {
               var w={block:b,j:tempvar(),v:v,n:n,k:tempvar(),l:tempvar(),key:(o?o[1]:false),this:(o?o[0]:false),list:(o?o[2]:false)};
               var setup='var ^{list}=^{v};\nif (undefined===^{list}) ^{list}=[]; ';
               var iterate='var ^{l}=^{list}.length; if (^{l}) { var ^{this},^{key}=0; for (;^{key}<^{l};^{key}++) { ^{this}=^{list}[^{key}];\n^{block}\n} } '+(n?'else { ^{n} }':'')+'\n';
               return RV(setup+iterate,w); 
            },
          function(list, task, none) {
               var w={task:task,list:list,l:tempvar(),j:tempvar(),k:tempvar(),none:none};
               var setup='var ^{j}=^{list};\nif (undefined===^{j}) ^{j}=[]; var ^{l}=^{j}.length;\n';
               var test=none?'if (!^{l}) ^{none} else ':'';
               var iterate='for (var ^{k}=0; ^{k}<^{l}; ^{k}++) { ^{task}(^{j}[^{k}],^{k},^{j}) };\n';
               return RV(setup+test+iterate,w); 
            },
          function(start, x) {return x},
          function(start, stop, step, out, block, n) {return n},
          function(start, stop, step, out, block, none) { // test 'count to*'
               if (!stop) stop=0;
               var w={start:start,stop:stop,out:out,block:block,none:none,dest:tempvar(),counter:(out?out[0]:false),step:(step?step:'-1')};
               var setup='var ^{counter}=^{start},^{dest}=^{stop};\n ';
               var alternate=none ? 'if (^{counter}<=^{dest}) { ^{none} } else ' : '';
               var iterate='for (^{counter}+=^{step}; ^{counter}>=^{dest}; ^{counter}+=^{step}) { ^{block} }\n';
               return RV(setup+alternate+iterate,w); 
            },
          function(x) { return x },
          function(start, stop, step, out, block, none) { // test 'count to*'
               if (!start) start=0;
               var w={start:start,stop:stop,out:out,block:block,none:none,dest:tempvar(),counter:(out?out[0]:false),step:(step?step:'1')};
               var setup='var ^{counter}=^{start},^{dest}=^{stop};\n ';
               var alternate=none ? 'if (^{counter}>=^{dest}) { ^{none} } else ' : '';
               var iterate='for (; ^{counter}<^{dest}; ^{counter}+=^{step}) { ^{block} }\n';
               return RV(setup+alternate+iterate,w); 
            },
          function(v, o, b) {
              return RV('var ^{this}; while (^{this}=( ^{v})) { ^{block} }\n',{v:v,block:b,this:(o?o[0]:false)});
            },
          function(v, b) {
              return 'while (!('+v+')) { '+b+' }\n';
            },
          function(v, b) {
              return 'do { '+b+' } while ('+v+');\n';
            },
          function(v, b) {
              return 'do { '+b+' } while (!('+v+'));\n';
            },
          function(v, a) { return [v].concat(a) },
          function(v) {
              var j=v.length;
              if (!j) error("SAI Compiler: Expected something to assign into");
              if (j==1) {
                var pattern=accessors.firststore[v[0][0]];
                if (!pattern) error("SAI Compiler: Couldn't construct recipient from "+v);
                return pattern[0] + v[0][1] + pattern[1];
              }
              j--;
              var code='';
              var patternbase=accessors.firstfetch;
              var i=0; while (i<j) {
                var pattern=patternbase[v[i][0]]; patternbase=accessors.nextfetch;
                if (!pattern) error("SAI Compiler: Couldn't construct recipient from "+v);
                code+=pattern[0] + v[i][1] + pattern[1];
                i++;
              }
              var pattern=accessors.laststore[v[j][0]];
              if (!pattern) error("SAI Compiler: Couldn't construct recipient from "+v);
              code= code+pattern[0]+v[j][1]+pattern[1];
              return code;
            },
          function(v) { return ValueCompositor(v,false) },
          function(v) { return ValueCompositor(v,true) },
          function(v) {
              var verb='',stem='';
              if (v[0][0]=='local') {
                var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
                var binding=options.globals[test];
                if (binding) {
                  v[0][0]='bound';
                  v[0][1]=binding;
                }
              }
              var patternbase=accessors.firstfetch;
              var i=0; while (i<v.length) {
                var pattern=patternbase[v[i][0]]; 
                patternbase=accessors.nextfetch;
                if (!pattern) error("SAI Compiler: VV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
                stem+=verb;
                verb=pattern[0] + v[i][1] + pattern[1];
          //      console.log("VV"+i+": stem:"+stem+" verb:"+verb);
                i++;
              }
              return [stem,verb];
            },
          function(v) { return [['literal',v]] },
          function() { return [['super','']]; },
          function(x, y) { 
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
            },
          function(x, y) {
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
           },
          function() { return [['it','']] },
          function() { return [['key','']]},
          function() { return [['counter','']]},
          function() { return [['trial','']]},
          function() { return [['sum','']]},
          function() { return [['self','']]},
          function() { return [['error','']]},
          function(v) { return [[ 'attribute', v ]] },
          "'s",
          peg$literalExpectation("'s", false),
          function(p) { 
             return [[ 'function', p?p[1]:'' ]] 
          },
          function(v) { return [[ 'it', ''],[ 'attribute', v ]] },
          function(v) { return [[ 'it', ''],[ 'index', v ]] },
          function() { return [[ 'it', '']] },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(v) { return [[ 'index', v ]] },
          "\\",
          peg$literalExpectation("\\", false),
          function(v) { return [['index',v]] },
          ".",
          peg$literalExpectation(".", false),
          function(v) { return [[ 'paren', v ]] },
          function(v) { 
             //console.log("LLocal "+v);
             if (InstanceVars[v]) {
               usedMemberVar=v;
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v) { 
             //console.log("RLocal "+v);
             if (InstanceVars[v]) {
               usedMemberVar=v;
               return [['this',''],[ 'attribute',v ]]; 
             }
             if (!options.globals[v]) {
               v=checkLocal(lp+v,v);
             } else {
               v=lp+v;
             }
             return [[ 'local',v ]];
          },
          "$$",
          peg$literalExpectation("$$", false),
          function() { return [['arguments','']]},
          "$",
          peg$literalExpectation("$", false),
          function(v) { return [[ 'parameters','' ],['attribute',v]] },
          function() { return [[ 'parameters','' ]]},
          function(v) { return [['literal',v]]},
          "~",
          peg$literalExpectation("~", false),
          function(v) { return [['global',v]] },
          "@",
          peg$literalExpectation("@", false),
          function(v) { return [['this',''],[ 'attribute',v ]] },
          "@@",
          peg$literalExpectation("@@", false),
          function(v) { return [['currentthis',''],[ 'attribute',v ]] },
          function() { return [['currentthis','']] },
          function() { return [['this','']] },
          function(k, v) { 
               addToList('freeze',k);
               addInstanceVar(k);
               return 'prototype["'+k+'"]='+v[1]+';\n';
             },
          function(v) { 
          //    addToList('lock',i);
              addInstanceVars(v);
              var code='';
              code+='var t='+v[1]+';\nfor (var i in t) { prototype.__tobelocked.push(i); prototype[i]=t[i]; };\n'; 
              return code;
            },
          function(v) {
              var ivar=GlobVar();
              addInstanceVars(v);
              var proof='var '+ivar+'=function(){ var $=this; return '+v[1]+'; }\nfor (var i in '+ivar+'()) { prototype[i]=undefined; };\n'; 
              var sup=GlobVar();
              var setup= 'var '+sup+'=prototype.Constructor || function(){};\nprototype.Constructor=function() {\n'+sup+'.call(this);\n  var t='+ivar+'();\n  for (var i in t) if (t[i] !== undefined) this[i]=t[i];\n};\n'; 
              return proof+setup;
            },
          function(maj, min, patch) {
             return "'"+maj+"."+min+"."+patch+"'";
           },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields', '{'+w.join(',')+'}',v] },
          function(v) { return ['array',v.join(','),v] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields','{'+w.join(',')+'}',v] },
          function() { return null },
          function(v) { return ['literal',v] },
          function() { return ['literal','[]']; },
          function() { return ['literal','{}']; },
          function(v) { return ['literal','['+v.join(',')+']'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { return v[1] },
          /^[^\n},);|]/,
          peg$classExpectation(["\n", "}", ",", ")", ";", "|"], true, false),
          "|",
          peg$literalExpectation("|", false),
          ")",
          peg$literalExpectation(")", false),
          function(v) { return quoted(v.join('').trim()) },
          function(v, t) { return v.concat(t) },
          function(k) { return [[k,true]] },
          function(k, v) { return [[k,v]] },
          function(v, t) { 
             var r=[]; 
             for (var i in v) r=r.concat(v[i]); 
             r=r.concat(t);  
             return r; 
          },
          function(v, t) { var r=[]; for (var i in v) r=r.concat(v[i]); r=r.concat(t); return r; },
          function(v) { return v[0][1] },
          function(o) {
             var v=[];
             for (var i in o) v.push(o[i][0][1]);
             return v;
           },
          function(k) {return k},
          function(k, v) { k.push(v); return k; },
          function(v) {
             CheckScope(v,"parameter/as/given");
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          function(v, c) {return c},
          function(v, c) {
             for (var i in c) {
               v=c[i][0]+v+c[i][1];
             }
             return v;
           },
          function() { // test 'sow *'
               return ['$AI.iterate_op(',')'];
             },
          function() { // test 'keys comp*'
               return ['$AI.keys_op(',')'];
             },
          function() { // test 'values comp*'
               return ['$AI.values_op(',')'];
             },
          function(x) {
             return ['$AI.concat_op(' , ','+x+')' ];
           },
          function() { return ['$AI.collect_op(',')']; },
          function() { return ['$AI.enlist_op(',')']; },
          function() { return ['$AI.entrait_op(',')']; },
          function(o, b) {
              if (!o) o=[lp+'a',lp+'b'];
              var block=RV('function('+o[0]+','+o[1]+'){'+b+'}');
              return ['$AI.sort_op(' , ','+block+')']; 
            },
          function(x) {
             return ['$AI.sort_op(' , ','+x+')' ];
            },
          function(x) { // test 'thru inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'}',{this:'$_v',key:'$_k'});
               return ['$AI.map_op(' , ','+block+' )']; 
            },
          function(o, b) { // test 'thru block'
               var block=RV('function(^{this},^{key}){'+b+'; return ^{this};}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.map_op(' , ','+block+' )']; 
            },
          function(x) { // test 'thru using'
             return ['$AI.map_op(' , ','+x+')' ];
            },
          function(x) { // test 'audit inline *'
               var block=RV('function(^{this},^{key}){ '+x+'; }',{this:'$_v',key:'$_k'});
               return ['$AI.audit_op(' , ','+block+' )']; 
            },
          function(o, b) { // test 'audit block*'
               var block=RV('function(^{this},^{key}){'+b+' }',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.audit_op(' , ','+block+' )']; 
            },
          function(x) { // test 'audit using*'
             return ['$AI.audit_op(' , ','+x+')' ];
            },
          function(into, o, b) {
              if (!o) o=[];
              if (!o[0]) o[0]=lp+'sum'; 
              if (!o[1]) o[1]='$_v';
              if (!o[2]) o[2]='$_k';
              b+='return ^{sum};\n';
              var block=RV('function(^{sum},^{this},^{key}){'+b+'}',{sum:o[0],this:o[1],key:o[2]});
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+block+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+block+','+into+')' ];
              }
            },
          function(into, b) {
              var block=RV('function(^{sum},^{this},^{key}){ return '+b+';}',{sum:lp+'sum',this:'$_v',key:'$_k'});
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+block+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+block+','+into+')' ];
              }
            },
          function(into, x) {
              if (into=='it') {
                return ['$AI.reduce_op(' , ','+x+')' ];
              } else {
                return ['$AI.reduce_op(' , ','+x+','+into+')' ];
              }
            },
          function(x) { // test 'filter inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'; }',{this:'$_v',key:'$_k'});
               //console.log("filter comp exp");
               return ['$AI.filter_op(' , ','+block+' )']; 
            },
          function(o, b) {
               var block=RV('function(^{this},^{key}){'+b+'}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.filter_op(' , ','+block+')']; 
            },
          function(x) {
              return ['$AI.filter_op(' , ','+x+')' ];
            },
          function(x) { // test 'alter inline*'
               var block=RV('function(^{this}){ return '+x+'; }',{this:'$_v'});
               return [ '$AI.alter_op(' , ','+block+')']; 
            },
          function(o, b) { // test 'alter block*'
               var block=RV('function(^{this}){'+b+'; return ^{this}; }',{this:o?o[0]:'$_v'});
               return [ '$AI.alter_op(' , ','+block+')']; 
            },
          function(x) { // test 'alter using'
               return [ '$AI.alter_op(' , ','+x+')']; 
            },
          function(x) { // test 'observe inline'
               var block=RV('function(^{this}){ '+x+'; }',{this:'$_v'});
               return [ '$AI.observe_op(' , ','+block+')']; 
            },
          function(o, b) { // test 'observe block'
               var block=RV('function(^{this}){'+b+'; }',{this:o?o[0]:'$_v'});
               return [ '$AI.observe_op(' , ','+block+')']; 
            },
          function(x) { // test 'observe using'
               return [ '$AI.observe_op(' , ','+x+')']; 
            },
          function(q) {
             var code='({<>})';
             q=[].concat(q);
             var expr={quality:[],having:[],by:[],map:[],limit:[]};
             for (var i in q) { 
               for (var j=0; j<q[i].length; j+=2) {
                 expr[q[i][j]].push(q[i][j+1]); 
               }
             }
             var conds=[];
             if (expr.quality.length) {
               for (var i in expr.quality) { 
                 conds.push(expr.quality[i]); 
                }
             }
             if (expr.having.length) {
               var conds=conds.concat(expr.having.map(function(c){ return '('+c+')';}));
             }
             if (conds.length) {
               code=RV('$AI.filter_op(^{source},function($_v,$_k){ return ^{block}; })',{source:code,block:conds.join(' && '),this:'$_v',key:'$_k'});
             }
             if (expr.limit.length && expr.limit[0].extract && expr.by.length) { // first/last singleton with a sort
               code='$AI.reduce_op('+code+',function(a,b) { if (undefined===a) return b; var r; ';
               expr.by[0][1]*=expr.limit[0].sort; // flip sort if looking for "last"
               var conds=expr.by.map(function(c){
                 c[0]=c[0]||'^{this}';
                 var x1=RV(c[0],{this:'a'});
                 var x2=RV(c[0],{this:'b'});
                 return RV('r=$AI.compare_op(^{x1},^{x2}); if (r<0) return ^{lt}; if (r>0) return ^{gt};\n',{x1:x1,x2:x2,lt:(c[1]>0?'a':'b'),gt:(c[1]>0?'b':'a')});
               });
               code+=conds.join(' ')+'return a; },undefined)';     
             } else {
               if (expr.by.length) {
                 code='$AI.sort_op('+code+',function(a,b) { var aa,bb; ';
                 var conds=expr.by.map(function(c){
                   c[0]=c[0]||'^{this}';
                   var x1=RV('aa='+c[0]+'; ',{this:'a'});
                   var x2=RV('bb='+c[0]+'; ',{this:'b'});
                   return x1+x2+RV('if (aa<bb) return ^{lt}; if (aa>bb) return ^{gt}; ',{c:c[0],lt:-c[1],gt:c[1]});
                 });
                 code+=conds.join(' ')+'return 0; })';
               }
               if (expr.limit.length) {
                 var l=expr.limit[0];
                 if (l.slice) {
                   code='$AI.slice_op('+code+','+l.start+','+l.len+')';
                 }
                 if (l.extract) { 
                   code='$AI.element_op('+code+',0)';
                 }
                 if (l.count) {
                   code='$AI.count_op('+code+')';
                 }
               }
             } 
             return code.split('{<>}');
           },
          function() { return ['limit',{extract:true,sort:1}]; },
          function() { return ['limit',{extract:true,slice:true,start:-1}]; },
          function(s, c) { return ['limit',{slice:true,start:s,len:c}]; },
          function(s) { return ['limit',{slice:true,start:undefined,len:s}]; },
          function() { return ['limit',{count:true}]; },
          function(v) { return ['quality', '^{this}["'+v+'"]'] },
          function(v) { return ['quality', '(!^{this}["'+v+'"])'] },
          function(v) { return ['having',v] },
          function(d) { return ['by',[null,d?d:1]] },
          function(v, d) { return ['by',[v,d?d:1]] },
          function(v) { return ['by',[v,-1],'limit',{extract:true,sort:1}]},
          function(v) { return ['by',[v,1],'limit',{extract:true,sort:1}]},
          function() { return 1 },
          function() { return -1 },
          function(l, o, r) { return '('+l+o+r+')' },
          function(c, l) { return '($AI.xor_op('+c+','+l+'))' },
          function(l, f) { return '(!('+l+' && '+f+'))' },
          function(l, f) { return '(!('+l+' || '+f+'))' },
          "??",
          peg$literalExpectation("??", false),
          "::",
          peg$literalExpectation("::", false),
          function(c, l, r) { 
               return RV('((^{c})?(^{l}):(^{r}))',{c:c,l:l,r:r}); 
             },
          function() { return '&&' },
          function() { return '||' },
          function(l, o, r) { return o+'('+l+','+r+')' },
          ">=",
          peg$literalExpectation(">=", false),
          function() { return '>=' },
          ">",
          peg$literalExpectation(">", false),
          function() { return '>' },
          "=",
          peg$literalExpectation("=", false),
          function() { return '==' },
          function() { return '!==' },
          function() { return '===' },
          "<=",
          peg$literalExpectation("<=", false),
          function() { return '<=' },
          "<",
          peg$literalExpectation("<", false),
          function() { return '<' },
          "!=",
          peg$literalExpectation("!=", false),
          function() { return '!=' },
          function() { return '$AI.max_op' },
          function() { return '$AI.min_op' },
          "<=>",
          peg$literalExpectation("<=>", false),
          function() { return '$AI.compare_op' },
          function() {return '|' },
          function() {return '&'},
          function() { return '^'},
          function(l, r) { // test '**'
             return 'Math.pow('+l+','+r+')' 
           },
          function(l, op, x) {
             var p=undefined;
             if (x) {
               p=x[1];
             }
             return '('+op+').call($,('+l+'),'+p+')';
           },
          function(l, r) { // test 'overlay *'
             return '$AI.overlay_op('+l+','+r+')' 
           },
          function(l, r) { // test 'select *'
             return '$AI.select_op('+l+','+r+')' 
           },
          function(l, r) { // test 'delete *'
             return '$AI.delete_op($AI.clone_op('+l+'),'+r+')' 
           },
          function(l, r) { 
             return '$AI.expects_op('+l+','+r+')' 
           },
          function(l, r) { 
             return '('+l+').isof['+r+']'; 
           },
          function(l, v) {  // test 'default*'
               SafetyFetch=true; 
               return RV('((undefined!==($_b=^{l}))?$_b:^{v})',{l:l,v:v}); 
             },
          function(v) { return '(0-('+v+'))' },
          function(v) { return '(~('+v+'))' },
          function(v) { return '(!('+v+'))' },
          function(v) { return 'typeof ('+v+')'; },
          function(v) { return 'isNaN('+v+')'; },
          function(v) { return '($AI.number_op('+v+'))'; },
          function(v) { return '(undefined!=='+v+')' },
          function(v) { return '$AI.clone_op('+v+')'; },
          function(v) { return  'function(){return ('+v+').apply($,arguments);}'; },
          function(v) { return 'yield *'+v; },
          function(v) { return 'yield'+v; },
          function(o) { return o },
          "(",
          peg$literalExpectation("(", false),
          function(v, o) { 
             if (o) {
               addLocal(o);
               return RV('(^{out}='+v+')',{out:o}); 
             } else {
               return '('+v+')'; 
             }
            },
          /^[igm]/,
          peg$classExpectation(["i", "g", "m"], false, false),
          function(x, m) {
             var re= '/'+x.join('')+'/'+m.join('');
             return re;
           },
          "\\/",
          peg$literalExpectation("\\/", false),
          /^[^\n\r\/]/,
          peg$classExpectation(["\n", "\r", "/"], true, false),
          /^[.([|]/,
          peg$classExpectation([".", "(", "[", "|"], false, false),
          function(v) { return v; },
          /^[a-zA-Z_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
          /^[a-zA-Z_0-9]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false),
          function(v1, v2) { return v1+v2.join('') },
          function() { return 'NaN' },
          function() { return 'Infinity' },
          function() { return 'it' },
          function(v) {
             return AssembleVerb(v);
           },
          "'d",
          peg$literalExpectation("'d", false),
          function(v, b, o) {
            return AssembleVerb([{ base:b, verb:'.'+v, param:(o?o[1]:'')}]);
          },
          function(v, o) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$'+(o?(','+o[1]):'') }]; 
               return [{ base:v[0], verb:v[1], param:(o?o[1]:'') }]
            },
          function(v) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$' }]; 
               return [{ base:v[0], verb:v[1], param:'' }]
             },
          function(v, c) {
             c[0].base=v;
             return AssembleVerb(c);
           },
          function(l) { 
               return l ;
             },
          function(c) {
               return {left:c[0], right: c[1]}
            },
          function(i, o) {
               return {verb:'.'+i, param:(o?o[1]:''), test:true}; 
            },
          function(v, o) { 
             return '$AI.create_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) { 
             return '$AI.singleton_op('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) {
             return 'new '+v+'('+(o?o[1]:'')+')'; 
           },
          /^[a-zA-Z0-9_\/]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "/"], false, false),
          function(n) { return n.join('') },
          "o",
          peg$literalExpectation("o", false),
          function(v) { return v*(Math.PI/180) },
          "0b",
          peg$literalExpectation("0b", false),
          /^[0-1]/,
          peg$classExpectation([["0", "1"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*2+Number(v[i++]));
             return r.toString();
           },
          "0o",
          peg$literalExpectation("0o", false),
          /^[0-7]/,
          peg$classExpectation([["0", "7"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*8+Number(v[i++]));
             return r.toString();
           },
          "0x",
          peg$literalExpectation("0x", false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*16+v[i++]);
             return r;
           },
          "0",
          peg$literalExpectation("0", false),
          function() { return 0; },
          "1",
          peg$literalExpectation("1", false),
          function() { return 1; },
          "2",
          peg$literalExpectation("2", false),
          function() { return 2; },
          "3",
          peg$literalExpectation("3", false),
          function() { return 3; },
          "4",
          peg$literalExpectation("4", false),
          function() { return 4; },
          "5",
          peg$literalExpectation("5", false),
          function() { return 5; },
          "6",
          peg$literalExpectation("6", false),
          function() { return 6; },
          "7",
          peg$literalExpectation("7", false),
          function() { return 7; },
          "8",
          peg$literalExpectation("8", false),
          function() { return 8; },
          "9",
          peg$literalExpectation("9", false),
          function() { return 9; },
          "a",
          peg$literalExpectation("a", false),
          "A",
          peg$literalExpectation("A", false),
          function() { return 10; },
          "b",
          peg$literalExpectation("b", false),
          "B",
          peg$literalExpectation("B", false),
          function() { return 11; },
          "c",
          peg$literalExpectation("c", false),
          "C",
          peg$literalExpectation("C", false),
          function() { return 12; },
          "d",
          peg$literalExpectation("d", false),
          "D",
          peg$literalExpectation("D", false),
          function() { return 13; },
          "e",
          peg$literalExpectation("e", false),
          "E",
          peg$literalExpectation("E", false),
          function() { return 14; },
          "f",
          peg$literalExpectation("f", false),
          "F",
          peg$literalExpectation("F", false),
          function() { return 15; },
          function(r, x) { return r+'e'+x },
          function(w, f) { return Number(w+'.'+f) },
          function(v) { return -v },
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          function(v) { return parseInt(v.join('')) },
          "'",
          peg$literalExpectation("'", false),
          function(v) { return assembleLiteral(v) },
          "\"",
          peg$literalExpectation("\"", false),
          "`",
          peg$literalExpectation("`", false),
          /^[^'\n]/,
          peg$classExpectation(["'", "\n"], true, false),
          function(v) { return [true,v] },
          /^[^"\n]/,
          peg$classExpectation(["\"", "\n"], true, false),
          "'''",
          peg$literalExpectation("'''", false),
          function(v) { return v},
          function(v) { return v.join("+'\\n'+") },
          /^[^\n}]/,
          peg$classExpectation(["\n", "}"], true, false),
          function() { return [true,'\\'+"'"] },
          function() { return [true,'\\'+'"'] },
          function() { return [true,'\\'+'$'] },
          "&#123;",
          peg$literalExpectation("&#123;", false),
          function() { return [true,'\\'+'&#123;'] },
          "&#125;",
          peg$literalExpectation("&#125;", false),
          function() { return [true,'\\'+'&#125;'] },
          "n",
          peg$literalExpectation("n", false),
          function() { return [true,'\\'+'n'] },
          "r",
          peg$literalExpectation("r", false),
          function() { return [true,'\\'+'r'] },
          "t",
          peg$literalExpectation("t", false),
          function() { return [true,'\\'+'t'] },
          function() { return [true,'\\'+'b'] },
          function() { return [true,'\\'+'f'] },
          "x",
          peg$literalExpectation("x", false),
          /^[0-9a-fA-F]/,
          peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
          function(a, b) { return [true,'\\'+'x'+a+b ] },
          "u",
          peg$literalExpectation("u", false),
          function(a, b, c, d) { return [true,'\\'+'u'+a+b+c+d] },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function(a) { return [true,'\\'+'u{'+a.join('')+'}' ] },
          "${",
          peg$literalExpectation("${", false),
          function(v) { return [false,v] },
          /^[^a-zA-Z0-9_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], true, false),
          "...",
          peg$literalExpectation("...", false),
          /^[ ]/,
          peg$classExpectation([" "], false, false),
          "//",
          peg$literalExpectation("//", false),
          /^[^\r\n]/,
          peg$classExpectation(["\r", "\n"], true, false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "__source",
          peg$literalExpectation("__source", false),
          "__offset",
          peg$literalExpectation("__offset", false),
          "__column",
          peg$literalExpectation("__column", false),
          "__line",
          peg$literalExpectation("__line", false),
          "adopt",
          peg$literalExpectation("adopt", false),
          "all",
          peg$literalExpectation("all", false),
          "and",
          peg$literalExpectation("and", false),
          "andb",
          peg$literalExpectation("andb", false),
          "any",
          peg$literalExpectation("any", false),
          "arguments",
          peg$literalExpectation("arguments", false),
          "array",
          peg$literalExpectation("array", false),
          "as",
          peg$literalExpectation("as", false),
          "asc",
          peg$literalExpectation("asc", false),
          "audit",
          peg$literalExpectation("audit", false),
          "bind",
          peg$literalExpectation("bind", false),
          "blank",
          peg$literalExpectation("blank", false),
          "break",
          peg$literalExpectation("break", false),
          "by",
          peg$literalExpectation("by", false),
          "case",
          peg$literalExpectation("case", false),
          "catch",
          peg$literalExpectation("catch", false),
          "chain",
          peg$literalExpectation("chain", false),
          "collect",
          peg$literalExpectation("collect", false),
          "copy",
          peg$literalExpectation("copy", false),
          "concat",
          peg$literalExpectation("concat", false),
          "continue",
          peg$literalExpectation("continue", false),
          "contract",
          peg$literalExpectation("contract", false),
          "count",
          peg$literalExpectation("count", false),
          "counter",
          peg$literalExpectation("counter", false),
          "create",
          peg$literalExpectation("create", false),
          "dec",
          peg$literalExpectation("dec", false),
          "default",
          peg$literalExpectation("default", false),
          "delete",
          peg$literalExpectation("delete", false),
          "desc",
          peg$literalExpectation("desc", false),
          "do",
          peg$literalExpectation("do", false),
          "down",
          peg$literalExpectation("down", false),
          "each",
          peg$literalExpectation("each", false),
          "else",
          peg$literalExpectation("else", false),
          "empty",
          peg$literalExpectation("empty", false),
          "enum",
          peg$literalExpectation("enum", false),
          "enlist",
          peg$literalExpectation("enlist", false),
          "entrait",
          peg$literalExpectation("entrait", false),
          "error",
          peg$literalExpectation("error", false),
          "every",
          peg$literalExpectation("every", false),
          "exists",
          peg$literalExpectation("exists", false),
          "expects",
          peg$literalExpectation("expects", false),
          "finally",
          peg$literalExpectation("finally", false),
          "fields",
          peg$literalExpectation("fields", false),
          "first",
          peg$literalExpectation("first", false),
          "from",
          peg$literalExpectation("from", false),
          "get",
          peg$literalExpectation("get", false),
          "given",
          peg$literalExpectation("given", false),
          "has",
          peg$literalExpectation("has", false),
          "highest",
          peg$literalExpectation("highest", false),
          "if",
          peg$literalExpectation("if", false),
          "Infinity",
          peg$literalExpectation("Infinity", false),
          "instance",
          peg$literalExpectation("instance", false),
          "into",
          peg$literalExpectation("into", false),
          "inc",
          peg$literalExpectation("inc", false),
          "inherit",
          peg$literalExpectation("inherit", false),
          "isnt",
          peg$literalExpectation("isnt", false),
          "isNaN",
          peg$literalExpectation("isNaN", false),
          "is",
          peg$literalExpectation("is", false),
          "isof",
          peg$literalExpectation("isof", false),
          "iterate",
          peg$literalExpectation("iterate", false),
          "Iterator",
          peg$literalExpectation("Iterator", false),
          "it",
          peg$literalExpectation("it", false),
          "keys",
          peg$literalExpectation("keys", false),
          "key",
          peg$literalExpectation("key", false),
          "last",
          peg$literalExpectation("last", false),
          "limit",
          peg$literalExpectation("limit", false),
          "list",
          peg$literalExpectation("list", false),
          "local",
          peg$literalExpectation("local", false),
          "lowest",
          peg$literalExpectation("lowest", false),
          "me",
          peg$literalExpectation("me", false),
          "my",
          peg$literalExpectation("my", false),
          "main",
          peg$literalExpectation("main", false),
          "NaN",
          peg$literalExpectation("NaN", false),
          "nand",
          peg$literalExpectation("nand", false),
          "new",
          peg$literalExpectation("new", false),
          "nop",
          peg$literalExpectation("nop", false),
          "nor",
          peg$literalExpectation("nor", false),
          "not",
          peg$literalExpectation("not", false),
          "notb",
          peg$literalExpectation("notb", false),
          "number",
          peg$literalExpectation("number", false),
          "null",
          peg$literalExpectation("null", false),
          "object",
          peg$literalExpectation("object", false),
          "observe",
          peg$literalExpectation("observe", false),
          "orphan",
          peg$literalExpectation("orphan", false),
          "or",
          peg$literalExpectation("or", false),
          "orb",
          peg$literalExpectation("orb", false),
          "true",
          peg$literalExpectation("true", false),
          "false",
          peg$literalExpectation("false", false),
          "ply",
          peg$literalExpectation("ply", false),
          "promise",
          peg$literalExpectation("promise", false),
          "process",
          peg$literalExpectation("process", false),
          "resolve",
          peg$literalExpectation("resolve", false),
          "reject",
          peg$literalExpectation("reject", false),
          "reference",
          peg$literalExpectation("reference", false),
          "return",
          peg$literalExpectation("return", false),
          "select",
          peg$literalExpectation("select", false),
          "self",
          peg$literalExpectation("self", false),
          "set",
          peg$literalExpectation("set", false),
          "singleton",
          peg$literalExpectation("singleton", false),
          "step",
          peg$literalExpectation("step", false),
          "sum",
          peg$literalExpectation("sum", false),
          "swap",
          peg$literalExpectation("swap", false),
          "super",
          peg$literalExpectation("super", false),
          "switch",
          peg$literalExpectation("switch", false),
          "task",
          peg$literalExpectation("task", false),
          "then",
          peg$literalExpectation("then", false),
          "throw",
          peg$literalExpectation("throw", false),
          "thru",
          peg$literalExpectation("thru", false),
          "traits",
          peg$literalExpectation("traits", false),
          "trial",
          peg$literalExpectation("trial", false),
          "try",
          peg$literalExpectation("try", false),
          "to",
          peg$literalExpectation("to", false),
          "typeof",
          peg$literalExpectation("typeof", false),
          "unless",
          peg$literalExpectation("unless", false),
          "until",
          peg$literalExpectation("until", false),
          "unbound",
          peg$literalExpectation("unbound", false),
          "undefined",
          peg$literalExpectation("undefined", false),
          "update",
          peg$literalExpectation("update", false),
          "using",
          peg$literalExpectation("using", false),
          "values",
          peg$literalExpectation("values", false),
          "via",
          peg$literalExpectation("via", false),
          "while",
          peg$literalExpectation("while", false),
          "with",
          peg$literalExpectation("with", false),
          "xor",
          peg$literalExpectation("xor", false),
          "xorb",
          peg$literalExpectation("xorb", false),
          "yielding",
          peg$literalExpectation("yielding", false),
          "yield",
          peg$literalExpectation("yield", false),
          "!",
          peg$literalExpectation("!", false),
          "#",
          peg$literalExpectation("#", false),
          ":",
          peg$literalExpectation(":", false),
          function() { return ':' }
        ],

        peg$bytecode = [
          peg$decode("%;\xED/M#;\".\" &\"/?$$;#/&#0#*;#&&&#/)$8#: #\"! )(#'#(\"'#&'#"),
          peg$decode("%;\x9C/1#;\xEE/($8\":!\"!!)(\"'#&'#"),
          peg$decode("%;\u0156/C#;\xEB/:$;\x7F/1$;\xEE/($8$:\"$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u014A/\xA4#;\xEB/\x9B$;\xC7/\x92$;\xEB/\x89$;\u0140.# &;\u015B.\" &\"/u$;\xEB/l$;~.\" &\"/^$;\xEB/U$;\xEE/L$$;$0#*;$&/<$$;%0#*;%&/,$8+:#+%(&$! )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;&./ &;'.) &;(.# &;}/' 8!:$!! ).# &;\xEE"),
          peg$decode("%;*/' 8!:$!! ).# &;\xEE"),
          peg$decode("%;\u012F/C#;\xEB/:$;\x83/1$;\xEE/($8$:%$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u010E/C#;\xEB/:$;\x83/1$;\xEE/($8$:&$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC7/A#;)/8$;).\" &\"/*$8#:'##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\xEB/k#;\u0126.# &;\u015A/\\$;\xEB/S$;\x9A.\" &\"/E$;\xEB/<$;2/3$;\xEE/*$8':('#%#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;+/;#;2/2$;\xEE/)$8#:)#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;\xC7/\xA2#;\xEB/\x99$;\u0168.\" &\"/\x8B$;\xEB/\x82$;\u016C.\" &\"/t$;\xEB/k$;\u0161/b$;\xEB/Y$;1.\" &\"/K$;\xEB/B$;\x9A.\" &\"/4$;\xEB/+$8,:*,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u013B &%;,/\xA2#;\xEB/\x99$;\u0168.\" &\"/\x8B$;\xEB/\x82$;\u016C.\" &\"/t$;\xEB/k$;\u0153/b$;\xEB/Y$;1.\" &\"/K$;\xEB/B$;\x9A.\" &\"/4$;\xEB/+$8,:+,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAC &%;\xC7/\xA2#;\xEB/\x99$;\u0168.\" &\"/\x8B$;\xEB/\x82$;\u016C.\" &\"/t$;\xEB/k$;\u0152/b$;\xEB/Y$;1.\" &\"/K$;\xEB/B$;\x9A.\" &\"/4$;\xEB/+$8,:,,$+'#!)(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0135/' 8!:-!! )./ &%;\xC7/' 8!:.!! )"),
          peg$decode("%;1.\" &\"/S#;\xEB/J$;\x9A.\" &\"/<$;\xEB/3$;2/*$8%:/%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xEB/g$;\x9A.\" &\"/Y$;\xEB/P$20\"\"6071.\" &\"/<$;\xEB/3$;\x9C/*$8':2'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;1.\" &\"/S#;\xEB/J$;\x9A.\" &\"/<$;\xEB/3$;2/*$8%:3%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;1.\" &\"/p#;\xEB/g$;\x9A.\" &\"/Y$;\xEB/P$20\"\"6071.\" &\"/<$;\xEB/3$;\x9C/*$8':3'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9A.\" &\"/Z#;\xEB/Q$;\xFD.) &;\xFA.# &;\xF9/<$;\xEB/3$;\x9C/*$8%:4%#$\" )(%'#($'#(#'#(\"'#&'#.b &%;1.\" &\"/S#;\xEB/J$;\x9A.\" &\"/<$;\xEB/3$;2/*$8%:5%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;x/I#;\xEB/@$;\x84.\" &\"/2$;\xEB/)$8$:6$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0121/\x8D#;\xEB/\x84$$%;0/:#;\u017C/1$;\xEB/($8#:7#!\")(#'#(\"'#&'#0D*%;0/:#;\u017C/1$;\xEB/($8#:7#!\")(#'#(\"'#&'#&/2$;0/)$8$:8$\"! )($'#(#'#(\"'#&'#.M &%;\u0121/C#;\xEB/:$;\x84/1$;\xEB/($8$:9$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEB/j#;\xEE/a$;\u017E/X$;\xEE/O$;3/F$;\u017F/=$%<;\xEE=/##&'!&&#/($8':$'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.h &%;\xEB/^#2:\"\"6:7;/O$;\xEB/F$;5/=$%<;\xEE=/##&'!&&#/($8%:<%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;4/&#0#*;4&&&#/' 8!:=!! )"),
          peg$decode("%;5/1#;\xEE/($8\":$\"!!)(\"'#&'#"),
          peg$decode(";B._ &;I.Y &;V.S &;Y.M &;G.G &;9.A &;>.; &;=.5 &;H./ &;8.) &;6.# &;U"),
          peg$decode("%;\xC7/\xF5#9:> ! -\"\"&!&#/\xE1$;\xEB/\xD8$;7.\" &\"/\xCA$$%;\xEE/a#;\xC7/X$9:? #'$ -\"\"&!&#/B$;\xEB/9$;7.\" &\"/+$8%:@%$*'# )(%'#($'#(#'#(\"'#&'#0k*%;\xEE/a#;\xC7/X$9:? #'$ -\"\"&!&#/B$;\xEB/9$;7.\" &\"/+$8%:@%$*'# )(%'#($'#(#'#(\"'#&'#&/*$8%:A%#$! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9A.\" &\"/;#;\xEB/2$;2/)$8#:B#\"\" )(#'#(\"'#&'#./ &%;\x7F/' 8!:C!! )"),
          peg$decode("%;\u0105/0#;\xEB/'$8\":D\" )(\"'#&'#.t &%;\u010D/0#;\xEB/'$8\":E\" )(\"'#&'#.W &%;\u014C/0#;\xEB/'$8\":F\" )(\"'#&'#.: &%;\u0144/0#;\xEB/'$8\":G\" )(\"'#&'#"),
          peg$decode("%;:/\xD0#;\x98.\" &\"/\xC2$;\xEE/\xB9$;\u017E/\xB0$$%;\xEE/3#;;/*$8\":H\"#'& )(\"'#&'#/@#0=*%;\xEE/3#;;/*$8\":H\"#'& )(\"'#&'#&&&#/f$%;\xEE/4#;</+$8\":I\"$'&# )(\"'#&'#.\" &\"/=$;\xEE/4$;\u017F/+$8(:J($'&#\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0160/:#;\xEA/1$;\x9C/($8#:K#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0107/M#;\xEA/D$;\x8B/;$;\xEB/2$;2/)$8%:L%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0113/:#;\xEA/1$;2/($8#:M#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0163/:#;\xEB/1$;\x9C/($8#:N#! )(#'#(\"'#&'#"),
          peg$decode("%;?/y#%;\xEE/2#;@/)$8\":O\"\"# )(\"'#&'#.\" &\"/R$%;\xEE/3#;A/*$8\":P\"#$# )(\"'#&'#.\" &\"/*$8#:Q##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\u0167/:#;\xEB/1$;2/($8#:R#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0108/R#;\xEB/I$;\x98.\" &\"/;$;\xEB/2$;2/)$8%:S%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0122/:#;\xEB/1$;2/($8#:T#! )(#'#(\"'#&'#"),
          peg$decode("%;C/\x94#$%;\xEE/2#;D/)$8\":U\"\"$ )(\"'#&'#0<*%;\xEE/2#;D/)$8\":U\"\"$ )(\"'#&'#&/R$%;\xEE/3#;E/*$8\":V\"#$# )(\"'#&'#.\" &\"/*$8#:W##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\u0120/S#;\xEB/J$;\x9C/A$;\x98.\" &\"/3$;2/*$8%:X%#\"! )(%'#($'#(#'#(\"'#&'#.\x8E &%;\u012A/S#;\xEB/J$;\x9C/A$;\x98.\" &\"/3$;2/*$8%:Y%#\"! )(%'#($'#(#'#(\"'#&'#.N &%;\u016A/D#;\xEB/;$;\x9C/2$;2/)$8$:Z$\"! )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0119/:#;\xEB/1$;C/($8#:[#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0119/:#;\xEB/1$;2/($8#:\\#! )(#'#(\"'#&'#"),
          peg$decode("%;\u013C/\xB4#;\xEB/\xAB$$%;v/I#;\xEB/@$2]\"\"6]7^/1$;\xEB/($8$:_$!#)($'#(#'#(\"'#&'#0S*%;v/I#;\xEB/@$2]\"\"6]7^/1$;\xEB/($8$:_$!#)($'#(#'#(\"'#&'#&/;$;v/2$;\xEB/)$8%:`%\"\"!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0173/S#;\xEA/J$;\x9C/A$;\x98.\" &\"/3$;2/*$8%:a%#\"! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015E/M#;\xEA/D$;]/;$;\xEA/2$;]/)$8%:b%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015A/:#;\xEB/1$;J/($8#:c#! )(#'#(\"'#&'#.\u016A &%;\u015A/^#;\xEA/U$;\xEE/L$;\u017E/C$;\xEE/:$;L/1$;\u017F/($8':d'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u011F &%;\u013C/:#;\xEB/1$;N/($8#:c#! )(#'#(\"'#&'#.\xF8 &%;\u013C/^#;\xEA/U$;\xEE/L$;\u017E/C$;\xEE/:$;P/1$;\u017F/($8':d'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAD &%;\u012E/C#;\xEB/:$;a/1$;\xEB/($8$:e$!!)($'#(#'#(\"'#&'#.} &%;\u0112/C#;\xEB/:$;a/1$;\xEB/($8$:f$!!)($'#(#'#(\"'#&'#.M &%;\u0114/C#;\xEB/:$;a/1$;\xEB/($8$:g$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;M/\xA4#;\xEB/\x9B$$%2]\"\"6]7^/D#;\xEB/;$;M/2$;\xEB/)$8$:h$\"'!)($'#(#'#(\"'#&'#0T*%2]\"\"6]7^/D#;\xEB/;$;M/2$;\xEB/)$8$:h$\"'!)($'#(#'#(\"'#&'#&/)$8#:i#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;J/1#;\xEE/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;K/&#0#*;K&&&#/' 8!:j!! )"),
          peg$decode("%;^/S#;\xEB/J$2k\"\"6k7l/;$;\xEB/2$;\x9C/)$8%:m%\"$ )(%'#($'#(#'#(\"'#&'#.\xF5 &%;^/N#;\xEB/E$;T/<$;\xEB/3$;\x9C/*$8%:n%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;[/\x88#;\xEB/\x7F$;\u0168.\" &\".S &%<;\u0125=/##&'!&&#.A &%<;\u0178=/##&'!&&#./ &%<;\u0109=/##&'!&&#/;$;\xEB/2$;\x9C/)$8%:o%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;^/;#;\xEB/2$;S/)$8#:p#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;Q/\xA4#;\xEB/\x9B$$%2]\"\"6]7^/D#;\xEB/;$;Q/2$;\xEB/)$8$:h$\"'!)($'#(#'#(\"'#&'#0T*%2]\"\"6]7^/D#;\xEB/;$;Q/2$;\xEB/)$8$:h$\"'!)($'#(#'#(\"'#&'#&/)$8#:i#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;N/1#;\xEE/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;O/&#0#*;O&&&#/' 8!:j!! )"),
          peg$decode("%;^/N#;\xEB/E$;T/<$;\xEB/3$;\x9C/*$8%:q%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;[/\x88#;\xEB/\x7F$;\u0168.\" &\".S &%<;\u0125=/##&'!&&#.A &%<;\u0178=/##&'!&&#./ &%<;\u0109=/##&'!&&#/;$;\xEB/2$;\x9C/)$8%:r%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;^/;#;\xEB/2$;S/)$8#:s#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\u013C/0#;\xEA/'$8\":t\" )(\"'#&'#"),
          peg$decode("2k\"\"6k7l./ &;\u0114.) &;\u0147.# &;\u0146"),
          peg$decode("2u\"\"6u7v.\xE9 &2k\"\"6k7l.\xDD &2w\"\"6w7x.\xD1 &2y\"\"6y7z.\xC5 &2{\"\"6{7|.\xB9 &2}\"\"6}7~.\xAD &2\x7F\"\"6\x7F7\x80.\xA1 &2\x81\"\"6\x817\x82.\x95 &2\x83\"\"6\x837\x84.\x89 &;\xFC.\x83 &;\u014E.} &;\u0175.w &;\xFB.q &;\u014D.k &;\u0174.e &;\u0142._ &;\u0145.Y &2\x85\"\"6\x857\x86.M &2\x87\"\"6\x877\x88.A &;\u016E.; &;\u0114.5 &;\u0113./ &2\x89\"\"6\x897\x8A.# &;\u010C"),
          peg$decode("%;\xCC/' 8!:\x8B!! ).A &%;\xCB/' 8!:\x8C!! )./ &%;\xCE/' 8!:\x8D!! )"),
          peg$decode("%;\u0157/N#%;\xEA/1#;\x9C/($8\":\x8E\"! )(\"'#&'#.\" &\"/($8\":\x8F\"! )(\"'#&'#.\x98 &%;W/@#;\xEA/7$;\x9C.\" &\"/)$8#:\x90#\"\" )(#'#(\"'#&'#.k &%;\u0176/:#;\xEA/1$;\x9C/($8#:\x91#! )(#'#(\"'#&'#.D &%;\u0177/:#;\xEA/1$;\x9C/($8#:\x92#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0154/& 8!:\x93! ).. &%;\u0155/& 8!:\x94! )"),
          peg$decode("%;\u0119/:#;\xEA/1$;2/($8#:\x95#! )(#'#(\"'#&'#"),
          peg$decode("%;\u011F/}#;\xEA/t$;\x9C/k$;\x99.\" &\"/]$;2/T$%;\xEE/4#;X/+$8\":\x96\"$%$# )(\"'#&'#.\" &\"/+$8&:\x97&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u0598 &%;\u011F/\x88#;\xEA/\x7F$;\x9C/v$;\xEB/m$;\u016F/d$;\xEA/[$;\xC2/R$%;\xEE/3#;X/*$8\":\x98\"#'# )(\"'#&'#.\" &\"/*$8(:\x99(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0523 &%;\u0134/}#;\xEA/t$;\x9C/k$;\x99.\" &\"/]$;2/T$%;\xEE/4#;X/+$8\":\x96\"$%$# )(\"'#&'#.\" &\"/+$8&:\x9A&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u04B9 &%;\u0134/\x88#;\xEA/\x7F$;\x9C/v$;\xEB/m$;\u016F/d$;\xEA/[$;\xC2/R$%;\xEE/3#;X/*$8\":\x98\"#'# )(\"'#&'#.\" &\"/*$8(:\x9B(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0444 &%;\u0118/}#;\xEA/t$;\x9C/k$;\x99.\" &\"/]$;2/T$%;\xEE/4#;X/+$8\":\x96\"$%$# )(\"'#&'#.\" &\"/+$8&:\x9C&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u03DA &%;\u0118/\x88#;\xEA/\x7F$;\x9C/v$;\xEB/m$;\u016F/d$;\xEA/[$;\xC2/R$%;\xEE/3#;X/*$8\":\x9D\"#'# )(\"'#&'#.\" &\"/*$8(:\x9E(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0365 &%;\u0151/}#;\xEA/t$;\x9C/k$;\x99.\" &\"/]$;2/T$%;\xEE/4#;X/+$8\":\x96\"$%$# )(\"'#&'#.\" &\"/+$8&:\x9F&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u02FB &%;\u0151/\x88#;\xEA/\x7F$;\x9C/v$;\xEB/m$;\u016F/d$;\xEA/[$;\xC2/R$%;\xEE/3#;X/*$8\":\x9D\"#'# )(\"'#&'#.\" &\"/*$8(:\xA0(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0286 &%;\u010F/\xD1#;\xEA/\xC8$;\u0117/\xBF$;\xEA/\xB6$;\x9C/\xAD$%;\u0168/;#;\xEA/2$;\x9C/)$8#:\xA1#\"$ )(#'#(\"'#&'#.\" &\"/}$;Z.\" &\"/o$;\x99.\" &\"/a$;2/X$%;\xEE/6#;X/-$8\":\xA2\"&'&%$# )(\"'#&'#.\" &\"/-$8*:\xA3*&%$#\"! )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01C8 &%;\u010F/\xC7#;\xEA/\xBE$%;\x9C/C#;\xEB/:$;\u0168/1$;\xEA/($8$:\xA4$!#)($'#(#'#(\"'#&'#.\" &\"/\x86$;\x9C/}$;Z.\" &\"/o$;\x99.\" &\"/a$;2/X$%;\xEE/6#;X/-$8\":\xA2\"&'&%$# )(\"'#&'#.\" &\"/-$8(:\xA5(&%$#\"! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0114 &%;\u0172/S#;\xEA/J$;\x9C/A$;\x99.\" &\"/3$;2/*$8%:\xA6%#\"! )(%'#($'#(#'#(\"'#&'#.\xD4 &%;\u016B/D#;\xEA/;$;\x9C/2$;2/)$8$:\xA7$\"! )($'#(#'#(\"'#&'#.\xA3 &%;\u0116/V#;\xEA/M$;\u0172/D$;\xEA/;$;\x9C/2$;2/)$8&:\xA8&\"! )(&'#(%'#($'#(#'#(\"'#&'#.` &%;\u0116/V#;\xEA/M$;\u016B/D$;\xEA/;$;\x9C/2$;2/)$8&:\xA9&\"! )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015C/C#;\xEA/:$;\x9C/1$;\xEB/($8$:$$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;]/B#$;\\0#*;\\&/2$;\xEB/)$8#:\xAA#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%2]\"\"6]7^/:#;\xEB/1$;]/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;d/' 8!:\xAB!! )"),
          peg$decode("%;a/9#$;_0#*;_&/)$8\":\xAA\"\"! )(\"'#&'#"),
          peg$decode("%2]\"\"6]7^/:#;\xEB/1$;a/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;|/' 8!:\xAC!! )"),
          peg$decode("%;e/' 8!:\xAC!! )"),
          peg$decode("%;e/' 8!:\xAD!! )"),
          peg$decode("%;f/' 8!:\xAE!! )"),
          peg$decode(";n.G &;g.A &;i.; &;h.5 &;m./ &;k.) &;j.# &;o"),
          peg$decode(";n.G &;g.A &;i.; &;h.5 &;m./ &;l.) &;j.# &;o"),
          peg$decode(";e.\xAD &%;\u0161/C#;\xEA/:$;-/1$;\xEB/($8$:\xAF$!!)($'#(#'#(\"'#&'#.} &%;\u0153/C#;\xEA/:$;./1$;\xEB/($8$:\xAF$!!)($'#(#'#(\"'#&'#.M &%;\u0152/C#;\xEA/:$;//1$;\xEB/($8$:\xAF$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015F/0#;\xEB/'$8\":\xB0\" )(\"'#&'#"),
          peg$decode("%;{/Q#$;q.) &;t.# &;r0/*;q.) &;t.# &;r&/)$8\":\xB1\"\"! )(\"'#&'#"),
          peg$decode("%;s/Q#$;q.) &;t.# &;r0/*;q.) &;t.# &;r&/)$8\":\xB1\"\"! )(\"'#&'#"),
          peg$decode("%;z/Q#$;q.) &;t.# &;r0/*;q.) &;t.# &;r&/)$8\":\xB1\"\"! )(\"'#&'#"),
          peg$decode("%;v/Q#$;q.) &;t.# &;r0/*;q.) &;t.# &;r&/)$8\":\xB1\"\"! )(\"'#&'#"),
          peg$decode("%;w/Q#$;q.) &;t.# &;r0/*;q.) &;t.# &;r&/)$8\":\xB1\"\"! )(\"'#&'#"),
          peg$decode("%;x/Q#$;q.) &;t.# &;r0/*;q.) &;t.# &;r&/)$8\":\xB2\"\"! )(\"'#&'#"),
          peg$decode("%;p/Q#$;q.) &;t.# &;r0/*;q.) &;t.# &;r&/)$8\":\xB2\"\"! )(\"'#&'#"),
          peg$decode("%;u.# &;y/Q#$;q.) &;t.# &;r0/*;q.) &;t.# &;r&/)$8\":\xB2\"\"! )(\"'#&'#"),
          peg$decode("%;\u0136/0#;\xEA/'$8\":\xB3\" )(\"'#&'#.\xCB &%;\u0138/0#;\xEA/'$8\":\xB4\" )(\"'#&'#.\xAE &%;\u0110/0#;\xEA/'$8\":\xB5\" )(\"'#&'#.\x91 &%;\u0166/0#;\xEA/'$8\":\xB6\" )(\"'#&'#.t &%;\u015D/0#;\xEA/'$8\":\xB7\" )(\"'#&'#.W &%;\u0159/0#;\xEA/'$8\":\xB8\" )(\"'#&'#.: &%;\u011E/0#;\xEA/'$8\":\xB9\" )(\"'#&'#"),
          peg$decode("%;\u0179/1#;\xC8/($8\":\xBA\"! )(\"'#&'#.J &%2\xBB\"\"6\xBB7\xBC/:#;\xEA/1$;\xC8/($8#:\xBA#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0181/Z#;\xEB/Q$;\x7F.\" &\"/C$;\xEB/:$;\u0182/1$;\xEB/($8&:\xBD&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0179/F#%<;\u0179=.##&&!&'#/1$;\xC8/($8#:\xBE#! )(#'#(\"'#&'#.d &%;\u0179/1#;\xDE/($8\":\xBF\"! )(\"'#&'#.F &%;\u0179/<#%<;\u0179=.##&&!&'#/'$8\":\xC0\" )(\"'#&'#"),
          peg$decode("%2\xC1\"\"6\xC17\xC2/R#;\xEB/I$;\x9C/@$;\xEB/7$2\xC3\"\"6\xC37\xC4/($8%:\xC5%!\")(%'#($'#(#'#(\"'#&'#.e &%2\xC6\"\"6\xC67\xC7/1#;`/($8\":\xC8\"! )(\"'#&'#.A &%2\xC9\"\"6\xC97\xCA/1#;\xDE/($8\":\xC5\"! )(\"'#&'#"),
          peg$decode("%;\u0181/L#;\xEB/C$;\x9C/:$;\xEB/1$;\u0182/($8%:\xCB%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC7/' 8!:\xCC!! )"),
          peg$decode("%;\xC7/' 8!:\xCD!! )"),
          peg$decode("%2\xCE\"\"6\xCE7\xCF/& 8!:\xD0! ).u &%;\xFE/0#;\xEB/'$8\":\xD0\" )(\"'#&'#.X &%2\xD1\"\"6\xD17\xD2/1#;\xC8/($8\":\xD3\"! )(\"'#&'#.4 &%2\xD1\"\"6\xD17\xD2/& 8!:\xD4! )"),
          peg$decode("%;\xC9/' 8!:\xD5!! )"),
          peg$decode("%2\xD6\"\"6\xD67\xD7/1#;\xC8/($8\":\xD8\"! )(\"'#&'#"),
          peg$decode("%2\xD9\"\"6\xD97\xDA/1#;\xC8/($8\":\xDB\"! )(\"'#&'#.\xB3 &%;\u013F/:#;\xEA/1$;\xC8/($8#:\xDB#! )(#'#(\"'#&'#.\x8C &%2\xDC\"\"6\xDC7\xDD/1#;\xC8/($8\":\xDE\"! )(\"'#&'#.h &%2\xDC\"\"6\xDC7\xDD/& 8!:\xDF! ).Q &%2\xD9\"\"6\xD97\xDA/& 8!:\xE0! ).: &%;\u013E/0#;\xEB/'$8\":\xE0\" )(\"'#&'#"),
          peg$decode(";p.Y &;w.S &;x.M &;{.G &;s.A &%;\xD4/' 8!:\xAF!! )./ &%;\xE1/' 8!:\xAF!! )"),
          peg$decode("%;\u0127/V#;\xEB/M$;\xC7/D$;\xEB/;$;\x80/2$;\xEE/)$8&:\xE1&\"#!)(&'#(%'#($'#(#'#(\"'#&'#.} &%;\u0127/C#;\xEB/:$;\x82/1$;\xEE/($8$:\xE2$!!)($'#(#'#(\"'#&'#.M &%;\u012C/C#;\xEB/:$;\x82/1$;\xEE/($8$:\xE3$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xDE/N#;\u0179/E$;\xDE/<$;\u0179/3$;\xDE/*$8%:\xE4%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u017D/^#;\xEB/U$;\xEE/L$;\u017E/C$;\xEE/:$;\x97/1$;\u017F/($8':\xE5'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xD1 &%;\u017D/^#;\xEB/U$;\xEE/L$;\u017E/C$;\xEE/:$;\x8D/1$;\u017F/($8':\xE6'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x86 &%;\x8B/<#20\"\"6071.\" &\"/($8\":\xE6\"!!)(\"'#&'#.] &%;\x95/<#20\"\"6071.\" &\"/($8\":\xE7\"!!)(\"'#&'#.4 &%20\"\"6071/& 8!:\xE8! )"),
          peg$decode("%;\xEB/1#;\x9C/($8\":\xE9\"! )(\"'#&'#"),
          peg$decode("%;\xEB/9#;\u011A/0$;\xEB/'$8#:\xEA# )(#'#(\"'#&'#.\u02EB &%;\xEB/9#;\u0104/0$;\xEB/'$8#:\xEB# )(#'#(\"'#&'#.\u02C5 &%;\xEB/c#;\u013B/Z$;\xEB/Q$;\x87/H$;\xEB/?$;\u017B.\" &\"/1$;\xEB/($8':\xEC'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0275 &%;\xEB/g#;\u013B/^$;\xEB/U$;\xEE/L$;\u017E/C$;\xEE/:$;\x89/1$;\u017F/($8(:\xEC(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0221 &%;\xEB/c#;\u0165/Z$;\xEB/Q$;\x90/H$;\xEB/?$;\u017B.\" &\"/1$;\xEB/($8':\xED'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01D1 &%;\xEB/g#;\u0165/^$;\xEB/U$;\xEE/L$;\u017E/C$;\xEE/:$;\x92/1$;\u017F/($8(:\xEE(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u017D &%;\xEB/i#;\u017D.# &;\u0123/Z$;\xEB/Q$;\x95/H$;\xEB/?$;\u017B.\" &\"/1$;\xEB/($8':\xEF'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0127 &%;\xEB/m#;\u017D.# &;\u0123/^$;\xEB/U$;\xEE/L$;\u017E/C$;\xEE/:$;\x97/1$;\u017F/($8(:\xF0(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xCD &%;\xEB/i#;\u017D.# &;\xFF/Z$;\xEB/Q$;\x8B/H$;\xEB/?$;\u017B.\" &\"/1$;\xEB/($8':\xEC'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xEB/m#;\u017D.# &;\xFF/^$;\xEB/U$;\xEE/L$;\u017E/C$;\xEE/:$;\x8D/1$;\u017F/($8(:\xEC(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEB/i#;\u017D.# &;\u0123/Z$;\xEB/Q$;\x95/H$;\xEB/?$;\u017B.\" &\"/1$;\xEB/($8':\xEF'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xEB/m#;\u017D.# &;\u0123/^$;\xEB/U$;\xEE/L$;\u017E/C$;\xEE/:$;\x97/1$;\u017F/($8(:\xF0(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEB/i#;\u017D.# &;\u013B/Z$;\xEB/Q$;\x87/H$;\xEB/?$;\u017B.\" &\"/1$;\xEB/($8':$'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xEB/m#;\u017D.# &;\u013B/^$;\xEB/U$;\xEE/L$;\u017E/C$;\xEE/:$;\x89/1$;\u017F/($8(:$(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0180/:#;\xEB/1$;\x9C/($8#:$#! )(#'#(\"'#&'#._ &%;\x81/' 8!:\xF1!! ).M &;\xE4.G &;\xD4.A &;\u014F.; &;\u0150.5 &;\u016D./ &;\u0149.) &;\xE1.# &;\x85"),
          peg$decode("%$4\xF2\"\"5!7\xF3/,#0)*4\xF2\"\"5!7\xF3&&&#/m#%<2\xF4\"\"6\xF47\xF5.G &2]\"\"6]7^.; &2\xF6\"\"6\xF67\xF7./ &20\"\"6071.# &;\xEE=/##&'!&&#/($8\":\xF8\"!!)(\"'#&'#"),
          peg$decode("%;\x84/C#;\xEB/:$;\u017C/1$;\xEB/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x860#*;\x86&/2#;\x84/)$8\":\xF9\"\"! )(\"'#&'#"),
          peg$decode("%;\x87/1#;\xEE/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x88/&#0#*;\x88&&&#/' 8!:j!! )"),
          peg$decode("%;\x9C/C#;\xEB/:$;\u017C/1$;\xEB/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x8A0#*;\x8A&/2#;\x9C/)$8\":\xF9\"\"! )(\"'#&'#"),
          peg$decode("%;\x8B/1#;\xEE/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x8C/&#0#*;\x8C&&&#/' 8!:j!! )"),
          peg$decode("%;\u017A/:#;\xC6/1$;\xEB/($8#:\xFA#!!)(#'#(\"'#&'#.N &%;\xC6/D#;\xEA/;$;\x84/2$;\xEB/)$8$:\xFB$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x8E/C#;\xEB/:$;\u017C/1$;\xEB/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x8F0#*;\x8F&/2#;\x8E/)$8\":\xFC\"\"! )(\"'#&'#"),
          peg$decode("%;\x90/1#;\xEE/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x91/&#0#*;\x91&&&#/' 8!:j!! )"),
          peg$decode("%;\u017A/:#;\xC6/1$;\xEB/($8#:\xFA#!!)(#'#(\"'#&'#.T &%;\xC6/J#;\xEA/A$;\x9C.# &;\u011B/2$;\xEB/)$8$:\xFB$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x93/C#;\xEB/:$;\u017C/1$;\xEB/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x940#*;\x94&/2#;\x93/)$8\":\xFD\"\"! )(\"'#&'#"),
          peg$decode("%;\x95/1#;\xEE/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x96/&#0#*;\x96&&&#/' 8!:j!! )"),
          peg$decode("%;\u0100/C#;\xEB/:$;\x9B/1$;\xEB/($8$:\xFE$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9A/' 8!:\xFF!! )"),
          peg$decode("%;\u0100.# &;\u0127/\xA8#;\xEB/\x9F$$%;\x9B/C#;\xEB/:$;\u017C/1$;\xEB/($8$:\u0100$!#)($'#(#'#(\"'#&'#0M*%;\x9B/C#;\xEB/:$;\u017C/1$;\xEB/($8$:\u0100$!#)($'#(#'#(\"'#&'#&/;$;\xEB/2$;w/)$8%:\u0101%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xC7/' 8!:\u0102!! )"),
          peg$decode(";\x9D"),
          peg$decode("%;\xB8/t#;\xEB/k$$%;\x9E/2#;\xEB/)$8\":\u0103\"\"%!)(\"'#&'#0<*%;\x9E/2#;\xEB/)$8\":\u0103\"\"%!)(\"'#&'#&/)$8#:\u0104#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\xA6.e &;\xA8._ &;\xAA.Y &;\xA0.S &;\xA1.M &;\x9F.G &;\xA3.A &;\xAE.; &;\xB0.5 &;\xB2./ &;\xAC.) &;\xA4.# &;\xA2"),
          peg$decode("%;\u0134/& 8!:\u0105! )"),
          peg$decode("%;\u0137/& 8!:\u0106! )"),
          peg$decode("%;\u0170/& 8!:\u0107! )"),
          peg$decode("%;\u010C/:#;\xEA/1$;\x9C/($8#:\u0108#! )(#'#(\"'#&'#"),
          peg$decode("%;\u010A/& 8!:\u0109! ).? &%;\u011C/& 8!:\u010A! ).. &%;\u011D/& 8!:\u010B! )"),
          peg$decode("%;\u0106/:#;\xEA/1$;\xA5/($8#:\xA4#! )(#'#(\"'#&'#"),
          peg$decode("%;\x99.\" &\"/2#;2/)$8\":\u010C\"\"! )(\"'#&'#.D &%;\u016F/:#;\xEA/1$;\xC2/($8#:\u010D#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0164/:#;\xEA/1$;\xA7/($8#:\xA4#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9C/' 8!:\u010E!! ).\xAA &%;\u0181/U#;\xEB/L$;\x9C/C$;\xEB/:$;\u0182/1$;\xEB/($8&:\u010E&!#)(&'#(%'#($'#(#'#(\"'#&'#.h &%;\x99.\" &\"/2#;2/)$8\":\u010F\"\"! )(\"'#&'#.D &%;\u016F/:#;\xEA/1$;\xC2/($8#:\u0110#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0102/:#;\xEA/1$;\xA9/($8#:\xA4#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0181/U#;\xEB/L$;\x9C/C$;\xEB/:$;\u0182/1$;\xEB/($8&:\u0111&!#)(&'#(%'#($'#(#'#(\"'#&'#.z &%;\x9C/' 8!:\u0111!! ).h &%;\x99.\" &\"/2#;2/)$8\":\u0112\"\"! )(\"'#&'#.D &%;\u016F/:#;\xEA/1$;\xC2/($8#:\u0113#! )(#'#(\"'#&'#"),
          peg$decode("%;\u012D/:#;\xEA/1$;\xAB/($8#:\xA4#! )(#'#(\"'#&'#"),
          peg$decode("%;\xCA/A#;\x99.\" &\"/3$;2/*$8#:\u0114##\"! )(#'#(\"'#&'#.m &%;\xCA/2#;\x9C/)$8\":\u0115\"\"! )(\"'#&'#.N &%;\xCA/D#;\u016F/;$;\xEA/2$;\xC2/)$8$:\u0116$\"# )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0128/:#;\xEA/1$;\xAD/($8#:\xA4#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9C/' 8!:\u0117!! ).h &%;\x99.\" &\"/2#;2/)$8\":\u0118\"\"! )(\"'#&'#.D &%;\u016F/:#;\xEA/1$;\xC2/($8#:\u0119#! )(#'#(\"'#&'#"),
          peg$decode("%;\u015A/:#;\xEA/1$;\xAF/($8#:\xA4#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9C/' 8!:\u011A!! ).h &%;\x99.\" &\"/2#;2/)$8\":\u011B\"\"! )(\"'#&'#.D &%;\u016F/:#;\xEA/1$;\xC2/($8#:\u011C#! )(#'#(\"'#&'#"),
          peg$decode("%;\u014B/:#;\xEA/1$;\xB1/($8#:\xA4#! )(#'#(\"'#&'#"),
          peg$decode("%;\x9C/' 8!:\u011D!! ).h &%;\x99.\" &\"/2#;2/)$8\":\u011E\"\"! )(\"'#&'#.D &%;\u016F/:#;\xEA/1$;\xC2/($8#:\u011F#! )(#'#(\"'#&'#"),
          peg$decode("%;\xEB/k#$;\xB4./ &;\xB5.) &;\xB6.# &;\xB3/8#05*;\xB4./ &;\xB5.) &;\xB6.# &;\xB3&&&#/1$;\xEB/($8#:\u0120#!!)(#'#(\"'#&'#"),
          peg$decode("%;\u0124/0#;\xEB/'$8\":\u0121\" )(\"'#&'#.\xDC &%;\u0139/0#;\xEB/'$8\":\u0122\" )(\"'#&'#.\xBF &%;\u013A/h#;\xEB/_$;\xB8/V$;\xEB/M$;\u017C/D$;\xEB/;$;\xB8/2$;\xEB/)$8(:\u0123(\"%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.j &%;\u013A/C#;\xEB/:$;\xB8/1$;\xEB/($8$:\u0124$!!)($'#(#'#(\"'#&'#.: &%;\u010F/0#;\xEB/'$8\":\u0125\" )(\"'#&'#"),
          peg$decode("%;\u017A/:#;\xC6/1$;\xEB/($8#:\u0126#!!)(#'#(\"'#&'#.M &%;\u0178/C#;\u017A/:$;\xC6/1$;\xEB/($8$:\u0127$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0128/C#;\xEB/:$;\xB8/1$;\xEB/($8$:\u0128$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0106/C#;\xEB/:$;\xB7/1$;\xEB/($8$:\u0129$!!)($'#(#'#(\"'#&'#.\xBC &%;\u0106/R#;\xEB/I$;\xB8/@$;\xB7.\" &\"/2$;\xEB/)$8%:\u012A%\"\"!)(%'#($'#(#'#(\"'#&'#.} &%;\u0129/C#;\xEB/:$;\xB8/1$;\xEB/($8$:\u012B$!!)($'#(#'#(\"'#&'#.M &%;\u013D/C#;\xEB/:$;\xB8/1$;\xEB/($8$:\u012C$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0101/0#;\xEB/'$8\":\u012D\" )(\"'#&'#.: &%;\u0115/0#;\xEB/'$8\":\u012E\" )(\"'#&'#"),
          peg$decode("%;\xBA/N#;\xEB/E$;\xB9/<$;\xEB/3$;\xB8/*$8%:\u012F%#$\" )(%'#($'#(#'#(\"'#&'#.\u0154 &%;\xBA/M#;\xEB/D$;\u0174/;$;\xEB/2$;\xB8/)$8%:\u0130%\"$ )(%'#($'#(#'#(\"'#&'#.\u011A &%;\xBA/M#;\xEB/D$;\u0142/;$;\xEB/2$;\xB8/)$8%:\u0131%\"$ )(%'#($'#(#'#(\"'#&'#.\xE0 &%;\xBA/M#;\xEB/D$;\u0145/;$;\xEB/2$;\xB8/)$8%:\u0132%\"$ )(%'#($'#(#'#(\"'#&'#.\xA6 &%;\xBA/~#;\xEB/u$2\u0133\"\"6\u01337\u0134/f$;\xEB/]$;\xB8/T$;\xEB/K$2\u0135\"\"6\u01357\u0136/<$;\xEB/3$;\xB8/*$8):\u0137)#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xBA/1#;\xEB/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xFB/0#;\xEA/'$8\":\u0138\" )(\"'#&'#.: &%;\u014D/0#;\xEA/'$8\":\u0139\" )(\"'#&'#"),
          peg$decode("%;\xBD/N#;\xEB/E$;\xBC/<$;\xEB/3$;\xBA/*$8%:\u013A%#$\" )(%'#($'#(#'#(\"'#&'#.v &%;\xBD/N#;\xEB/E$;\xBB/<$;\xEB/3$;\xBA/*$8%:\u012F%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xBD/1#;\xEB/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%2\u013B\"\"6\u013B7\u013C/& 8!:\u013D! ).\u0106 &%2\u013E\"\"6\u013E7\u013F/B#%<2\u013E\"\"6\u013E7\u013F=.##&&!&'#/'$8\":\u0140\" )(\"'#&'#.\xD1 &%2\u0141\"\"6\u01417\u0142/& 8!:\u0143! ).\xBA &%;\u0130/0#;\xEA/'$8\":\u0144\" )(\"'#&'#.\x9D &%;\u0132/0#;\xEA/'$8\":\u0145\" )(\"'#&'#.\x80 &%2\u0146\"\"6\u01467\u0147/& 8!:\u0148! ).i &%2\u0149\"\"6\u01497\u014A/B#%<2\u0149\"\"6\u01497\u014A=.##&&!&'#/'$8\":\u014B\" )(\"'#&'#.4 &%2\u014C\"\"6\u014C7\u014D/& 8!:\u014E! )"),
          peg$decode("%2\x85\"\"6\x857\x86/& 8!:\u014F! ).K &%2\x87\"\"6\x877\x88/& 8!:\u0150! ).4 &%2\u0151\"\"6\u01517\u0152/& 8!:\u0153! )"),
          peg$decode("%;\xBF/N#;\xEB/E$;\xBE/<$;\xEB/3$;\xBD/*$8%:\u012F%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xBF/1#;\xEB/($8\":$\"!!)(\"'#&'#"),
          peg$decode("2u\"\"6u7v.\x80 &2k\"\"6k7l.t &%;\u014E/0#;\xEA/'$8\":\u0154\" )(\"'#&'#.W &%;\xFC/0#;\xEA/'$8\":\u0155\" )(\"'#&'#.: &%;\u0175/0#;\xEA/'$8\":\u0156\" )(\"'#&'#"),
          peg$decode(";\xC0.\u022A &%;\xC2/N#;\xEB/E$;\xC1/<$;\xEB/3$;\xBF/*$8%:\u012F%#$\" )(%'#($'#(#'#(\"'#&'#.\u01EF &%;\xC2/S#;\xEB/J$2w\"\"6w7x/;$;\xEB/2$;\xBF/)$8%:\u0157%\"$ )(%'#($'#(#'#(\"'#&'#.\u01AF &%;\xC2/e#;\xEB/\\$;\u0171/S$;\xEB/J$;\xC2/A$;\xEB/8$;\x7F.\" &\"/*$8':\u0158'#&\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.\u015D &%;\xC2/M#;\xEB/D$;\u016E/;$;\xEA/2$;\xBF/)$8%:\u0159%\"$ )(%'#($'#(#'#(\"'#&'#.\u0123 &%;\xC2/M#;\xEB/D$;\u0158/;$;\xEA/2$;\xBF/)$8%:\u015A%\"$ )(%'#($'#(#'#(\"'#&'#.\xE9 &%;\xC2/M#;\xEB/D$;\u0114/;$;\xEA/2$;\xBF/)$8%:\u015B%\"$ )(%'#($'#(#'#(\"'#&'#.\xAF &%;\xC2/M#;\xEB/D$;\u0121/;$;\xEA/2$;\xBF/)$8%:\u015C%\"$ )(%'#($'#(#'#(\"'#&'#.u &%;\xC2/M#;\xEB/D$;\u0133/;$;\xEA/2$;\xBF/)$8%:\u015D%\"$ )(%'#($'#(#'#(\"'#&'#.; &%;\xC2/1#;\xEB/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xC2/M#;\xEB/D$;\u0113/;$;\xEB/2$;\xBF/)$8%:\u015E%\"$ )(%'#($'#(#'#(\"'#&'#.x &%;\xC2/n#;\xEB/e$2\x89\"\"6\x897\x8A/V$%<2\x89\"\"6\x897\x8A=.##&&!&'#/;$;\xEB/2$;\xBF/)$8&:\u015E&\"% )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2y\"\"6y7z.Y &2{\"\"6{7|.M &2}\"\"6}7~.A &2\x83\"\"6\x837\x84.5 &2\x81\"\"6\x817\x82.) &2\x7F\"\"6\x7F7\x80"),
          peg$decode("%2k\"\"6k7l/C#;\xEB/:$;\xC2/1$;\xEB/($8$:\u015F$!!)($'#(#'#(\"'#&'#.\u03EB &%;\u0147/C#;\xEA/:$;\xC2/1$;\xEB/($8$:\u0160$!!)($'#(#'#(\"'#&'#.\u03BB &%;\u0146/C#;\xEA/:$;\xC2/1$;\xEB/($8$:\u0161$!!)($'#(#'#(\"'#&'#.\u038B &%;\u0169/C#;\xEA/:$;\xC2/1$;\xEB/($8$:\u0162$!!)($'#(#'#(\"'#&'#.\u035B &%;\u0131/C#;\xEA/:$;\xC2/1$;\xEB/($8$:\u0163$!!)($'#(#'#(\"'#&'#.\u032B &%;\u0148/:#;\xEA/1$;\xC2/($8#:\u0164#! )(#'#(\"'#&'#.\u0304 &%;\u0120/C#;\xEA/:$;\xC2/1$;\xEB/($8$:\u0165$!!)($'#(#'#(\"'#&'#.\u02D4 &%;\u010B/C#;\xEA/:$;\xC2/1$;\xEB/($8$:\u0166$!!)($'#(#'#(\"'#&'#.\u02A4 &%;\u0161/C#;\xEA/:$;-/1$;\xEB/($8$:$$!!)($'#(#'#(\"'#&'#.\u0274 &%;\u0153/C#;\xEA/:$;./1$;\xEB/($8$:$$!!)($'#(#'#(\"'#&'#.\u0244 &%;\u0152/C#;\xEA/:$;//1$;\xEB/($8$:$$!!)($'#(#'#(\"'#&'#.\u0214 &%;\u0178/H#;\xEA.\" &\"/:$;\xCB/1$;\xEB/($8$:$$!!)($'#(#'#(\"'#&'#.\u01DF &%;\u0125/C#;\xEA/:$;\xCB/1$;\xEB/($8$:$$!!)($'#(#'#(\"'#&'#.\u01AF &%;\u0103/C#;\xEA/:$;\xC2/1$;\xEB/($8$:\u0167$!!)($'#(#'#(\"'#&'#.\u017F &;\xCC.\u0179 &%;\u0176/C#;\xEA/:$;\xC2/1$;\xEB/($8$:\u0168$!!)($'#(#'#(\"'#&'#.\u0149 &%;\u0177/C#;\xEA/:$;\xC2/1$;\xEB/($8$:\u0169$!!)($'#(#'#(\"'#&'#.\u0119 &%2\x89\"\"6\x897\x8A/:#;b/1$;\xEB/($8#:$#!!)(#'#(\"'#&'#.\xEC &%;a/1#;\xEB/($8\":$\"!!)(\"'#&'#.\xCE &;\xCE.\xC8 &%;\x81/' 8!:\xF1!! ).\xB6 &%;\xD1/1#;\xEB/($8\":\u016A\"!!)(\"'#&'#.\x98 &%2\u016B\"\"6\u016B7\u016C/j#;\xEB/a$;\x9C/X$;\xEB/O$;\x98.\" &\"/A$2\xF6\"\"6\xF67\xF7/2$;\xEB/)$8':\u016D'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xC3/1#;\xEB/($8\":\xA4\"!!)(\"'#&'#"),
          peg$decode("%2{\"\"6{7|/\x7F#$;\xC4.# &;\xC5/,#0)*;\xC4.# &;\xC5&&&#/]$2{\"\"6{7|/N$$4\u016E\"\"5!7\u016F0)*4\u016E\"\"5!7\u016F&/2$;\xEB/)$8%:\u0170%\"#!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2\u0171\"\"6\u01717\u0172"),
          peg$decode("4\u0173\"\"5!7\u0174"),
          peg$decode("%;\xC7/C#%<4\u0175\"\"5!7\u0176=.##&&!&'#/($8\":$\"!!)(\"'#&'#.# &;\xE1"),
          peg$decode("%%<;\xF3=.##&&!&'#/1#;\xC8/($8\":\u0177\"! )(\"'#&'#"),
          peg$decode("%4\u0178\"\"5!7\u0179/E#$4\u017A\"\"5!7\u017B0)*4\u017A\"\"5!7\u017B&/)$8\":\u017C\"\"! )(\"'#&'#"),
          peg$decode(";\xD4.] &;\xE1.W &;\u014F.Q &;\u0150.K &;\u016D.E &;\u0149.? &%;\u0141/& 8!:\u017D! ).. &%;\u012B/& 8!:\u017E! )"),
          peg$decode("%;\u0136/0#;\xEA/'$8\":\u017F\" )(\"'#&'#.# &;\x9C"),
          peg$decode("%;\xCD/' 8!:\u0180!! )"),
          peg$decode("%;\xC7/b#2\u0181\"\"6\u01817\u0182/S$;\xEB/J$;\xC2/A$;\xEB/8$;\x7F.\" &\"/*$8&:\u0183&#%\" )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;c/@#;\xEB/7$;\x7F.\" &\"/)$8#:\u0184#\"\" )(#'#(\"'#&'#.; &%;c/1#;\xEB/($8\":\u0185\"!!)(\"'#&'#"),
          peg$decode("%;\u0109/M#;\xEB/D$;\x9C/;$;\xEB/2$;\xCF/)$8%:\u0186%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEE/Y#;\u017E/P$;\xEE/G$$;\xD0/&#0#*;\xD0&&&#/1$;\u017F/($8%:\u0187%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x9E/:#;\xEB/1$;\xEE/($8#:\u0188#!\")(#'#(\"'#&'#.\\ &%;\xC7/R#;\xEB/I$;\x7F.\" &\"/;$;\xEB/2$;\xEE/)$8%:\u0189%\"$\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0111/R#;\xEB/I$;\xC2/@$;\xEB/7$;\x7F.\" &\"/)$8%:\u018A%\"\" )(%'#($'#(#'#(\"'#&'#.\x9B &%;\u015B/R#;\xEB/I$;\xC2/@$;\xEB/7$;\x7F.\" &\"/)$8%:\u018B%\"\" )(%'#($'#(#'#(\"'#&'#.\\ &%;\u0143/R#;\xEB/I$;\xC2/@$;\xEB/7$;\x7F.\" &\"/)$8%:\u018C%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%<;\xEE=/##&'!&&#.G &%<;\xF2=/##&'!&&#.5 &%<2\xF6\"\"6\xF67\xF7=/##&'!&&#"),
          peg$decode("%$4\u018D\"\"5!7\u018E/,#0)*4\u018D\"\"5!7\u018E&&&#/' 8!:\u018F!! )"),
          peg$decode(";\xD7.S &;\xD8.M &;\xD6.G &%;\xD5/7#2\u0190\"\"6\u01907\u0191/($8\":\u0192\"!!)(\"'#&'#.# &;\xD5"),
          peg$decode(";\xDB./ &;\xDC.) &;\xDD.# &;\u0141"),
          peg$decode("%2\u0193\"\"6\u01937\u0194/J#$4\u0195\"\"5!7\u0196/,#0)*4\u0195\"\"5!7\u0196&&&#/($8\":\u0197\"! )(\"'#&'#"),
          peg$decode("%2\u0198\"\"6\u01987\u0199/J#$4\u019A\"\"5!7\u019B/,#0)*4\u019A\"\"5!7\u019B&&&#/($8\":\u019C\"! )(\"'#&'#"),
          peg$decode("%2\u019D\"\"6\u019D7\u019E/1#;\xD9/($8\":\u0177\"! )(\"'#&'#"),
          peg$decode("%$;\xDA/&#0#*;\xDA&&&#/' 8!:\u019F!! )"),
          peg$decode("%2\u01A0\"\"6\u01A07\u01A1/& 8!:\u01A2! ).\u01BE &%2\u01A3\"\"6\u01A37\u01A4/& 8!:\u01A5! ).\u01A7 &%2\u01A6\"\"6\u01A67\u01A7/& 8!:\u01A8! ).\u0190 &%2\u01A9\"\"6\u01A97\u01AA/& 8!:\u01AB! ).\u0179 &%2\u01AC\"\"6\u01AC7\u01AD/& 8!:\u01AE! ).\u0162 &%2\u01AF\"\"6\u01AF7\u01B0/& 8!:\u01B1! ).\u014B &%2\u01B2\"\"6\u01B27\u01B3/& 8!:\u01B4! ).\u0134 &%2\u01B5\"\"6\u01B57\u01B6/& 8!:\u01B7! ).\u011D &%2\u01B8\"\"6\u01B87\u01B9/& 8!:\u01BA! ).\u0106 &%2\u01BB\"\"6\u01BB7\u01BC/& 8!:\u01BD! ).\xEF &%2\u01BE\"\"6\u01BE7\u01BF.) &2\u01C0\"\"6\u01C07\u01C1/& 8!:\u01C2! ).\xCC &%2\u01C3\"\"6\u01C37\u01C4.) &2\u01C5\"\"6\u01C57\u01C6/& 8!:\u01C7! ).\xA9 &%2\u01C8\"\"6\u01C87\u01C9.) &2\u01CA\"\"6\u01CA7\u01CB/& 8!:\u01CC! ).\x86 &%2\u01CD\"\"6\u01CD7\u01CE.) &2\u01CF\"\"6\u01CF7\u01D0/& 8!:\u01D1! ).c &%2\u01D2\"\"6\u01D27\u01D3.) &2\u01D4\"\"6\u01D47\u01D5/& 8!:\u01D6! ).@ &%2\u01D7\"\"6\u01D77\u01D8.) &2\u01D9\"\"6\u01D97\u01DA/& 8!:\u01DB! )"),
          peg$decode("%;\xDC.# &;\xDD/A#2\u01D2\"\"6\u01D27\u01D3/2$;\xDD/)$8#:\u01DC#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xDD/;#;\u0179/2$;\xDF/)$8#:\u01DD#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\xDE.A &%2k\"\"6k7l/1#;\xDE/($8\":\u01DE\"! )(\"'#&'#"),
          peg$decode("%$4\u01DF\"\"5!7\u01E0/,#0)*4\u01DF\"\"5!7\u01E0&&&#/' 8!:\u01E1!! )"),
          peg$decode("%$4\u01DF\"\"5!7\u01E0/,#0)*4\u01DF\"\"5!7\u01E0&&&#/' 8!:=!! )"),
          peg$decode("%2\u01E2\"\"6\u01E27\u01E3/S#$;\xE7.# &;\xE20)*;\xE7.# &;\xE2&/7$2\u01E2\"\"6\u01E27\u01E3/($8#:\u01E4#!!)(#'#(\"'#&'#.c &%2\u01E5\"\"6\u01E57\u01E6/S#$;\xE7.# &;\xE30)*;\xE7.# &;\xE3&/7$2\u01E5\"\"6\u01E57\u01E6/($8#:\u01E4#!!)(#'#(\"'#&'#"),
          peg$decode(";\xE4.\xE5 &%2\u01E7\"\"6\u01E77\u01E8/1#;\xE5/($8\":$\"! )(\"'#&'#.\xC1 &%2\u01E2\"\"6\u01E27\u01E3/_#$;\xE7.) &;\xE8.# &;\xE20/*;\xE7.) &;\xE8.# &;\xE2&/7$2\u01E2\"\"6\u01E27\u01E3/($8#:\u01E4#!!)(#'#(\"'#&'#.o &%2\u01E5\"\"6\u01E57\u01E6/_#$;\xE7.) &;\xE8.# &;\xE30/*;\xE7.) &;\xE8.# &;\xE3&/7$2\u01E5\"\"6\u01E57\u01E6/($8#:\u01E4#!!)(#'#(\"'#&'#"),
          peg$decode("%4\u01E9\"\"5!7\u01EA/' 8!:\u01EB!! )"),
          peg$decode("%4\u01EC\"\"5!7\u01ED/' 8!:\u01EB!! )"),
          peg$decode("%2\u01EE\"\"6\u01EE7\u01EF/\xAA#;\xEB/\xA1$;\xEE/\x98$;\u017E/\x8F$;\xEE/\x86$$%;\xE5/1#;\xEF/($8\":\u01F0\"!!)(\"'#&'#0;*%;\xE5/1#;\xEF/($8\":\u01F0\"!!)(\"'#&'#&/F$;\u017F/=$%<;\xEE=/##&'!&&#/($8(:\u01F1(!\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;\xE7.) &;\xE8.# &;\xE60/*;\xE7.) &;\xE8.# &;\xE6&/=#%<;\xEE=/##&'!&&#/($8\":\u01E4\"!!)(\"'#&'#"),
          peg$decode("%4\u01F2\"\"5!7\u01F3/' 8!:\u01EB!! )"),
          peg$decode("%2\xC6\"\"6\xC67\xC7/6#2\u01E2\"\"6\u01E27\u01E3/'$8\":\u01F4\" )(\"'#&'#.\u02AA &%2\xC6\"\"6\xC67\xC7/6#2\u01E5\"\"6\u01E57\u01E6/'$8\":\u01F5\" )(\"'#&'#.\u0281 &%2\xC6\"\"6\xC67\xC7/6#2\xD1\"\"6\xD17\xD2/'$8\":\u01F6\" )(\"'#&'#.\u0258 &%2\xC6\"\"6\xC67\xC7/6#2\u01F7\"\"6\u01F77\u01F8/'$8\":\u01F9\" )(\"'#&'#.\u022F &%2\xC6\"\"6\xC67\xC7/6#2\u01FA\"\"6\u01FA7\u01FB/'$8\":\u01FC\" )(\"'#&'#.\u0206 &%2\xC6\"\"6\xC67\xC7/6#2\u01FD\"\"6\u01FD7\u01FE/'$8\":\u01FF\" )(\"'#&'#.\u01DD &%2\xC6\"\"6\xC67\xC7/6#2\u0200\"\"6\u02007\u0201/'$8\":\u0202\" )(\"'#&'#.\u01B4 &%2\xC6\"\"6\xC67\xC7/6#2\u0203\"\"6\u02037\u0204/'$8\":\u0205\" )(\"'#&'#.\u018B &%2\xC6\"\"6\xC67\xC7/6#2\u01C3\"\"6\u01C37\u01C4/'$8\":\u0206\" )(\"'#&'#.\u0162 &%2\xC6\"\"6\xC67\xC7/6#2\u01D7\"\"6\u01D77\u01D8/'$8\":\u0207\" )(\"'#&'#.\u0139 &%2\xC6\"\"6\xC67\xC7/V#2\u0208\"\"6\u02087\u0209/G$4\u020A\"\"5!7\u020B/8$4\u020A\"\"5!7\u020B/)$8$:\u020C$\"! )($'#(#'#(\"'#&'#.\xF0 &%2\xC6\"\"6\xC67\xC7/v#2\u020D\"\"6\u020D7\u020E/g$4\u020A\"\"5!7\u020B/X$4\u020A\"\"5!7\u020B/I$4\u020A\"\"5!7\u020B/:$4\u020A\"\"5!7\u020B/+$8&:\u020F&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\x87 &%2\xC6\"\"6\xC67\xC7/w#2\u020D\"\"6\u020D7\u020E/h$2\u0210\"\"6\u02107\u0211/Y$$4\u020A\"\"5!7\u020B/,#0)*4\u020A\"\"5!7\u020B&&&#/7$2\u0212\"\"6\u02127\u0213/($8%:\u0214%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2\u0215\"\"6\u02157\u0216/I#;\xEB/@$;\x9C/7$2\u0212\"\"6\u02127\u0213/($8$:\u0217$!!)($'#(#'#(\"'#&'#"),
          peg$decode("$;\xEC/&#0#*;\xEC&&&#"),
          peg$decode(";\xEC.5 &%<4\u0218\"\"5!7\u0219=/##&'!&&#"),
          peg$decode("$;\xEC0#*;\xEC&"),
          peg$decode("%;\xEF/2#2\u021A\"\"6\u021A7\u021B/#$+\")(\"'#&'#.) &4\u021C\"\"5!7\u021D"),
          peg$decode("$;\xEF0#*;\xEF&"),
          peg$decode("$;\xEF/&#0#*;\xEF&&&#"),
          peg$decode("%2\u021E\"\"6\u021E7\u021F/H#$4\u0220\"\"5!7\u02210)*4\u0220\"\"5!7\u0221&/,$;\xF0/#$+#)(#'#(\"'#&'#.# &;\xF0"),
          peg$decode("4\u0222\"\"5!7\u0223"),
          peg$decode("2\u0210\"\"6\u02107\u0211"),
          peg$decode("2\u0212\"\"6\u02127\u0213"),
          peg$decode("%;\xF4/>#%<4\u017A\"\"5!7\u017B=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode(";\u015A.\u01E5 &;\u0125.\u01DF &;\u0132.\u01D9 &;\u0161.\u01D3 &;\u0168.\u01CD &;\u013F.\u01C7 &;\u016D.\u01C1 &;\xFF.\u01BB &;\u0143.\u01B5 &;\u0134.\u01AF &;\xFC.\u01A9 &;\xFB.\u01A3 &;\u0100.\u019D &;\u0101.\u0197 &;\u0102.\u0191 &;\u0103.\u018B &;\u0104.\u0185 &;\u0105.\u017F &;\u0106.\u0179 &;\u0107.\u0173 &;\u0109.\u016D &;\u0111.\u0167 &;\u010A.\u0161 &;\u010C.\u015B &;\u010B.\u0155 &;\u0113.\u014F &;\u0114.\u0149 &;\u0115.\u0143 &;\u0117.\u013D &;\u011A.\u0137 &;\u011C.\u0131 &;\u011D.\u012B &;\u011B.\u0125 &;\u0120.\u011F &;\u0121.\u0119 &;\u0150.\u0113 &;\u0123.\u010D &;\u0124.\u0107 &;\u0126.\u0101 &;\u0128.\xFB &;\u0129.\xF5 &;\u012D.\xEF &;\u0130.\xE9 &;\u0131.\xE3 &;\u0137.\xDD &;\u0139.\xD7 &;\u013A.\xD1 &;\u013B.\xCB &;\u013D.\xC5 &;\u013E.\xBF &;\u0141.\xB9 &;\u0142.\xB3 &;\u0145.\xAD &;\u0147.\xA7 &;\u0146.\xA1 &;\u0148.\x9B &;\u0149.\x95 &;\u014B.\x8F &;\u014E.\x89 &;\u014D.\x83 &;\u0152.} &;\u0153.w &;\u0159.q &;\u015B.k &;\u015E.e &;\u0166._ &;\u0163.Y &;\u0164.S &;\u0165.M &;\u014F.G &;\u0169.A &;\u016E.; &;\u016F.5 &;\u0170./ &;\u0171.) &;\u0175.# &;\u0174"),
          peg$decode("2\u0224\"\"6\u02247\u0225"),
          peg$decode("2\u0226\"\"6\u02267\u0227"),
          peg$decode("2\u0228\"\"6\u02287\u0229"),
          peg$decode("2\u022A\"\"6\u022A7\u022B"),
          peg$decode("2\u022C\"\"6\u022C7\u022D"),
          peg$decode("2\u022E\"\"6\u022E7\u022F"),
          peg$decode("2\u0230\"\"6\u02307\u0231"),
          peg$decode("2\u0232\"\"6\u02327\u0233"),
          peg$decode("2\u0234\"\"6\u02347\u0235"),
          peg$decode("2\u0236\"\"6\u02367\u0237"),
          peg$decode("2\u0238\"\"6\u02387\u0239"),
          peg$decode("2\u023A\"\"6\u023A7\u023B"),
          peg$decode("2\u023C\"\"6\u023C7\u023D"),
          peg$decode("2\u023E\"\"6\u023E7\u023F"),
          peg$decode("2\u0240\"\"6\u02407\u0241"),
          peg$decode("2\u0242\"\"6\u02427\u0243"),
          peg$decode("2\u0244\"\"6\u02447\u0245"),
          peg$decode("2\u0246\"\"6\u02467\u0247"),
          peg$decode("2\u0248\"\"6\u02487\u0249"),
          peg$decode("2\u024A\"\"6\u024A7\u024B"),
          peg$decode("2\u024C\"\"6\u024C7\u024D"),
          peg$decode("2\u024E\"\"6\u024E7\u024F"),
          peg$decode("2\u0250\"\"6\u02507\u0251"),
          peg$decode("2\u0252\"\"6\u02527\u0253"),
          peg$decode("2\u0254\"\"6\u02547\u0255"),
          peg$decode("2\u0256\"\"6\u02567\u0257"),
          peg$decode("2\u0258\"\"6\u02587\u0259"),
          peg$decode("2\u025A\"\"6\u025A7\u025B"),
          peg$decode("2\u025C\"\"6\u025C7\u025D"),
          peg$decode("2\u025E\"\"6\u025E7\u025F"),
          peg$decode("2\u0260\"\"6\u02607\u0261"),
          peg$decode("2\u0262\"\"6\u02627\u0263"),
          peg$decode("2\u0264\"\"6\u02647\u0265"),
          peg$decode("2\u0266\"\"6\u02667\u0267"),
          peg$decode("2\u0268\"\"6\u02687\u0269"),
          peg$decode("2\u026A\"\"6\u026A7\u026B"),
          peg$decode("2\u026C\"\"6\u026C7\u026D"),
          peg$decode("2\u026E\"\"6\u026E7\u026F"),
          peg$decode("2\u0270\"\"6\u02707\u0271"),
          peg$decode("2\u0272\"\"6\u02727\u0273"),
          peg$decode("2\u0274\"\"6\u02747\u0275"),
          peg$decode("2\u0276\"\"6\u02767\u0277"),
          peg$decode("2\u0278\"\"6\u02787\u0279"),
          peg$decode("2\u027A\"\"6\u027A7\u027B"),
          peg$decode("2\u027C\"\"6\u027C7\u027D"),
          peg$decode("2\u027E\"\"6\u027E7\u027F"),
          peg$decode("2\u0280\"\"6\u02807\u0281"),
          peg$decode("2\u0282\"\"6\u02827\u0283"),
          peg$decode("2\u0284\"\"6\u02847\u0285"),
          peg$decode("2\u0286\"\"6\u02867\u0287"),
          peg$decode("2\u0288\"\"6\u02887\u0289"),
          peg$decode("2\u028A\"\"6\u028A7\u028B"),
          peg$decode("2\u028C\"\"6\u028C7\u028D"),
          peg$decode("2\u028E\"\"6\u028E7\u028F"),
          peg$decode("2\u0290\"\"6\u02907\u0291"),
          peg$decode("2\u0292\"\"6\u02927\u0293"),
          peg$decode("2\u0294\"\"6\u02947\u0295"),
          peg$decode("2\u0296\"\"6\u02967\u0297"),
          peg$decode("2\u0298\"\"6\u02987\u0299"),
          peg$decode("2\u029A\"\"6\u029A7\u029B"),
          peg$decode("2\u029C\"\"6\u029C7\u029D"),
          peg$decode("2\u029E\"\"6\u029E7\u029F"),
          peg$decode("2\u02A0\"\"6\u02A07\u02A1"),
          peg$decode("2\u02A2\"\"6\u02A27\u02A3"),
          peg$decode("2\u02A4\"\"6\u02A47\u02A5"),
          peg$decode("2\u02A6\"\"6\u02A67\u02A7"),
          peg$decode("2\u02A8\"\"6\u02A87\u02A9"),
          peg$decode("2\u02AA\"\"6\u02AA7\u02AB"),
          peg$decode("2\u02AC\"\"6\u02AC7\u02AD"),
          peg$decode("2\u02AE\"\"6\u02AE7\u02AF"),
          peg$decode("2\u02B0\"\"6\u02B07\u02B1"),
          peg$decode("2\u02B2\"\"6\u02B27\u02B3"),
          peg$decode("2\u02B4\"\"6\u02B47\u02B5"),
          peg$decode("2\u02B6\"\"6\u02B67\u02B7"),
          peg$decode("2\u02B8\"\"6\u02B87\u02B9"),
          peg$decode("2\u02BA\"\"6\u02BA7\u02BB"),
          peg$decode("2\u02BC\"\"6\u02BC7\u02BD"),
          peg$decode("2\u02BE\"\"6\u02BE7\u02BF"),
          peg$decode("2\u02C0\"\"6\u02C07\u02C1"),
          peg$decode("2\u02C2\"\"6\u02C27\u02C3"),
          peg$decode("2\u02C4\"\"6\u02C47\u02C5"),
          peg$decode("2\u02C6\"\"6\u02C67\u02C7"),
          peg$decode("2\u02C8\"\"6\u02C87\u02C9"),
          peg$decode("2\u02CA\"\"6\u02CA7\u02CB"),
          peg$decode("2\u02CC\"\"6\u02CC7\u02CD"),
          peg$decode("2\u02CE\"\"6\u02CE7\u02CF"),
          peg$decode("2\u02D0\"\"6\u02D07\u02D1"),
          peg$decode("2\u02D2\"\"6\u02D27\u02D3"),
          peg$decode("2\u02D4\"\"6\u02D47\u02D5"),
          peg$decode("2\u02D6\"\"6\u02D67\u02D7"),
          peg$decode("2\u02D8\"\"6\u02D87\u02D9"),
          peg$decode("2\u02DA\"\"6\u02DA7\u02DB"),
          peg$decode("2\u02DC\"\"6\u02DC7\u02DD"),
          peg$decode("2\u02DE\"\"6\u02DE7\u02DF"),
          peg$decode("2\u02E0\"\"6\u02E07\u02E1"),
          peg$decode("2\u02E2\"\"6\u02E27\u02E3"),
          peg$decode("2\u02E4\"\"6\u02E47\u02E5"),
          peg$decode("2\u02E6\"\"6\u02E67\u02E7"),
          peg$decode("2\u02E8\"\"6\u02E87\u02E9"),
          peg$decode("2\u02EA\"\"6\u02EA7\u02EB"),
          peg$decode("2\u02EC\"\"6\u02EC7\u02ED"),
          peg$decode("2\u02EE\"\"6\u02EE7\u02EF"),
          peg$decode("2\u02F0\"\"6\u02F07\u02F1"),
          peg$decode("2\u02F2\"\"6\u02F27\u02F3"),
          peg$decode("2\u02F4\"\"6\u02F47\u02F5"),
          peg$decode("2\u02F6\"\"6\u02F67\u02F7"),
          peg$decode("2\u02F8\"\"6\u02F87\u02F9"),
          peg$decode("2\u02FA\"\"6\u02FA7\u02FB"),
          peg$decode("2\u02FC\"\"6\u02FC7\u02FD"),
          peg$decode("2\u02FE\"\"6\u02FE7\u02FF"),
          peg$decode("2\u0300\"\"6\u03007\u0301"),
          peg$decode("2\u0302\"\"6\u03027\u0303"),
          peg$decode("2\u0304\"\"6\u03047\u0305"),
          peg$decode("2\u0306\"\"6\u03067\u0307"),
          peg$decode("2\u0308\"\"6\u03087\u0309"),
          peg$decode("2\u030A\"\"6\u030A7\u030B"),
          peg$decode("2\u030C\"\"6\u030C7\u030D"),
          peg$decode("2\u030E\"\"6\u030E7\u030F"),
          peg$decode("2\u0310\"\"6\u03107\u0311"),
          peg$decode("2\u0312\"\"6\u03127\u0313"),
          peg$decode("2\u0314\"\"6\u03147\u0315"),
          peg$decode("2\u0316\"\"6\u03167\u0317"),
          peg$decode("2\u0318\"\"6\u03187\u0319"),
          peg$decode("2\u031A\"\"6\u031A7\u031B"),
          peg$decode("2\u031C\"\"6\u031C7\u031D"),
          peg$decode("2\u031E\"\"6\u031E7\u031F"),
          peg$decode("2\u0320\"\"6\u03207\u0321"),
          peg$decode("2\u0322\"\"6\u03227\u0323"),
          peg$decode("2\u0324\"\"6\u03247\u0325"),
          peg$decode("2\u0326\"\"6\u03267\u0327"),
          peg$decode("2\u0328\"\"6\u03287\u0329"),
          peg$decode("2\u032A\"\"6\u032A7\u032B"),
          peg$decode("2\xC9\"\"6\xC97\xCA"),
          peg$decode("2\u032C\"\"6\u032C7\u032D"),
          peg$decode("20\"\"6071"),
          peg$decode("2]\"\"6]7^"),
          peg$decode("%2\u032E\"\"6\u032E7\u032F/B#%<2\u032E\"\"6\u032E7\u032F=.##&&!&'#/'$8\":\u0330\" )(\"'#&'#"),
          peg$decode("2\u0210\"\"6\u02107\u0211"),
          peg$decode("2\u0212\"\"6\u02127\u0213"),
          peg$decode("2\u0141\"\"6\u01417\u0142"),
          peg$decode("2\u016B\"\"6\u016B7\u016C"),
          peg$decode("2\xF6\"\"6\xF67\xF7")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 355 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      var _bindings={};
      var _locals={};
      var reCache={};
      var Entity=false;
      var FunctionChain=false;
      var SafetyFetch=false;
      var References={};
      var InstanceVars={};
      var UnresolvedLocals={};
      var readOnlyReference=true;
      var usedMemberVar=false;
      var DynamicTaskClauseFormatter=undefined;
      
      var _db=false;
      var lp='_'; // prefix for bareword variables
      var LeakedMagic=/\^\{([a-z0-9]+)\}/;
      
      if (undefined===options.constructs) options.constructs={};
      
      function addInstanceVar(v) {
        if (!InstanceVars[v]) {
          //console.log("Added instance var "+v)
          CheckScope(v,"instance");
          InstanceVars[v]=true;
        }
      }

      function addInstanceVars(v) {
        var vt='return '+v[1]+';';
        try {
          var inst=new Function(vt)();
          for (var i in inst) {
            addInstanceVar(i);
          }
        } catch (e) {
          error(e.message+"\n\nSAI compiler: Instance/Given variables can only be initialized with simple literal values. For more complex initialization, use Instantiate (but still declare them with instance).\n\nYour vars: "+v[1]);
        }
      }
      
      function checkUsedMemberVar(v) {
        if (usedMemberVar) {
          error("SAI compiler: object task "+v+" is declared as unbound but uses a bareword access to "+usedMemberVar);
        }
        usedMemberVar=false;
      }

      function CheckScope(v,context) {
        //console.log("check scope "+context+": "+v);
        if (References[v]) {
          var message="SAI compiler: variable "+v+" is a Reference variable and cannot be used as a "+context+".";
          //console.log(message);
          error(message);
        }
        if (InstanceVars[v]) {
          var message="SAI compiler: variable "+v+" is an Instance variable and cannot be used as a "+context+".";
          //console.log(message);
          error(message);
        }
      }
      
      function addLocal(v,a) { 
        if (_db) console.log("request local "+v+" - "+a);
        if (References[v]) return;
        if (_bindings[v]) return;
        _locals._hasLocals=true;
        if (!_locals[v]) {
          _locals[v]=a?(v+a):v;
        } else if (a) {
          _locals[v]=v+a;
        }
        if (_db) console.log("  added local "+v+" - "+_locals[v]);
      }
      
      function checkLocal(v,name) {
        if (References[v]) return v;
        if (_bindings[v]) return v;
        if (!_locals[v]) {
          UnresolvedLocals[v]=name;
          return '^[U,b,?,'+v+','+name+','+location().start.offset+']';
        }
        return v;
      }
      
      function Linker(code,final) {
        var p=/\^\[U,(.),([^,]+),([^,]+),([^,]+),([^\]]+)\]/g;
        return code.replace(p,function(x,bound,task,v,name,loc) {
          if (References[v]) return v;
          if (_bindings[v]) return v;
          if (_locals[v]) return v;
          if (InstanceVars[name]) {
            usedMemberVar=name;
            if (bound=='u') {
              checkUsedMemberVar(task+"(u)");
            }
            return '$.'+name;
          }
          if (final) {
            error('SAI Compiler: local variable "'+name+'" used without initialization at:'+loc);
          } 
          return x; // unchanged
        });
      }
      
      function removeLocal(v) {
        if (_db) console.log("removed local "+v);
        delete _locals[v];
      }
      
      function getLocals() { 
        if (!_locals._hasLocals) return ''; 
        var k=[]; 
        for (var i in _locals) if (i!=='_hasLocals') {
          if (i!=_locals[i]) {
            k.push(_locals[i]);
          } else {
            k.unshift(_locals[i]);
          }
        } 
        var finalk=[];
        var klookup={};
        if (_db) {
          console.log("references");
          console.log(References);
          console.log("locals");
          console.log(_locals);
        }
        for (var i in k) {
          //console.log(k[i]);
          if (!References[k[i]]) finalk.push(k[i]);
          klookup[k[i]]=k;
        }
    //    for (var i in UnresolvedLocals) {
    //      if (!klookup[i] && !References[i]) {
    //        error("SAI compiler: local variable used before initialization (beware forward declarations): "+UnresolvedLocals[i]);
    //      }
    //    }
        //console.log(finalk);
        var r='var '+finalk.join(',')+';\n'; 
        _locals={};
        UnresolvedLocals={};
        return r; 
      }

      function rep(list,val) {
        var j;
        for (var i in list) {
          if (j==val[list[i]]) list[i]=j;
        }
      }
     
      function RV(code,varnames) {
        if (!varnames) varnames={};
        if (!code) error("SAI compiler: RV has undefined code; likely a syntax error; perhaps you need to use 'self'");
        if (!code.replace) {
          code=code.toString();
        }
        var repl=function(key) {
          var val=varnames[key];
          if (undefined===val || null===val || false===val) {
            val=tempvar();
            addLocal(val);
          }
          var re=reCache[key]; if (!re) re=reCache[i]=new RegExp('\\^\\{'+key+'\\}','g');
          //console.log(" -- replace "+key+" with "+val)
          code=code.replace(re,val);
        };
        //console.log("###############################")
        //console.log(code);
        //console.log("........................");
        //console.log(varnames);
        var completed={};
        var precedence=['block','this','key','list','counter'];
        for (var j in precedence) {
          var i=precedence[j];
          if (varnames.hasOwnProperty(i)) {
            //console.log("intercept "+i+" with "+varnames[i]);
            repl(i);
            completed[i]=true;
          }
        }
        for (var i in varnames) {
          if (undefined===completed[i]) {
            repl(i);
          }
        }
        //console.log(code)
        //console.log("---------------------------------")
        return code;
      }
      
      var varnum=0;
      function tempvar() {
        var v="$"+(varnum++);
        return v;
      }
      
      function quoted(v) {
        return "'"+v.replace(/\'/g,"\\\'")+"'";
      }
      
      var accessors = {
        firstfetch: { // [0]+key+[1]
          this: [ '$' , '' ],
          currentthis: [ 'this' , ''],
          local: [ '' , '' ], 
          arguments: [ 'arguments','' ],
          parameters: [ 'p','' ],
          it: [ '^{this}','' ],
          key: [ '^{key}','' ],
          counter: [ '^{counter}','' ],
          trial: [ '^{trial}','' ],
          sum: [ '^{sum}','' ],
          error: [ '^{error}','' ],
          self: [ '^{self}','' ],
          super: [ '^{super}','' ],
          paren: [ '', '' ],
          bound: [ '' , '' ],
          global: [ '' , '' ],
          function: [ '' , '' ],
          literal: ['','']
        },
        nextfetch: { // +[0]+key+[1]
          function: [ '(' , ')' ],
          attribute: [ '.' , '' ], 
          index: [ '[' , ']' ],
        },
        firststore: { //[0]+key+[1]
          function: [ '' , '' ],
          paren: [ '', '' ],
          local: [ '' , ''  ],
          error: [ '^{error}','' ],
          attribute: [ '^{this}.' ,  '' ],
          self: [ '^{self}','' ],
          sum: [ '^{sum}' , '' ],
          property: [ '$["' , '"]' ], 
          parameter: [ 'p["','"]' ],
        },
        laststore: { // +[0]+key+[1]
          attribute: [ '.' , '' ], 
          index: [ '[' , ']'  ],
        }
      };

      function safetyFetch(root,leaf) {
        SafetyFetch=true;
        return '(undefined===($_b=('+root+'))?undefined:($_b'+leaf+'))';
      }

      function ValueCompositor(v,safe) {
        //console.log("Value Compositor...");
        //console.log(v);
        var code='';
        if (v[0][0]=='local') {
          var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
          var binding=options.globals[test];
          if (binding) {
            v[0][0]='bound';
            v[0][1]=binding;
          }
        }
        if (v[0][0]=='local') {
          code+=VarUse(v[0][1]);
        }
        var patternbase=accessors.firstfetch;
        var i=0; while (i<v.length) {
          var pattern=patternbase[v[i][0]]; 
          patternbase=accessors.nextfetch;
          if (!pattern) error("SAI Compiler: RV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
          var leaf=pattern[0] + v[i][1] + pattern[1];
          if (i>0 && safe) {
            code=safetyFetch(code,leaf);
          } else {
            code=code+leaf;
          }
          i++;
        }
        return code;
      }

      var itselfops = {
        '+': '^{1} += ^{2}' , // test 'self +'
        '-': '^{1} -= ^{2}' , // test 'self -'
        
        '*': '^{1} *= ^{2}' , // test 'self *'
        '/': '^{1} /= ^{2}' , // test 'self /'
        '%': '^{1} %= ^{2}' , // test 'self %'
        '<<': '^{1} <<= ^{2}' , // 
        '>>': '^{1} >>= ^{2}' , // 
        '>>>': '^{1} >>>= ^{2}' , // 
        '**': '^{1} = Math.pow(^{1},^{2})' , // test 'self **'

        xorb: '^{1} ^= ^{2}' , // test 'self xorb'
        andb: '^{1} &= ^{2}' , // test 'self andb'
        orb: '^{1} |= ^{2}' , // test 'self orb'

        and: '^{1} = ^{1} && ^{2}', // test 'self and'
        or: '^{1} = ^{1} || ^{2}', // test 'self or'
        xor: '^{1} = $AI.xor_op(^{1},^{2})',  // test 'self xor'
        nand: '^{1} = (!((^{1})&&(^{2})))', // test 'self nand'
        nor: '^{1} = (!((^{1})||(^{2})))', // test 'self nor'

        '?>': '^{1} = Math.max(^{1},^{2})', // test 'self ?>'
        '?<': '^{1} = Math.min(^{1},^{2})', // test 'self ?<'
        
        update: '^{1} = $AI.update_op(^{1},^{2})', // test 'self update'
        delete: '$AI.delete_op(^{1},^{2})', // test 'self delete*'
        default: 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        '?': 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        concat: '^{1} = $AI.concat_op(^{1},^{2}, true)', // test 'self concat inplace*'
      };

      var unops={
        '-': '^{1}=-(^{1})' , // test 'self negate'
        'not': '^{1}=!(^{1})', // test 'self not'
        'notb': '^{1}=~(^{1})', // test 'self notb'
        'inc': '^{1}=(^{1} || 0)+1;', // test 'self inc'
        'dec': '^{1}--', // test 'self dec'
        'delete': 'delete ^{1}', // test 'self delete'
        'collect': '^{1} = $AI.collect_op(^{1})' // test 'self collect*'
      };  

      
      function assembleLiteral(v) {
        var build='';
        var result=[];
        for (var i in v) {
          var c=v[i];
          if (c[0]) {
            build+=c[1];
          } else {
            if (build.length) result.push(quoted(build));
            build='';
            if (!result.length) result.push(quoted(''));
            result.push(c[1]);
          }
        }
        if (build.length) result.push(quoted(build));
        if (!result.length) result=[quoted('')];
        return result.join('+');
      }

      var Lists={};
      function addToList(list,e) {
        var list=Lists[list] || (Lists[list]=[]);
        list.push(e);
      }
      function getList(list) {
        var list=Lists[list] || (Lists[list]=[]);
        if (list.length) {
          return '["'+list.join('","')+'"]';
        } 
        return '[]';
      }
      function clearLists() {
        Lists={};
      }
        
      function GetExpectsTester(x,name) {
        var l =[];
        for (var i in x) {
          var t=x[i][1] || 'true';
          var p='"'+x[i][0][1]+'":'+x[i][1];
          l.push(p);
        }
        return '$AI.expectsThrow(p,{'+l.join(',')+'},'+quoted(name)+');\n';
      }
      
      
      // expects
      // as
      // kind
      // body
      // preface
      // appendix
      function TaskClauseFormatter(o) {
        var params=['p'];
        var expects='',locals=[];//$unused=this';
        if (o.expects && o.as) error("SAI compile: cannot have both EXPECTS and AS in a function declaration");
        if (o.expects && o.expects.length) {
          expects=GetExpectsTester(o.expects,'in-line');
        } else if (o.as) {
          for (var i in o.as) {
            if (i==0) {
              locals.push(o.as[i][0][1]+'=p');
            } else {
              params.push(o.as[i][0][1]);
            }
          }
        }
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var finallocals=[];
        for (var i in locals) if (!References[locals[i]]) finallocals.push(locals[i]);
        locals=locals.length?('var '+finallocals.join(',')+';'):'';
        var code = o.kind+'('+params.join(',')+'){'+o.preface+FunStart()+locals+expects+'{'+o.block+'}'+FunStop()+o.postface+'}';
        if (o.execute) code+='()';
        return code;
      }

      
      // prefix (v0)
      // name (v1)
      // as (v2)
      // expects (v3)
      // kind 
      // body (k)
      function TaskFormatter(o) {
        
        var fn=(o.prefix?o.prefix+'_':'')+o.name;
        var params='p';
        var paramspec=o.as||[];
        
        for (var i in paramspec) {
          var pname=paramspec[i][0][1];
          if (i==0) {
            addLocal(pname,'=p');
          } else {
            removeLocal(pname);
            params+=','+pname;
          }
        }

        if (SafetyFetch) { addLocal('$_b'); SafetyFetch=false; }
        if (FunctionChain) { addLocal('$_c'); addLocal('$_d'); FunctionChain=false; }
        if (!o.nothis) {
          if (o.unbound || o.property) {
            addLocal('$','=this');
          } else {
            addLocal('$','=this['+fn+']?this:$bindfail('+fn+')');
          }
        }
        var head='', tail='';
        var sup=GlobVar();
        if (o.prefix!='get' && o.prefix!='set') {
          addToList('lock',fn);
          head='var '+sup+'=prototype['+fn+'] || function(){};\n';
          head+='prototype['+fn+']=';
          tail=';\n';
        }
      
        if (o.unbound) {
          o.body=o.body.replace(/\^\[U,b,\?/g, "^[U,u,"+o.name);
        }
        o.body=Linker(o.body,false);
        if (o.unbound) {
          checkUsedMemberVar(fn+'(t)');
        } usedMemberVar=false;
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var fun=o.kind+'('+params+') {\n'+o.preface+FunStart()+getLocals();
        if (o.expects) {
          fun+=GetExpectsTester(o.expects,fn);
        }
        fun+='{'+o.body+'}'+FunStop()+o.postface; // function body
        fun+='}';
      
        if (o.name) {
          if (fun.indexOf('^{this}')>-1) error("SAI Compiler: Cannot use unrooted . accessor without a context\n\n"+fun);
        }
        var r=RV(head+fun+tail,{this:false,super:sup});

        return r;

      }

      function VerbCat(v) {
    //       console.log("VerbCat");
    //       console.log(v);
         if (v.left) {
           return v.left+v.base+v.right;
    //     } else if (v.call) {
    //       if (test) {
    //         return RV('((undefined===($_c=^{verb}(($_d=^{base}),^{param})))?$_d:$_c)',v);
    //       } else {
    //         return v.verb+'('+v.base+(v.param?(','+v.param):'')+')';
    //       }
         } else {
           if (v.test) {
             return RV('((undefined===($_c=(($_d=^{base})^{verb}(^{param}))))?$_d:$_c)',v);
           } else {
             return v.base+v.verb+'('+v.param+')';
           }
         }
      }
     
      function AssembleVerb(v) {
         FunctionChain=true;
         if (v.length==1) {
    //       console.log("AV 1");
    //       console.log(v[0]);
           return VerbCat(v[0]);
         }
         var base=v[0].base;
         for (var i in v) {
           v[i].base=base;
           v[i].test=true;
           base=VerbCat(v[i]);
         }
         return base;
      }
      
      function EnumCheck(v) {
        var start=1;
        for (var i in v) {
          if (v[i][1]==='enum') {
            v[i][1]=start++;
          } else {
            var n=parseInt(v[i][1],10);
            if (!isNaN(n)) {
              start=n+1;
            }
          }
        }
        return v;
      }
      
      function GlobVar() {
        return '$'+(options.persist.globalcount++)+'g';
      }
      function FunStart() {
        return '';
        //return ' /*:FUNSTART:*/ ';
      }
      function FunStop() {
        return '';
        //return ' /*:FUNSTOP:*/ ';
      }
      function VarUse(v) {
        return '';
        //return [].concat(v).map(function(v) { return ' /*:VAR:'+v+':*/ '});
      }
      function FixVars(code) {
      }

      function MagicCheck(code) {
        var lm=LeakedMagic.exec(code);
        if (lm) error("SAI Compiler: Pronoun '"+lm[1]+"' used in the wrong place (but I can't tell you where yet, please search for your use of this variable and make sure it is contained within a construct that uses it.)");
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()