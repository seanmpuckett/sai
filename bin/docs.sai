#!/usr/bin/env sai-run

reference:
  SAI from require 'sai-language'
  FS from require 'fs'
  PATH from require 'path'
  
object Docs

given:
  categories:
    reference '''
      Full reference documentation.
  
    constructs '''
      One-or-multi line constructs used for looping, flow control, error handling, and so on.
      
    pipers '''
      Syntactical elements starting with the pipe character `|` that modify values in-line
      
    keywords '''
      Low-level language syntax.
      
    pronouns '''
      Context-aware, renamable variables.

    globals '''
      Functions and values avalilable, unscoped, in the global namespace.
      
    
Instantiate task

  
  set docs from SAI.Document
  
  set master blank


  each docs.documents as pages, category
    
    each pages as page, pageName
      if master\pageName
        set pageName + " (${category})"
      set master\pageName page
  
  each docs.references as alsos, source
    set master\source default:
      title toUpperCase'd source
      reference '''
        _See: ${(alsos | thru .1 ).join(', ')}_
    

  Write "20.Reference.md", master, 'reference'
  
  debug "Wrote docs"


Indent task as spaces, text
  return chain text
    split /[\r\n]/g
    |thru ' '.repeat(spaces) + it
    join '\n'

LineTrim task as trailing, text
  set lines split'd text /[\r\n]/g
  while ( lines | first ) is ''
    shift'd lines
  while ( lines | last ) is ''
    pop'd lines
  count trailing
    push'd lines ''
  return join'd lines '\n'

Write task given filename, pages, heading

  set output from LineTrim 3, '''
    ## ${toUpperCase'd heading}
    
    ${from LineTrim 0, categories\heading ? 'Unknown Heading'}

    This file is automatically generated. _Do not edit._
    
  set content to empty
  
  set IndexSort to task as a
    set a toUpperCase'd self
    set ch from a.charCodeAt 0
    if ch>=65 and ch<=90
      set ch + 200000
    else
      set ch + 100000
    return ch+a
    
  
  index pages, ( pages | keys | by IndexSort(it) )
    if .reference
      push'd content from LineTrim 3, '''
        ### ${.title}
        
        ${from LineTrim 0, .reference}
        
    else
      push'd content from LineTrim 3, '''
        ### ${.title ? toUpperCase'd .name} _${.subtitle}_

        ${from LineTrim 0, .summary}      

        ${from LineTrim 0, from Indent 4, .synref ? 'synref'}

        ${from LineTrim 0, .detail}
  
  set output + join'd content ''

  FS.writeFileSync filename, output
  
  
    
    
  
  
  
  