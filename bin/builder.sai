reference:
  FS require('fs')
  PATH require('path')

object Builder main

// Instantiate
//
// Called when the object is created.
//
// SAI - reference to sai-language object
//
Instantiate task given SAI

  unless SAI
    debug 'Cannot use Builder as a pre-compiled module.'
    ~process.exit 1
    
  // utilities
  //
  set
  
    // option flags
    flags blank
    
    // display banner
    Banner task
      debug '''
        sai-build -- command-line compiler for .sai scripts
      
        USAGE
        sai-build [path/object name] - compiles file to native JS 
      
        OPTIONS
        -o [path]  --output       Set output folder
        -v         --verbose      Print input and output filenames
        -t         --test         Don't save output, just compile
      
        EXAMPLES
        sai-build HelloWorld.sai
        sai-build -o bin src/bin -o lib src/lib
        
    // does a file exist
    Exists task given path
      return FS.existsSync(path)
      
    // is the given path a directory
    IsDirectory task given path
      if Exists(path)
        return FS.lstatSync(path).isDirectory()
      return false
        
    // override output folder
    dest undefined
    
    // return destination path, updating extension and handling overrides
    DestPath task given path, branch
      if dest .. set path PATH.join(dest, branch, PATH.basename(path))
      with PATH.parse(path) delete 'base'
        if  .ext is '.sai'
          set .ext '.js'
        else
          set .ext (self default '') + '.js'
        return !PATH.format .
    
    // recursively create directories
    MkPath task given path
      unless Exists(path)
        MkPath PATH.dirname(path)
        FS.mkdirSync path

    // process exit value
    exitflag 0
    
    // build a single file at src path, saving javascript output to dest path
    Build task given src, dest
      local objectName PATH.basename(src)
      SAI.Clean
      SAI.Configure: paths: PATH.dirname(src)
      try
        SAI.Require objectName 
        unless flags.test
          MkPath PATH.dirname(dest)
          FS.writeFileSync dest, SAI.GetSource(objectName)
        if flags.verbose .. debug '${src} -> ${dest}'
      catch
        debug '${src} -> ERROR'
        debug error
        unless error.message.indexOf('Contractually required')
          set exitflag 1
  
    // given a file or folder, recursively build .sai files within
    ProcessArg task given path, branch
      if IsDirectory(path)
        every FS.readdirSync(path) as leaf
          local candidate PATH.join(path, leaf)
          if '.sai' is PATH.extname(leaf)
            ProcessArg candidate, branch
          else if leaf isnt '.' and leaf isnt '..' and IsDirectory(candidate)
            ProcessArg candidate, PATH.join(branch, leaf)
      else 
        Build path, DestPath(path, branch)
        
  // main loop
  //
  
  set argv ~process.argv limit 2, undefined // chop off first two arguments

  unless argv.length
    Banner
  
  while argv.shift() as arg
    switch arg
      case '-o', '--output'
        set dest argv.shift()
      case '-v', '--verbose'
        set flags.verbose true
      case '-t', '--test'
        debug "sai-build test mode -- no files will be saved."
        set flags.test true
      default
        ProcessArg arg, ''

  ~process.exit exitflag
  