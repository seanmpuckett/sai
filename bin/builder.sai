reference:
  FS require('fs')
  PATH require('path')

object Builder main

// Instantiate
//
// Called when the object is created.
//
// SAI - reference to sai-language object
//
Instantiate task given SAI

  unless SAI
    debug 'Cannot use Builder as a pre-compiled module.'
    ~process.exit 1
    
  // utilities
  //
  set
    flags blank
    Banner task
      debug '''
        sai-build -- command-line compiler for .sai scripts
      
        USAGE
        sai-build [path/object name] - compiles file to native JS 
      
        OPTIONS
        -o [path]  --output       Set output folder
        -v         --verbose      Print input and output filenames
        -t         --test         Don't save output, just compile
      
        EXAMPLES
        sai-build HelloWorld.sai
        sai-build -o bin src/bin -o lib src/lib
        
    IsDirectory task given path
      return FS.lstatSync(path).isDirectory()
      
    dest undefined
    DestPath task given path, branch
      if dest .. set path PATH.join(dest, branch, PATH.basename(path))
      set path self.replace('.sai', '.js')
      return path

    MkPath task given path
      unless FS.existsSync(path)
        MkPath PATH.dirname(path)
        FS.mkdirSync path

    exitflag 0
    Build task given src, dest
      local objectName PATH.basename(src)
      SAI.Clean
      SAI.Configure: paths: PATH.dirname(src)
      try
        SAI.Require objectName 
        unless flags.test
          MkPath PATH.dirname(dest)
          FS.writeFileSync dest, SAI.GetSource(objectName)
        if flags.verbose .. debug '${src} -> ${dest}'
      catch
        debug '${src} -> ERROR'
        debug error.message
        unless error.message.indexOf('Contractually required')
          set exitflag 1
  
    ProcessArg task given path, branch
      if IsDirectory(path)
        every FS.readdirSync(path) as leaf
          local candidate PATH.join(path, leaf)
          if '.sai' is PATH.extname(leaf)
            ProcessArg candidate, branch
          else if leaf isnt '.' and leaf isnt '..' and IsDirectory(candidate)
            ProcessArg candidate, PATH.join(branch, leaf)
      else
        Build path, DestPath(path, branch)
  
  // main loop
  //
  
  set argv ~process.argv limit 2, undefined // chop off first two arguments

  unless argv.length
    Banner
  
  while argv.shift() as arg
    switch arg
      case '-o', '--output'
        set dest argv.shift()
      case '-v', '--verbose'
        set flags.verbose true
      case '-t', '--test'
        debug "sai-build test mode -- no files will be saved."
        set flags.test true
      default
        ProcessArg arg, ''

  ~process.exit exitflag
  