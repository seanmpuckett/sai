
object IterateC

inherit: Construct

// MANIFEST

manifest get 
  return:
    'constructs':
  
      'every':
        repeats false
        clauses:
          'every': #exprusing, #exproutblock
          'else': #block
        handler bind EveryConstruct
      
      'iterate':
        repeats false
        clauses:
          'iterate': #exprusing, #exproutblock
          'else': #block
        handler bind IterateConstruct

      'each':
        repeats false
        clauses:
          'each': #exprusing, #exproutblock
          'else': #block
        handler bind EachConstruct

      'index':
        repeats false
        clauses:
          'index': #exprsusing, #exprsoutblock
          'else': #block
        handler bind IndexedConstruct

      'ply':
        repeats false
        clauses:
          'ply': #exprusing, #exproutblock
          'else': #block
        handler bind PlyConstruct

      'while':
        repeats false
        clauses:
          'while': #exproutblock
        handler bind WhileConstruct
      
      'until':
        repeats false
        clauses:
          'until': #exproutblock
        handler bind WhileConstruct
      
      'dowhile':
        repeats false
        clauses:
          'dowhile': #exproutblock
        handler bind WhileConstruct
      
      'dountil':
        repeats false
        clauses:
          'dountil': #exproutblock
        handler bind WhileConstruct

      'break':
        repeats false
        clauses:
          'break': #none
        handler bind FlowControlConstruct
  
      'continue':
        repeats false
        clauses:
          'continue': #none
        handler bind FlowControlConstruct
  
      'count':
        repeats false
        clauses:
          'count': #exprsoutblock
          'else': #block
        handler bind CountConstruct

      'countdown':
        repeats false
        clauses:
          'countdown': #exprsoutblock
          'else': #block
        handler bind CountConstruct


//////////////  FLOW CONTROL
//
//

FlowControlConstruct task expects $clauses, $tools
  set body ''
  with $clauses.0
    switch .type
    
    case 'break.none'
      set body 'break;\n'
  
    case 'continue.none'
      set body 'continue;\n'
  
    else
      return: error "SAI compiler: unhandled ${.type} in FlowControlConstruct -- this is a compiler bug."
  
  return: body body




///////////////   EVERY
//
//

EveryConstruct task expects $clauses, $tools

  if $clauses.length > 2
    return: error 'SAI compile: EVERY can have at most one ELSE clause.'

  set main $clauses.0
  set none $clauses.1

  try
    
    switch main.type
  
    case 'every.exproutblock'

      set 
        outs from my OutVarHelper main.args.out
      
        vars:
          block main.args.block
          'source' main.args.expr
          'this' outs.0 default false
          'key' outs.1 default false
          iter false
          elem false
          none ?none.args.block 
    
        preface '''
          var ^{iter}=$AI.kviterate_op(^{source});
          var ^{elem}=^{iter}.next();

        elseclause from task
          unless none
            return '''
              if (!^{elem}.done)
          else
            return '''
              if (^{elem}.done) { ^{none} } else
      
        loop '''
          do {
          ^{this}=^{elem}.value[1];
          ^{key}=^{elem}.value[0];
          ^{block}
          ^{elem}=^{iter}.next();
          } while (!^{elem}.done);
      
        text from $tools.replacer preface + elseclause + loop, vars

    case 'every.exprusing'

      set 
        vars:
          'task' main.args.using
          source main.args.expr
          iter false
          elem false
          none ?none.args.block 
    
        preface '''
          var ^{iter}=$AI.kviterate_op(^{source});
          var ^{elem}=^{iter}.next();

        elseclause from task
          unless none
            return '''
              if (!^{elem}.done)
          else
            return '''
              if (^{elem}.done) { ^{none} } else
      
        loop '''
          do {
          ^{task}(^{elem}.value[1], ^{elem}.value[0]); 
          ^{elem}=^{iter}.next();
          } while (!^{elem}.done);
      
        text from $tools.replacer preface + elseclause + loop, vars
    
    else
      return: error "Unhandled construct type ${main.type} in EveryConstruct"
  
  catch
    debug error
  
  return: body text



///////////////   INDEXED
//
//

IndexedConstruct task expects $clauses, $tools

  if $clauses.length > 2
    return: error 'SAI compile: INDEX can have at most one ELSE clause.'

  set main $clauses.0
  set none $clauses.1

  unless main.args.exprs.length is 2
    return: error "SAI Compiler: the INDEX construct requires two comma-separated expressions, the first is the array/object to traverse, the second an array of keys."

  try
    
    switch main.type
  
    case 'index.exprsoutblock'
      set
        outs from my OutVarHelper main.args.out
      
        vars:
          block main.args.block
          'rawlist' main.args.exprs.0
          'rawkeys' main.args.exprs.1
          'keys' false
          'index' false
          'this' outs.0 default false
          'key' outs.1 default false
          'list' outs.2 default false
          'length' false
          none ?none.args.block default false
    
        preface '''
          var ^{list}=^{rawlist},^{keys}=^{rawkeys},^{key};
          if (undefined===^{keys}) ^{keys}=[];
          var ^{length}=^{keys}.length,^{index};

        loop '''
          for (^{index}=0; ^{index}<^{length}; ^{index}++) {
          ^{key}=^{keys}[^{index}]; ^{this}=^{list}[^{key}];
          ^{block};
          }
      
        elseclause from task
          unless none
            return ''
          else
            return '''
              if (^{key}===0) { ^{none} } 
      
        text from $tools.replacer preface + loop + elseclause, vars

    case 'index.exprsusing'

      set 
        vars:
          'task' main.args.using
          'rawlist' main.args.exprs.0
          'rawkeys' main.args.exprs.1
          'index' false
          'keys' false
          'key' false
          'list' false
          'length' false
          none ?none.args.block default false
    
        preface '''
          var ^{list}=^{rawlist},^{keys}=^{rawkeys},^{key};
          if (undefined===^{keys}) ^{keys}=[];
          var ^{length}=^{keys}.length,^{index};

        elseclause from task
          unless none
            return ''
          else
            return '''
              if (^{key}===0) { ^{none} } 
      
        loop '''
          for (^{index}=0; ^{index}<^{length}; ^{index}++) {
          ^{key}=^{keys}[^{index}]; ^{task}(^{list}[^{key}],^{key},^{list});
          }
      
        text from $tools.replacer preface + loop + elseclause, vars

    else
      return: error "Unhandled construct type ${main.type} in IndexConstruct"
  
  catch
    debug error
    
  return: body text



///////////////   ITERATE
//
//

IterateConstruct task expects $clauses, $tools

  if $clauses.length > 2
    return: error 'SAI compile: ITERATE can have at most one ELSE clause.'

  set main $clauses.0
  set none $clauses.1

  try
    
    switch main.type
  
    case 'iterate.exproutblock'

      set 
        outs from my OutVarHelper main.args.out
      
        vars:
          block main.args.block
          'source' main.args.expr
          'this' outs.0 default false
          'key' outs.1 default false
          iter false
          elem false
          none ?none.args.block default false
    
        preface '''
          var ^{iter}=$AI.iterator_op(^{source});
          var ^{elem}=^{iter}.next();

        elseclause from task
          unless none
            return '''
              if (!^{elem}.done)
          else
            return '''
              if (^{elem}.done) { ^{none} } else
      
        loop '''
          for (var ^{key}=0; !^{elem}.done; ^{elem}=^{iter}.next()){
          ^{this}=^{elem}.value;
          ^{block};
          ^{key}++;
          }
      
        text from $tools.replacer preface + elseclause + loop, vars

    case 'iterate.exprusing'

      set 
        vars:
          'task' main.args.using
          source main.args.expr
          'key' false
          iter false
          elem false
          none ?none.args.block default false
    
        preface '''
          var ^{iter}=$AI.iterator_op(^{source});
          var ^{elem}=^{iter}.next();
          var ^{key}=0;

        elseclause from task
          unless none
            return '''
              if (!^{elem}.done)
          else
            return '''
              if (^{elem}.done) { ^{none} } else
      
        loop '''
          do {
          ^{task}(^{elem}.value, ^{key}); 
          ^{key}++;
          ^{elem}=^{iter}.next();
          } while (!^{elem}.done);
      
        text from $tools.replacer preface + elseclause + loop, vars

    else
      return: error "Unhandled construct type ${main.type} in IterateConstruct"
  
  catch
    debug error
  
  return: body text



///////////////   EACH
//
//

EachConstruct task expects $clauses, $tools

  if $clauses.length > 2
    return: error 'SAI compile: EACH can have at most one ELSE clause.'

  set main $clauses.0
  set none $clauses.1

  try
    
    switch main.type
  
    case 'each.exproutblock'

      set 
        outs from my OutVarHelper main.args.out
      
        vars:
          block main.args.block
          'source' main.args.expr
          'this' outs.0 default false
          'key' outs.1 default false
          'list' outs.2 default false
          none ?none.args.block default false
    
        preface '''
          var ^{list}=^{source},^{key}=undefined;
          if (undefined===^{list}) ^{list}={};

        loop '''
          for (^{key} in ^{list}) {
          ^{this}=^{list}[^{key}];
          ^{block};
          }
      
        elseclause from task
          unless none
            return ''
          else
            return '''
              if (^{key}===undefined) { ^{none} } 
      
        text from $tools.replacer preface + loop + elseclause, vars

    case 'each.exprusing'

      set 
        vars:
          'task' main.args.using
          source main.args.expr
          'key' false
          'list' false
          none ?none.args.block default false
    
        preface '''
          var ^{list}=^{source},^{key}=undefined;
          if (undefined===^{list}) ^{list}={};

        elseclause from task
          unless none
            return ''
          else
            return '''
              if (^{key}===undefined) { ^{none} } 
      
        loop '''
          for (^{key} in ^{list}) {
          ^{task}(^{list}[^{key}],^{key},^{list});
          }
      
        text from $tools.replacer preface + loop + elseclause, vars

    else
      return: error "Unhandled construct type ${main.type} in EachConstruct"
  
  catch
    debug error
    
  return: body text



///////////////   PLY
//
//

PlyConstruct task expects $clauses, $tools

  if $clauses.length > 2
    return: error 'SAI compile: PLY can have at most one ELSE clause.'

  set main $clauses.0
  set none $clauses.1

  try
    
    switch main.type
  
    case 'ply.exproutblock'

      set 
        outs from my OutVarHelper main.args.out
      
        vars:
          block main.args.block
          'source' main.args.expr
          'this' outs.0 default false
          'key' outs.1 default false
          'list' outs.2 default false
          'length' false
          none ?none.args.block default false
    
        preface '''
          var ^{list}=^{source},^{key};
          if (undefined===^{list}) ^{list}=[];
          var ^{length}=^{list}.length;

        loop '''
          for (^{key}=0; ^{key}<^{length}; ^{key}++) {
          ^{this}=^{list}[^{key}];
          ^{block};
          }
      
        elseclause from task
          unless none
            return ''
          else
            return '''
              if (^{key}===0) { ^{none} } 
      
        text from $tools.replacer preface + loop + elseclause, vars

    case 'ply.exprusing'

      set 
        vars:
          'task' main.args.using
          source main.args.expr
          'key' false
          'list' false
          'length' false
          none ?none.args.block default false
    
        preface '''
          var ^{list}=^{source},^{key};
          if (undefined===^{list}) ^{list}=[];
          var ^{length}=^{list}.length;

        elseclause from task
          unless none
            return ''
          else
            return '''
              if (^{key}===0) { ^{none} } 
      
        loop '''
          for (^{key}=0; ^{key}<^{length}; ^{key}++) {
          ^{task}(^{list}[^{key}],^{key},^{list});
          }
      
        text from $tools.replacer preface + loop + elseclause, vars

    else
      return: error "Unhandled construct type ${main.type} in PlyConstruct"
  
  catch
    debug error
    
  return: body text


///////////////   WHILE / UNTIL
//
//

WhileConstruct task expects $clauses, $tools

  set main $clauses.0

  try
    
    switch main.type
  
    case 'while.exproutblock'

      set 
        outs from my OutVarHelper main.args.out
      
        vars:
          block main.args.block
          'source' main.args.expr
          'this' outs.0 default false
    
        preface '''
          var ^{this};

        loop '''
          while (^{this}=(^{source})) {
          ^{block}
          }
      
        text from $tools.replacer preface + loop, vars

    case 'until.exproutblock'

      set 
        vars:
          block main.args.block
          'source' main.args.expr
    
        loop '''
          while (!(^{source})) {
          ^{block}
          }
      
        text from $tools.replacer loop, vars

    case 'dowhile.exproutblock'

      set 
        vars:
          block main.args.block
          'source' main.args.expr
    
        loop '''
          do { 
          ^{block}
          } while (^{source});
      
        text from $tools.replacer loop, vars

    case 'dountil.exproutblock'

      set 
        vars:
          block main.args.block
          'source' main.args.expr
    
        loop '''
          do { 
          ^{block}
          } while (!(^{source}));
      
        text from $tools.replacer loop, vars


    else
      return: error "Unhandled construct type ${main.type} in WhileConstruct"

  catch
    debug error
    
  return: body text


///////////////   COUNT
//
//

CountConstruct task expects $clauses, $tools

 if $clauses.length > 2
   return: error 'SAI compile: COUNT can have at most one ELSE clause.'

 set main $clauses.0
 set none $clauses.1

 try
  
   set outs from my OutVarHelper main.args.out

   switch main.type

   case 'count.exprsoutblock'

   

     unless main.args.exprs.0 
       return: error 'SAI Compiler: Missing end value in COUNT'

     set
       iStart main.args.exprs.0 
       iStop main.args.exprs.1 
       iStep main.args.exprs.2 default 1
       
     if undefined is iStop
      set iStop to iStart
      set iStart to 0
      
     set 
       vars:
         block main.args.block
         'start' iStart
         'kstop' iStop
         'stop' false
         'kstep' iStep
         'step' false
         'counter' outs.0 default false
         none ?none.args.block default false
  
       preface '''
         var ^{counter}=^{start},^{stop}=^{kstop},^{step}=^{kstep};
         if (^{step}<=0) throw new Error("SAI Runtime: COUNT STEP value should be positive.");

       elseclause from task
         unless none
           return ''
         else
           return '''
             if (^{counter}>=^{stop}) { ^{none} } else 
             
       loop '''
         for (; ^{counter}<^{stop}; ^{counter}=^{counter}+^{step}) {
         ^{block};
         }
    
       text from $tools.replacer preface + elseclause + loop, vars

   case 'countdown.exprsoutblock'

     unless main.args.exprs.0 
       return: error 'SAI Compiler: Missing start value in COUNTDOWN'

     set
       iStart main.args.exprs.0        
       iStop main.args.exprs.1 default 0
       iStep main.args.exprs.2 default -1
       
     set 
       vars:
         block main.args.block
         'start' iStart
         'kstop' iStop
         'stop' false
         'kstep' iStep
         'step' false
         'counter' outs.0 default false
         none ?none.args.block default false
  
       preface '''
         var ^{stop}=^{kstop},^{step}=^{kstep},^{counter}=^{start}+^{step};
         if (^{step}>=0) throw new Error("SAI Runtime: COUNTDOWN STEP value should be negative.");

       elseclause from task
         unless none
           return ''
         else
           return '''
             if (^{counter}<^{stop}) { ^{none} } else 
             
       loop '''
         for (; ^{counter}>=^{stop}; ^{counter}=^{counter}+^{step}) {
         ^{block};
         }
    
       text from $tools.replacer preface + elseclause + loop, vars

   else
     return: error "Unhandled construct type ${main.type} in CountConstruct"

 catch
   debug error
  
 return: body text


