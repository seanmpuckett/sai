
object TryCatchC singleton

inherit: Construct

// MANIFEST

manifest get 
  return:
    'constructs':
      'try':
        repeats false
        clauses:
          'try': #block
          'catch': #outblock
          'finally': #block
        handler bind TryConstruct
      
      'throw':
        repeats false
        clauses:
          'throw': #exprs
        handler bind ThrowConstruct
      

docs get
  return !Documents
  




TryConstruct task expects $clauses, $tools

  set pattern $clauses | total (.type | limit 1)
  unless pattern is 'tc' or pattern is 'tf' or pattern is 'tcf'
    return: error "SAI compiler: error in structure of TRY/CATCH/FINALLY: expected tc/tf/tcf, got ${pattern}"
  
  // args.exprs.0 = 'array' / 'fields'
  // args.exprs.1 = insertable text
  // args.exprs.2 = heirarchical structure of elements

  set body ''

  each $clauses
  
    switch .type
    case 'try.block'
      set body + 'try { ${.args.block} }\n'

    case 'catch.outblock'
      set outs !@OutVarHelper .args.out
      set vars:
        'error' outs.0
        'block' .args.block

      set text '''
        catch(^{error}) { ^{block} }
        
      set body + !$tools.replacer text, vars
      
    case 'finally.block'
      set body + 'finally { ${.args.block} }\n'

    else
      return: error "SAI compiler: unhandled ${.type} in TryConstruct -- this is a compiler bug."
      
  return: body body


ThrowConstruct task expects $clauses, $tools
  set body ''
  with $clauses.0
  
    switch .type
    case 'throw.exprs'
      set body 'throw ${.args.exprs.1};\n'
    else
      return: error "SAI compiler: unhandled ${.type} in ThrowConstruct -- this is a compiler bug."
  
  return: body body


Documents task
  return:
    'constructs':
      'try':
        subtitle 'handle exceptional errors'
        summary '''
          Exception handling construct.
        detail '''
          In addition to the standard Javascript stuff, SAI's "try" uses the 
          __error__ pronoun within the __catch__ clause to expose the caught error, 
          as seen in the example below.
          
              set file to new File 'output.log'
              try
                file.Open
                file.Write 'Hey, it's a log'
              catch 
                return error.message
              finally
                file.Close
  
          For details, see the Javacript exception documentation.
          
  
      'throw':
        subtitle 'generate an exception'
        summary '''
          Trigger exception handling.
        detail '''
          Example:
          
            try
              throw new Error 'Oh no!'
            catch 
              return error.message

          You should probably look at the Javascript documentation.

        
