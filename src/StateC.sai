
object StateC singleton

inherit: Construct

// MANIFEST

manifest get 
  return:
    'constructs':
      state:
        repeats true
        clauses:
          state: #exproutblock, #rvalue
        handler bind StateConstruct


docs get
  return !Documents


// STATE HANDLER

StateConstruct task expects $clauses, $tools

  set
    tools: '''
      var $state$getfn=function(states,state) {
        return $AI.assert(states[state],"SAI runtime: STATE "+state+" does not exist; available states are "+$AI.keys_op(states).join(','));
      }
      var $state$goto=function(states,state){
        var $=this;
        var fn=$state$getfn(states,state);
        var l=arguments.length, args=new Array(l-2);
        for (var li=2; li<l; li++) args[li-2]=arguments[li];
        setImmediate(function(){fn.apply($,args)});
      };
      var $state$then=function(states,state){
        var $=this;
        var fn=$state$getfn(states,state);
        var l=arguments.length, args=new Array(l-2);
        for (var li=2; li<l; li++) args[li-2]=arguments[li];
        return function(){
          var l=arguments.length;
          if (l) { 
            var o=args.length;
            args.length=l+o;
            for (var li=0; li<l; li++) args[o+li]=arguments[li];
          }
          fn.apply($,args);
        };
      };

    header to '''
      var ${from $tools.addlocal}=function(){
        var _goto,_then;
        var $states={

    trailer '''
      }
        _goto=$state$goto.bind($,$states);
        _then=$state$then.bind($,$states);
        _goto(${$clauses.0.args.expr});
      }();    

    names blank
    states empty

  each $clauses

    switch .type
    case 'state.exproutblock'
      set name .args.expr 
      
      if names\name
        return: error 'SAI compile: duplicate state ${name} in STATE construct'
      inc names\name
      
      set block !$tools.tasker:
        'as' .args.out
        block .args.block
        kind 'function'
      push!states "${name}:${block}"

    else
      return: error "Unhandled construct type ${.type} in StateConstruct"
    
  $tools.addlocal '_goto'
  $tools.addlocal '_then'
  
  set body to "${header}${join!states ','}${trailer}"
  return: body body, tools tools



Documents task
  return:
    'constructs':
      state:
        subtitle 'asynchronous finite state machine'
        summary '''
          The __state__ construct creates an asynchronous state machine (or finite automata) that can 
          be used for many different kinds of processes, from making requests or managing other machines, 
          to controlling and responding to near-realtime events. 
        detail '''
          Each declared __state__ is given a name (the value), and has an associated block of code. 
          Each block is a function, with optional parameters. These functions are invoked with 
          the __goto__ verb. The first parameter of __goto__ is the name of the state; any additional 
          parameters are passed in to the state function. 

              state [value1] (given [parameter list])
                ... code ...
                goto [value] (, [parameters for next state])
                ... code ...
              state [value2] (given [parameter list])
                goto etc...
              ... repeats for as many states as supplied

          The uppermost defined __state__ in the construct is the starting state by convention, 
          and it is invoked first. When you __goto__ a new state, you'll just be scheduling the next 
          state to occur next. You must `return` if you want its execution to stop immediately. If you 
          do not __goto__ another state, the machine ends (unless a callback into to a state happens 
          asynchronously). State machine context is preserved until there is no more opportunity for a callback.

          *Note*: The __state__ construct runs asynchronously. Synchronous code execution passes the 
          state machine definition instantly, and the first state executes on the next event loop 
          tick via node's `setImmediate`. Each time you __goto__ a new state, that state is also 
          scheduled asynchronously. 
          
          While the event loop is quite fast (perhaps 100k state transitions 
          per second on a laptop), you will want to avoid using the __state__ construct for applications 
          that require high performance and/or that do not benefit greatly from asynchronous response. 
          In these cases, a `while` loop around a `switch` statement is a good place to start.

          Context is preserved with the state machine, including the _current_ (this) object. You have 
          access to all member variables/methods of the object instance that invoked the __state__ construct. 
          Variables you `set` within any state are available to all states. However, `local` variables are 
          restricted to the state they're defined in. (Examine the generated Javascript code for clarity.) 

          Here is a simple example of a state machine, a Turing machine that adds two unary (bitcount) 
          numbers starting at the read head, extending right and separated by a single 0 digit.

              set Readout to task  // display Turing tape and current head position
                debug tape | into '' sum + ((key is head) ?? '[$\{it}]' :: ' $\{it} ')

              state 'start' // turing machine to add two numbers, in this case 3 & 4.
                set tape list 0, 1, 1, 1, 0, 1, 1, 1, 1, 0
                set head 1
                goto 'a'

              state 'a' 
                Readout
                if tape\head       // seek end of first number
                  set tape\head 1
                  inc head
                  goto 'a'
                else               // set bit between numbers
                  set tape\head 1
                  inc head
                  goto 'b'

              state 'b'
                Readout
                if tape\head       // seek end of second number
                  set tape\head 1
                  inc head
                  goto 'b'
                else
                  set tape\head 0  // rewind to end of second number
                  dec head
                  goto 'c'
  
              state 'c'
                Readout
                if tape\head       // clear bit at end of second number
                  set tape\head 0
                  dec head
                  goto 'd'
                else
                  debug "Should not be able to get here."
                  goto 'halt'
      
              state 'd'
                Readout
                if tape\head       // seek back to the beginning of the result
                  set tape\head 1
                  dec head
                  goto 'd'
                else
                  set tape\head 0  // return to first set bit and halt
                  inc head
                  goto 'halt'

              state 'halt'
                Readout
                debug "Run complete."

              debug "State machine started." // appears first because STATE is asynchronous

          The output is: 

              State machine started.
               0 [1] 1  1  0  1  1  1  1  0 
               0  1 [1] 1  0  1  1  1  1  0 
               0  1  1 [1] 0  1  1  1  1  0 
               0  1  1  1 [0] 1  1  1  1  0 
               0  1  1  1  1 [1] 1  1  1  0 
               0  1  1  1  1  1 [1] 1  1  0 
               0  1  1  1  1  1  1 [1] 1  0 
               0  1  1  1  1  1  1  1 [1] 0 
               0  1  1  1  1  1  1  1  1 [0]
               0  1  1  1  1  1  1  1 [1] 0 
               0  1  1  1  1  1  1 [1] 0  0 
               0  1  1  1  1  1 [1] 1  0  0 
               0  1  1  1  1 [1] 1  1  0  0 
               0  1  1  1 [1] 1  1  1  0  0 
               0  1  1 [1] 1  1  1  1  0  0 
               0  1 [1] 1  1  1  1  1  0  0 
               0 [1] 1  1  1  1  1  1  0  0 
              [0] 1  1  1  1  1  1  1  0  0 
               0 [1] 1  1  1  1  1  1  0  0 
              Run complete.

          There are many easier ways of programming a Turing machine without hardcoding everything 
          like this. This one does show off the __state__ construct fairly nicely, however.

          #### goto 

          Within the __state__ construct, the variable `goto` is defined as a function that schedules
          execution of the next state.  (This trickery should be essentially invisible, but just in case you
          need to know how, this is how.)

          ##### Parameters with __goto__

          __goto__ will pass any provide parameters on to the state function:
          
              state 'start' 
                debug "You're lost in a cave!"
                dountil maze\\pos is 'empty'
                  set pos !Rand size
                goto 'move', pos            // we're passing the new position here as POS
  
              state 'move' given newpos        // and it is recevied here as NEWPOS
                inc moves
                set position !Valid newpos
                debug " move \${moves} ... now in room \${position}"
                goto maze\\position

          #### then

          Similarly, __then__ is a function that _creates a function_ that immediately jumps to the next 
          state rather than rescheduling another state transition. In other words, __then__ is a callback
          creator.
          
          Use __then__ like this:
          
              state 'empty'
                ply array position-1, position+1 as adjacent
                  each features as dsc, feat
                    if feat is maze[from Valid adjacent]
                      debug dsc
          
                Timer 800, !then 'step'

              state 'step' 
                goto 'move', position + !Step
          
          This example does some housekeeping, delays for 800ms, _then_ the timer callback jumps to the 
          next state.

          ##### Parameters with __then__
          
          Because __then__ creates a callback function, there are _two_ opportunities for arguments to be 
          passed to the next state.
          
          1. When __then__ is executed to create the callback.
          2. When the callback is executed some later time.
          
          In the above example,
          
              Timer 800, !then 'step'
    
          This is the first opportunity for parameters to be passed.
          
          To make it clear, let's add one:

              ...
                Timer 800, !then 'step', !Step

              state 'step' given stepValue
                goto 'move', position + stepValue
          
          Parameters added at callback creation time are resolved immediately, even though they're not
          used until later. These parameters are invisibly bound into the callback function that is 
          created. In the above example, `stepValue` is calculated 800ms before the state change to `step`
          occurs; this step value waiting in the callback defined when the `Timer` function is invoked.
          
          The second opportunity is when the callback is actually made. In our example, let's say the timer 
          wishes to pass the real time it was resolved. And we want that data. But we also want our 
          `stepValue`, which was passed in earlier.
          
          Fortunately, we can have both pieces of data. The callback function that __then__ creates will
          append any arguments it receives _as a callback_ to the arguments bound to it _on callback 
          creation_. So we now have two parameters to our `step` state. 

              state 'step' given stepValue, resolvedTime
                debug "Timer resolved at \${resolvedTime}"
                goto 'move', position + stepValue
  
          Just to make it clear: `stepValue` was calculated and passed into the callback generator when we 
          started the timer, and `resolvedTime` was calculated and passed into the callback when
          the timer resolved. The callback concatentated them into one set of arguments for the call to
          the `step` state.
          
          If you unroll this, it looks something like this:
          
              then 'step', stepValue
               .. becomes ..
              callback invoking 'step' with stepValue
               .. which _later_ is invoked as ..
              callback resolvedTime
               .. which becomes ..
              invoke 'step' with stepValue, resolvedTime
              
          This works with any number of arguments provided at callback creation and resolution. Just be 
          sure you know how many of each there are when you pick them up in the _state handler_.

          I hope that's clear. And useful!
          
          