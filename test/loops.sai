
object Loops

inherit list
  Harness



Execute task

  @Match 'count to 4', 6, task
    set a to 0
    count 4
      set a + counter
    else
      return false
    return a

  @Match 'count to 1-5', 10, task
    set a to 0
    count 1, 5
      set a + counter
    else
      return false
    return a

  @Test 'count to 0', task
    count 0
      return false
    else
      return true
    return false

  @Test 'count to 1-1', task
    count 1, 1
      return false
    else
      return true
    return false

  @Match 'count down 4', 6, task
    set a to 0
    countdown 4
      set a + counter
    else
      return false
    return a

  @Match 'count down 4 2', 5, task
    set a to 0
    countdown 4, 2
      set a + counter
    else
      return false
    return a

  @Test 'count down 0', task
    set a to 0
    countdown 0
      return false
    else
      return true
    return false

  @Test 'count nothing', task
    set a to 0
    countdown 0
      return false
    else
      return true
    return false

  @Test 'nested count', task
    set total to 0
    count 5
      count counter+1
        count counter+1
          inc total
    return total=35

  set tdata to: a 1, b 2
  set ldata to: 1, 2
  
  @Match 'each it', 3, task
    set a to 0
    each tdata
      set a + it
    return a
    
  @Match 'each as', 3, task
    set a to 0
    each tdata as val
      set a + val
    return a
    
  @Match 'each key', 'ab', task
    set a to ''
    each tdata
      set a + key
    return a
    
  @Match 'each named key', 'ab', task
    set a to ''
    each tdata as v, k
      set a + k
    return a
    
  @Match 'each none', true, task
    each empty
      return false
    else
      return true
    return false
    
  @Match 'each undefined', true, task
    each undefined
      return false
    else
      return true
    return false
    
  @Match 'each number', true, task
    each 2
      return false
    else
      return true
    return false
    
  @Match 'each list it', 3, task
    set a to 0
    each ldata
      set a + it
    return a
    
  @Match 'each list key', '01', task
    set a to ''
    each ldata
      set a + key
    return a

  @Test 'each using array', task
    set a to: a 1, b 2, c 3
    set b to empty
    set c to task given v, k
      b.push: k, v
    each a using c
    else
      return false
    return b.length=3 and b.0.0='a' and b.0.1=1 and b.2.0='c' and b.2.1=3
            
  @Test 'each using array no else', task
    set a to: a 1, b 2, c 3
    set b to empty
    set c to task given v, k
      b.push: k, v
    each a using c
    return b.length=3 and b.0.0='a' and b.0.1=1 and b.2.0='c' and b.2.1=3

  @Test 'each using array empty', task
    set c to task given v, k
      b.push: k, v
    each blank using c
    else
      return true
    return false
      
  @Test 'ply using array empty', task
    set c to task given v, k
      b.push: k, v
    ply empty using c
    else
      return true
    return false
    
  @Test 'ply using array', task
    set a to: 1, 2, 3
    set b to empty
    set c to task given v, k
      b.push: k, v
    ply a using c
    else
      return false
    return b.length=3 and b.0.0=0 and b.0.1=1 and b.2.0=2 and b.2.1=3
            
  @Test 'ply using array no else', task
    set a to: 1, 2, 3
    set b to empty
    set c to task given v, k
      b.push: k, v
    ply a using c
    return b.length=3 and b.0.0=0 and b.0.1=1 and b.2.0=2 and b.2.1=3
      
      
  @Match 'ply it', 3, task
    set a to 0
    ply ldata
      set a + it
    return a
    
  @Match 'ply as', 3, task
    set a to 0
    ply ldata as val
      set a + val
    return a
    
  @Match 'ply key', '01', task
    set a to ''
    ply ldata
      set a + key
    return a
    
  @Match 'ply named key', '01', task
    set a to ''
    ply ldata as v, k
      set a + k
    return a
    
  @Match 'ply none', true, task
    ply empty
      return false
    else
      return true
    return false
    
  @Match 'ply undefined', true, task
    ply undefined
      return false
    else
      return true
    return false
    
  @Match 'ply number', true, task
    ply 2
      return false
    else
      return true
    return false
    
  @Match 'ply traits', true, task
    ply tdata
      return false
    else
      return true
    return false
    

    
  @Test 'count up break', task
    count 10
      break
      return false
    return true
    
  @Test 'count up continue', task
    count 10
      continue
      return false
    return true
    
  @Test 'count down break', task
    countdown 10
      break
      return false
    return true
    
  @Test 'count down continue', task
    countdown 10
      continue
      return false
    return true
    
  @Test 'ply break', task
    ply: 1,2,3,4
      break
      return false
    return true
    
  @Test 'ply continue', task
    ply: 1,2,3,4
      continue
      return false
    return true
    
  @Test 'each break', task
    each: 1,2,3,4
      break
      return false
    return true
    
  @Test 'each continue', task
    each: 1,2,3,4
      continue
      return false
    return true
    
  @Test 'iterate break', task
    iterate (:1,2,3,4) |iterate
      break
      return false
    return true
    
  @Test 'iterate continue', task
    iterate (:1,2,3,4) |iterate
      continue
      return false
    return true
    
  @Test 'while break', task
    while 1
      break
      return false
    return true
    
  @Test 'while continue', task
    set a to 1
    while a
      dec a
      continue
      return false
    return true
    
  @Test 'iterate map', task
    set a to new ~Map
    a.set 'a',1
    a.set 'b',2
    a.set 'c',3
    set b to: '',''
    iterate a
      set b.0 + .0
      set b.1 + .1
    return b.1='123' and b.0='abc'
      
  @Test 'until', task
    set a to 0
    until a
      set a to 1
    return true
    
  @Test 'do while', task
    dowhile false
      return true
    return false
    
  @Test 'do until', task
    dountil true
      return true
    return false
    
  @Test 'while as', task
    set a to false
    while true
      set a to it
      break
    return a
    
  @Test 'every array', task
    set a to: 1, 2, 3
    set b to empty
    every a
      b.push: key, it
    else
      return false
    return b.length=3 and b.0.0=0 and b.0.1=1 and b.2.0=2 and b.2.1=3
      
  @Test 'every array named', task
    set a to: 1, 2, 3
    set b to empty
    every a as v, k
      b.push: k, v
    else
      return false
    return b.length=3 and b.0.0=0 and b.0.1=1 and b.2.0=2 and b.2.1=3
      
  @Test 'every array no else', task
    set a to: 1, 2, 3
    set b to empty
    every a
      b.push: key, it
    return b.length=3 and b.0.0=0 and b.0.1=1 and b.2.0=2 and b.2.1=3
      
  @Test 'every using array', task
    set a to: 1, 2, 3
    set b to empty
    set c to task given v, k
      b.push: k, v
    every a using c
    else
      return false
    return b.length=3 and b.0.0=0 and b.0.1=1 and b.2.0=2 and b.2.1=3
            
  @Test 'every using array no else', task
    set a to: 1, 2, 3
    set b to empty
    set c to task given v, k
      b.push: k, v
    every a using c
    return b.length=3 and b.0.0=0 and b.0.1=1 and b.2.0=2 and b.2.1=3
      
  @Test 'every empty array', task
    set a to empty
    set b to false
    every a
      b.push: key, it
    else
      set b true
    return b is true
      
  @Test 'every iterator', task
    set a to: 1, 2, 3; |iterate
    set b to empty
    every a
      b.push: key, it
    else
      return false
    return b.length=3 and b.0.0=0 and b.0.1=1 and b.2.0=2 and b.2.1=3
      
  @Test 'every empty iterator', task
    set a to empty |iterate
    set b to false
    every a
      b.push: key, it
    else
      set b true
    return b is true
      
  @Test 'every object', task
    set a to: a 1, b 2, c 3
    set b to empty
    every a
      b.push: key, it
    else 
      return false
    return b.length=3 and b.0.0='a' and b.0.1=1 and b.2.0='c' and b.2.1=3
      
  @Test 'every blank object', task
    set a to blank
    set b to false
    every a
      b.push: key, it
    else
      set b to true
    return b is true
      
  @Test 'every undefined', task
    every undefined
      return false
    else
      return true
      
  @Test 'every value', task
    set b to empty
    every 1
      b.push: key, it
    else
      return false
    return b.length is 1 and b.0.0 is 0 and b.0.1 is 1
    