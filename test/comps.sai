
object Comps

inherit list
  Harness



Execute task

  // first section tests low level functionality, not the parser

  @Test 'filter undef', task
    set b to undefined has true
    return b is undefined
    
  @Test 'filter value true', task
    set b to 'a' has it='a'
    return b is 'a'
    
  @Test 'filter value false', task
    set b to 'a' has it='b'
    return b is undefined
    
  @Test 'has list all', task
    set b to: 1, 2, 3; has it
    return b[0]=1 and b[1]=2 and b[2]=3 and b.length = 3
    
  @Test 'filter list some', task
    set b to: 1, 2, 3; has it>1
    return b[0]=2 and b[1]=3 and b.length = 2
    
  @Test 'filter list none', task
    set b to: 1, 2, 3; has it>4
    return b.length = 0
    
  @Test 'filter traits all', task
    set b to: a 1, b 2, c 3; has it>0
    return b.a=1 and b.b=2 and b.c=3
    
  @Test 'filter traits some', task
    set b to: a 1, b 2, c 3; has it>1
    return b.a is undefined and b.b=2 and b.c=3
    
  @Test 'filter traits none', task
    set b to: a 1, b 2, c 3; has it>4
    return b.a is undefined and b.b is undefined and b.c is undefined
    
  @Test 'filter iterator odds', task
    set b to: 1,2,3,4,5; sow has it%2
    count 3
      unless b.next().value = key*2+1
        return false
    return true
  
  @Test 'sort undef', task
    set b to undefined by it
    return b is undefined
  
  @Test 'sort value', task
    set b to 'fred' by it
    return b='fred'
    
  @Test 'sort list', task
    set b to: 3,2,1; by it
    return b[0]=1 and b[1]=2 and b[2]=3 and b.length=3
    
  @Test 'sort traits', task
    set b to: a 3,b 2,c 1; by it
    return b[0]=1 and b[1]=2 and b[2]=3 and b.length=3
  
    
  @Test 'thru undef', task
    set b to undefined thru it
    return b is undefined
    
  @Test 'thru value', task
    set b to 1 thru it+1
    return b=2
    
  @Test 'thru list', task
    set b to: 1, 2, 3; thru it+1
    return b[0]=2 and b[1]=3 and b[2]=4 and b.length=3
    
  @Test 'thru traits', task
    set b to: a 1, b 2, c 3; thru it+1
    return b.a=2 and b.b=3 and b.c=4
   
  @Match 'thru iterator', 5, task
     set b to: 1,3,5; sow thru it+2
     b.next
     return b.next().value
     
    
    
  @Match 'gather no list into', 'a', task
    set b to empty gather into 'a'
       return accum+it
    return b
    
  @Test 'gather no list no into', task
    set b to empty gather
       return accum+it
    return b is undefined

  @Match 'gather 1 list into', 'aa', task
    set b to list a; gather into 'a'
       return accum+it
    return b
    
  @Match 'gather 1 list no into', 'a', task
    set b to list a; gather
       return accum+it
    return b

  @Match 'gather 3 list into', 'abc', task
    set b to list a,b,c; gather into ''
       return accum+it
    return b
    
  @Match 'gather 3 list no into', 'abc', task
    set b to list a,b,c; gather
       return accum+it
    return b

  @Match 'gather no traits into', 'a', task
    set b to blank gather into 'a'
       return accum+key+it
    return b

  @Test 'gather no traits no into', task
    set b to blank gather 
       return accum+key+it
    return b is undefined

  @Match 'gather 1 trait into', 'a1', task
    set b to: a 1; gather into ''
       return accum+key+it
    return b

  // GIGO result expected because gather can't intuit key+it value
  @Match 'gather 1 traits no into', '1', task
    set b to: a 1; gather 
       return accum+key+it
    return b

  @Match 'gather 3 traits into', 'a1b2c3', task
    set b to: a 1, b 2, c 3; gather into ''
       return accum+key+it
    return b

  // GIGO result expected because gather can't intuit key+it value
  @Match 'gather 3 traits no into', '1b2c3', task
    set b to: a 1, b 2, c 3; gather 
       return accum+key+it
    return b

  @Match 'gather value no into', 'a', task
    set b to 'a' gather
      return accum+it
    return b
    
  @Match 'gather value into', 'ba', task
    set b to 'a' gather into 'b'
      return accum+it
    return b
    
  @Test 'gather undefined', task
    set b to undefined gather
      return accum+it
    return b is undefined
     





     
     
  // test data

  set friends to:
    :name 'Sara', age 23, #cat, province 'ON'
    :name 'John', age 19, #cat, #dog, province 'ON'
    :name 'Ellie', age 22, province 'QC'
    :name 'Marshal', age 21, #dog, province 'ON'
    :name 'Doug', age 18, province 'ON'
    :name 'Ann', age 23, #cat, province 'QC'
    :name 'Harry', age 31, province 'QC'
    :name 'Jenna', age 28, #dog, province 'ON'  

  
  @Match 'has task', 'Sara', task
    return friends has using task
      return $name='Sara'
    ... thru .name

  @Match 'by task', 'Doug', task
    return friends by using task as a,b
      return a.age <=> b.age
    ... limit 1 thru .name

  @Match 'thru task', 'SARA', task
    return friends thru using task
      return from $name.toUpperCase
    ... first
    
  @Match 'gather task', 185, task
    return friends gather into 0 using task as acc,val
      return acc+val.age
    
  @Match 'age total into', 185, task
    return friends gather into 0
      set accum + .age
  
  @Match '#cat count', 3, task
    return (friends #cat).length
  
  @Match '!#cat count', 5, task
    return (friends !#cat).length
  
  @Match '#cat #dog count', 1, task
    return (friends #cat #dog).length

  @Match '#cat !#dog count', 2, task
    return (friends #cat !#dog).length
  
  @Match '#ferret count', 0, task
    return (friends #ferret).length
        
  @Match 'first', 'Sara', task
    return (friends first).name
      
  @Match 'youngest dog', 'John', task
    return (friends #dog lowest .age).name

  @Match 'youngest quebec', 'Ellie', task
    return (friends has .province='QC' lowest .age).name

  @Match 'longest name', 'Marshal', task
    return (friends highest .name.length).name

  @Match 'youngest', 'Doug', task
    return (friends by .age first).name

  @Match 'lowest name', 'Ann', task
    return (friends by .name limit 1)[0].name
  
  @Match 'eldest', 'Harry', task
    return (friends highest .age).name

  @Match 'last', 'Jenna', task
    return (friends last).name
    
  
