
object Comps

inherit list
  Harness



Execute task

  // first section tests low level functionality, not the parser

  @Test 'filter undef', task
    set b to undefined has true
    return b is undefined
    
  @Test 'filter value true', task
    set b to 'a' has it='a'
    return b is 'a'
    
  @Test 'filter value false', task
    set b to 'a' has it='b'
    return b is undefined
    
  @Test 'has list all', task
    set b to: 1, 2, 3; has it
    return b[0]=1 and b[1]=2 and b[2]=3 and b.length = 3
    
  @Test 'filter list some', task
    set b to: 1, 2, 3; has it>1
    return b[0]=2 and b[1]=3 and b.length = 2
    
  @Test 'filter list none', task
    set b to: 1, 2, 3; has it>4
    return b.length = 0
    
  @Test 'filter traits all', task
    set b to: a 1, b 2, c 3; has it>0
    return b.a=1 and b.b=2 and b.c=3
    
  @Test 'filter traits some', task
    set b to: a 1, b 2, c 3; has it>1
    return b.a is undefined and b.b=2 and b.c=3
    
  @Test 'filter traits none', task
    set b to: a 1, b 2, c 3; has it>4
    return b.a is undefined and b.b is undefined and b.c is undefined
    
  @Test 'filter iterator odds', task
    set b to: 1,2,3,4,5; iterate has it%2
    count 3
      unless b.next().value = counter*2+1
        return false
    return true
  
  @Test 'sort undef', task
    set b to undefined by it
    return b is undefined
  
  @Test 'sort value', task
    set b to 'fred' by it
    return b='fred'
    
  @Test 'sort list', task
    set b to: 3,2,1; by it
    return b[0]=1 and b[1]=2 and b[2]=3 and b.length=3
    
  @Test 'sort traits', task
    set b to: a 3,b 2,c 1; by it
    return b[0]=1 and b[1]=2 and b[2]=3 and b.length=3
  
    
  @Test 'thru inline undef', task
    set b to undefined thru it
    return b is undefined
    
  @Test 'thru inline value', task
    set b to 1 thru it+1
    return b=2
    
  @Test 'thru inline list', task
    set b to: 1, 2, 3; thru it+1
    return b[0]=2 and b[1]=3 and b[2]=4 and b.length=3
    
  @Test 'thru inline traits', task
    set b to: a 1, b 2, c 3; thru it+1
    return b.a=2 and b.b=3 and b.c=4
   
  @Match 'thru inline iterator', 5, task
     set b to: 1,3,5; iterate thru it+2
     b.next
     return b.next().value
     
  @Test 'thru block', task
    set b to: a 1, b 2, c 3; thru 
      return it+1
    return b.a=2 and b.b=3 and b.c=4
   
  @Test 'thru using', task
    set c to task
      return $+1
    set b to: a 1, b 2, c 3; thru using c
    return b.a=2 and b.b=3 and b.c=4
   
  @Test 'audit value', task
    set b to 1 audit it+1
    return b=1
    
  @Test 'audit list', task
    set b to: 1, 2, 3; audit it+1
    return b[0]=1 and b[1]=2 and b[2]=3 and b.length=3
    
  @Test 'audit inline traits', task
    set d to 0
    set c to task
      set d + $
    set b to: a 1, b 2, c 3; audit from c it
    return b.a=1 and b.b=2 and b.c=3 and d=6
   
  @Test 'audit block traits', task
    set d to 0
    set b to: a 1, b 2, c 3; audit 
      set d + it
    return b.a=1 and b.b=2 and b.c=3 and d=6
   
  @Test 'audit using traits', task
    set d to 0
    set c to task
      set d + $
    set b to: a 1, b 2, c 3; audit using c
    return b.a=1 and b.b=2 and b.c=3 and d=6
   
  @Match 'audit iterator', 3, task
     set b to: 1,3,5; iterate audit it+2
     b.next
     return b.next().value
     
  @Match 'observe list', '2', task
    set a to false
    set Setter to task
      set a to $
    set b to: 1,2; observe from Setter it.length
    unless b.length=2 and b|0=1 and b|1=2
      return false
    return a
    
  @Test 'observe block', task
    set b to 0
    set a to 1 observe
      set b to it+1
    return b=2 and a=1
  
  @Test 'observe inline', task
    set a to 0
    set b to task
       set a to $+1
    set c to 1 observe from b it
    return c=1 and a=2
  
  @Test 'observe using', task
    set a to 0
    set b to task
       set a to $+1
    set c to 1 observe using b
    return c=1 and a=2
  
  
  // the exception is the correct case
  //@Test 'observe iterator', task
  //  try
  //    set b to: 1,2,3; iterate observe 
  //      debug it.length
  //  catch
  //    return true
  //  return false
    
    
  @Match 'set value block', '1', task
    return 2 set
      return 1
  
  @Match 'set value inline', '1', task
    return 2 set 1
  
  @Test 'set block', task
    set b to: 2; set
       it.unshift 1
    if b.length=2 and b|0=1 and b|1=2
      return true
    return false
    
  @Test 'set inline 1', task
    set Unshifter to task as l,v
      l.unshift v
      return l
    set b to: 2; set from Unshifter it, 1
    if b.length=2 and b|0=1 and b|1=2
      return true
    return false
    
  @Test 'set inline 2', task
    set b to: 2, 1; set from it.reverse
    if b.length=2 and b|0=1 and b|1=2
      return true
    return false
    
  @Test 'set using', task
    set rev to task
      return from $.reverse
    set b to: 2, 1; set using rev
    if b.length=2 and b|0=1 and b|1=2
      return true
    return false
    
  @Match 'into no list', 'a', task
    set b to empty into 'a'
       return sum+it
    return b
    
  @Test 'into no list it', task
    set b to empty into it
       return sum+it
    return b is undefined

  @Match 'into 1 list into', 'aa', task
    set b to list a; into 'a'
       return sum+it
    return b
    
  @Match 'into 1 list it', 'a', task
    set b to list a; into it
       return sum+it
    return b

  @Match 'into 3 list ', 'abc', task
    set b to list a,b,c; into ''
       return sum+it
    return b
    
  @Match 'into 3 list it', 'abc', task
    set b to list a,b,c; into it
       return sum+it
    return b

  @Match 'into no traits', 'a', task
    set b to blank into 'a'
       return sum+key+it
    return b

  @Test 'into no traits it', task
    set b to blank into it 
       return sum+key+it
    return b is undefined

  @Match 'into 1 trait', 'a1', task
    set b to: a 1; into ''
       return sum+key+it
    return b

  // GIGO result expected because into can't intuit key+it value
  @Match 'into 1 traits it', '1', task
    set b to: a 1; into it 
       return sum+key+it
    return b

  @Match '3 traits into', 'a1b2c3', task
    set b to: a 1, b 2, c 3;  into ''
       return sum+key+it
    return b

  // GIGO result expected because into can't intuit key+it value
  @Match 'into 3 traits it', '1b2c3', task
    set b to: a 1, b 2, c 3; into it 
       return sum+key+it
    return b

  @Match 'into value it', 'a', task
    set b to 'a' into it
      return sum+it
    return b
    
  @Match 'into value ', 'ba', task
    set b to 'a' into 'b'
      return sum+it
    return b
    
  @Test 'into undefined it', task
    set b to undefined into it
      return sum+it
    return b is undefined
     
  @Match 'into 1 iterable ', 'aa', task
    set b to list a; iterate into 'a'
       return sum+it
    return b.next().value
    
  @Match 'into 1 iterable it', 'a', task
    set b to list a; iterate into it
       return sum+it
    return b.next().value

  @Match 'into 3 iterable', 'abc', task
    set b to list a,b,c; iterate into ''
       return sum+it
    return b.next().value
    
  @Match 'into 3 iterable it', 'abc', task
    set b to list a,b,c; iterate into it
       return sum+it
    return b.next().value

  @Match 'into 3 iterable inline ', 'abc', task
    set b to list a,b,c; iterate into '' sum+it
    return b.next().value
    
  @Match 'into 3 iterable inline it', 'abc', task
    set b to list a,b,c; iterate into it sum+it
    return b.next().value

  




     
     
  // test data

  set friends to:
    :name 'Sara', age 23, #cat, province 'ON'
    :name 'John', age 19, #cat, #dog, province 'ON'
    :name 'Ellie', age 22, province 'QC'
    :name 'Marshal', age 21, #dog, province 'ON'
    :name 'Doug', age 18, province 'ON'
    :name 'Ann', age 23, #cat, province 'QC'
    :name 'Harry', age 31, province 'QC'
    :name 'Jenna', age 28, #dog, province 'ON'  

  
  @Match 'has task', 'Sara', task
    return friends has using task
      return $name='Sara'
    ... thru .name

  @Match 'by task', 'Doug', task
    return friends by using task as a,b
      return a.age <=> b.age
    ... limit 1 thru .name

  @Match 'thru task', 'SARA', task
    return friends thru using task
      return from $name.toUpperCase
    ... first
    
  @Match 'into task', 185, task
    return friends into 0 using task as acc,val
      return acc+val.age
    
  @Match 'age total into', 185, task
    return friends into 0
      set sum + .age
  
  @Match '#cat count', 3, task
    return (friends #cat).length
  
  @Match '!#cat count', 5, task
    return (friends !#cat).length
  
  @Match '#cat #dog count', 1, task
    return (friends #cat #dog).length

  @Match '#cat !#dog count', 2, task
    return (friends #cat !#dog).length
  
  @Match '#ferret count', 0, task
    return (friends #ferret).length
        
  @Match 'first', 'Sara', task
    return (friends first).name
      
  @Match 'youngest dog', 'John', task
    return (friends #dog lowest .age).name

  @Match 'youngest quebec', 'Ellie', task
    return (friends has .province='QC' lowest .age).name

  @Match 'longest name', 'Marshal', task
    return (friends highest .name.length).name

  @Match 'youngest', 'Doug', task
    return (friends by .age first).name

  @Match 'lowest name', 'Ann', task
    return (friends by .name limit 1)[0].name
  
  @Match 'eldest', 'Harry', task
    return (friends highest .age).name

  @Match 'last', 'Jenna', task
    return (friends last).name
    
  
  @Test 'enlist undefined', task
    set a to undefined enlist
    return a is undefined
    
  @Test 'enlist value', task
    set a to 3 enlist
    return ~Array.isArray(a) and a[0]=3 and a.length=1
    
  @Test 'enlist string', task
    set a to 'bob' enlist
    return ~Array.isArray(a) and a[0]='bob' and a.length=1
  
  @Test 'enlist array', task
    set a to (:1, 2) enlist
    return ~Array.isArray(a) and a[0]=1 and a[1]=2 and a.length=2
    
  @Test 'enlist object', task
    set a to: a 1,  b 2; enlist
    return ~Array.isArray(a) and a|0|0='a' and a|0|1=1 and a|1|0='b' and a|1|1=2 and a.length=2
    
  @Test 'enlist iterable', task
    set a to :1,3,5; iterate enlist
    set b to 0
    ply a
      set b + it
    return b=9
  
  @Test 'entrait undefined', task
    set a to undefined entrait
    return a is undefined
    
  @Test 'entrait value', task
    set a to 3 entrait
    return a[3]=true
    
  @Test 'entrait array 1', task
    set a to:(:1,4),(:2); entrait
    return a[1]=4 and a[2] is undefined
    
  @Test 'entrait object', task
    set a to: #a,  b 2; entrait
    return a.a=true and a.b=2
    
  @Test 'entrait iterable', task
    set a to :(:1,'a'),(:3,1),(:5); iterate entrait
    return a|1='a' and a|3=1 and a|5 is undefined
  
  
  @Test 'enlist entrait', task
    set a to: fred 1, bill 2, cal 3; enlist entrait
    return a.fred=1 and a.bill=2 and a.cal=3
    
    