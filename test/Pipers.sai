
object Pipers

inherit list
  Harness



Execute task

  @Test 'replicate 3', task
    set b 'a' | replicate 3
    return b's length is 3 and b.0 is 'a' and b.1 is 'a' and b.2 is 'a'
    
  @Test 'keys comp undefined', task
    set a to undefined | keys
    return ~Array.isArray(a) and (a.length = 0)
  
  @Test 'keys comp value', task 
    set a to 1 | keys
    return ~Array.isArray(a) and (a.length=0)
  
  @Test 'keys comp list', task 
    set a to: 1, 2; |keys
    return ~Array.isArray(a) and (a.length=2) and (a.0=0) and (a.1=1)
    
  @Test 'keys comp traits', task
    set a to: a 1, b 2; |keys
    return ~Array.isArray(a) and (a.length=2) and (a.0='a') and (a.1='b')

  @Test 'keys comp iterable', task
    set a to (list a,b; |iterate) |keys
    return ~Array.isArray(a) and (a.length=2) and (a.0='0') and (a.1='1')

    
  @Test 'values comp undefined', task
    set a to undefined | values
    return ~Array.isArray(a) and (a.length is 0)
    
  @Test 'values comp value', task
    set a to 1 |values
    return ~Array.isArray(a) and (a.0=1)
    
  @Test 'values comp list', task
    set b to: 1, 2
    set a to b |values
    set b.0 to 3
    return ~Array.isArray(a) and (a.length=2) and (a.0=1) and (a.1=2)
    
  @Test 'values comp traits', task
    set a to: a 1, b 2; |values
    return ~Array.isArray(a) and (a.length=2) and (a.0=1) and (a.1=2)

  @Test 'values comp iterable', task
    set a to (list 1,2; |iterate) |values
    return ~Array.isArray(a) and (a.length=2) and (a.0=1) and (a.1=2)

  @Test 'enlist undefined', task
    set a to undefined |enlist
    return a is undefined
    
  @Test 'enlist value', task
    set a to 3 |enlist
    return ~Array.isArray(a) and a[0]=3 and a.length=1
    
  @Test 'enlist string', task
    set a to 'bob' | enlist
    return ~Array.isArray(a) and a[0]='bob' and a.length=1
  
  @Test 'enlist array', task
    set a to (:1, 2) | enlist
    return ~Array.isArray(a) and a[0]=1 and a[1]=2 and a.length=2
    
  @Test 'enlist object', task
    set a to: a 1,  b 2; |enlist
    return ~Array.isArray(a) and a.0.0='a' and a.0.1=1 and a.1.0='b' and a.1.1=2 and a.length=2
    
  @Test 'enlist iterable', task
    set a to :1,3,5; |iterate |enlist
    set b to 0
    ply a
      set b + it
    return b=9
  
  @Test 'entrait undefined', task
    set a to undefined |entrait
    return a is undefined
    
  @Test 'entrait value', task
    set a to 3 |entrait
    return a[3]=true
    
  @Test 'entrait array 1', task
    set a to:(:1,4),(:2); |entrait
    return a[1]=4 and a[2] is undefined
    
  @Test 'entrait object', task
    set a to: #a,  b 2; |entrait
    return a.a=true and a.b=2
    
  @Test 'entrait iterable', task
    set a to :(:1,'a'),(:3,1),(:5); |iterate |entrait
    return a.1='a' and a.3=1 and a.5 is undefined
  
  @Test 'enlist entrait', task
    set a to: fred 1, bill 2, cal 3; |enlist |entrait
    return a.fred=1 and a.bill=2 and a.cal=3
  
  
  @Match 'concat undef undef', true, task
    set a undefined |concat undefined
    return a is undefined

  @Match 'concat undef val', true, task
    set a 1 |concat undefined
    return a[0]=1 and a.length=1

  @Test 'concat undef list', task
    set a undefined |concat: 1, 2
    return a.0=1 and a.1=2 and a.length=2
    
  @Test 'concat undef iterable', task
    set a undefined |concat ((array 1, 2) |iterate)
    set a to a |collect
    return a.0=1 and a.1=2 and a.length=2

  @Test 'concat list undef', task
    set a (array 1, 2) |concat undefined
    set a to a |collect
    return a.0=1 and a.1=2 and a.length=2
    
  @Test 'concat iterable undef', task
    set a ((array 1, 2) |iterate) |concat undefined
    set a to a |collect
    return a.0=1 and a.1=2 and a.length=2

  @Test 'concat inplace self', task
    set a: 1, 2
    set a |concat: 3, 4
    return a.0=1 and a.1=2 and a.2=3 and a.3=4 and a.length=4

  @Match 'concat val undef', true, task
    set a undefined |concat 1
    return a[0]=1 and a.length=1

  @Match 'concat val val', true, task
    set a 1 |concat 2
    return a.0=1 and a.1=2 and a.length=2

  @Test 'concat val list', task
    set a 1 |concat: 2, 3
    return a.0=1 and a.1=2 and a.2=3 and a.length=3
    
  @Test 'concat list val', task
    set a (array 1, 2) |concat 3
    return a.0=1 and a.1=2 and a.2=3 and a.length=3

  @Test 'concat val obj', task
    set b: a 1
    set a 2 |concat b
    return a.0=2 and a.1.a=1 and a.length=2
    
  @Test 'concat obj val', task
    set b: a 1
    set a b |concat 2
    return a.0.a=1 and a.1=2 and a.length=2

  @Test 'concat obj obj', task
    set c: a 1
    set d: b 2
    set a c |concat d
    return a.0.a=1 and a.1.b=2 and a.length=2
    
  @Test 'concat list list', task
    set a (array 1, 2) |concat (array 3, 4)
    return a.0=1 and a.1=2 and a.2=3 and a.3=4 and a.length=4
    
  @Test 'concat iter iter', task
    set q (array 1, 2) |iterate
    set r (array 3, 4) |iterate
    set i q |concat r
    set a i |collect
    return a.0=1 and a.1=2 and a.2=3 and a.3=4 and a.length=4
    
  @Test 'concat list iter', task
    set q (array 1, 2) 
    set r (array 3, 4) |iterate
    set i q |concat r
    set a i |collect
    return a.0=1 and a.1=2 and a.2=3 and a.3=4 and a.length=4

  @Test 'concat iter list', task
    set q (array 1, 2) |iterate
    set r (array 3, 4) 
    set i q |concat r
    set a i |collect
    return a.0=1 and a.1=2 and a.2=3 and a.3=4 and a.length=4

  @Test 'concat iter val', task
    set q (array 1, 2) |iterate
    set i q |concat 3
    set a i |collect
    return a.0=1 and a.1=2 and a.2=3 and a.length=3

  @Test 'concat val iter', task
    set q (array 3, 4) |iterate
    set a 1 |concat q
    return a.0=1 and a.1=3 and a.2=4 and a.length=3

  @Test 'concat obj iter', task
    set q (array 3, 4) |iterate
    set a (: a 1) |concat q
    return a.0.a=1 and a.1=3 and a.2=4 and a.length=3

  @Test 'concat iter obj', task
    set q (array 1, 2) |iterate
    set i q |concat (: d 4)
    set a i |collect
    return a.0=1 and a.1=2 and a.2.d=4 and a.length=3

  
  @Test 'thru inline undef', task
    set b to undefined |thru it
    return b is undefined
    
  @Test 'thru inline value', task
    set b to 1 |thru it+1
    return b=2
    
  @Test 'thru inline list', task
    set b to: 1, 2, 3; |thru it+1
    return b[0]=2 and b[1]=3 and b[2]=4 and b.length=3
    
  @Test 'thru inline traits', task
    set b to: a 1, b 2, c 3; |thru it+1
    return b.a=2 and b.b=3 and b.c=4
   
  @Match 'thru inline iterator', 5, task
     set b to: 1,3,5; |iterate |thru it+2
     b.next
     return b.next().value
     
  @Test 'thru block', task
    set b to: a 1, b 2, c 3; |thru 
      return it+1
    return b.a=2 and b.b=3 and b.c=4
   
  @Test 'thru using', task
    set c to task
      return $+1
    set b to: a 1, b 2, c 3; |thru using c
    return b.a=2 and b.b=3 and b.c=4
   

  @Match 'into no list', 'a', task
    set b to empty | into 'a'
       return sum+it
    return b
    
  @Test 'total no list', task
    set b to empty | total
    return b is undefined

  @Match 'into 1 list into', 'aa', task
    set b to list a; | into 'a'
       return sum+it
    return b
    
  @Match 'total 1 list', 'a', task
    set b to list a; | total
    return b

  @Match 'into 3 list ', 'abc', task
    set b to list a,b,c; | into ''
       return sum+it
    return b
    
  @Match 'total 3 list', 'abc', task
    set b to list a,b,c; | total
    return b

  @Match 'into no traits', 'a', task
    set b to blank | into 'a'
       return sum+key+it
    return b

  @Test 'total no traits', task
    set b to blank | total sum+key+it
    return b is undefined

  @Match 'into 1 trait', 'a1', task
    set b to: a 1; | into ''
       return sum+key+it
    return b

  @Match '3 traits into', 'a1b2c3', task
    set b to: a 1, b 2, c 3; | into ''
       return sum+key+it
    return b

  @Match 'total 3 traits', 'a1b2c3', task
    set b to: a 1, b 2, c 3; | total key+it
    return b

  @Match 'total value', 'a', task
    set b to 'a' | total
    return b
    
  @Match 'into value ', 'ba', task
    set b to 'a' | into 'b'
      return sum+it
    return b
    
  @Test 'total undefined', task
    set b to undefined | total
    return b is undefined
     
  @Match 'into 1 iterable ', 'aa', task
    set b to list a; |iterate | into 'a'
       return sum+it
    return b.next().value

  @Match 'total 1 iterable', 'a', task
    set b to list a; |iterate | total
    return b.next().value

  @Match 'into 3 iterable', 'abc', task
    set b to list a,b,c; |iterate | into ''
       return sum+it
    return b.next().value
    
  @Match 'total 3 iterable', 'abc', task
    set b to list a,b,c; |iterate | total
    return b.next().value

  @Match 'into 3 iterable using it', 'abc', task
    set s to task given s,i,k
      return s+i
    set b to list a,b,c; |iterate | into '' using s
    return b.next().value

  @Match 'total 3 iterable using', 'abc', task
    set s to task given s,i,k
      return s ?? s+i :: i
    set b to list a,b,c; |iterate | total using s
    return b.next().value

  @Match 'into 3 iterable using blank', 'abc', task
    set s to task given s,i,k
      return s+i
    set b to list a,b,c; |iterate | into '' using s
    return b.next().value

  @Match 'into 3 iterable inline it', 'abc', task
    set b to list a,b,c; |iterate | into '' sum+it
    return b.next().value

  @Match 'total 3 iterable inline none', 'abc', task
    set b to list a,b,c; |iterate | total it
    return b.next().value

  @Match 'total 3 iterable inline expr', 'a.b.c.', task
    set b to list a,b,c; |iterate | total it+'.'
    return b.next().value

  @Match 'into 3 iterable inline ', 'abc', task
    set b to list a,b,c; |iterate | into '' sum+it
    return b.next().value
    
  @Match 'into nested', 4, task
    set a to:
      :1, 2
      :3, 4
    set a to self |thru . |thru . * 2
    return a.0.1
    
  @Match 'row count on|iterated audit', 3, task
    set a to: 1, 2, 3;|iterate
    set b to 0
    chain a
      |audit
        set b + key
    return b 
    
  @Test 'audit value', task
    set b to 1 | audit it+1
    return b=1
    
  @Test 'audit list', task
    set b to: 1, 2, 3; | audit it+1
    return b[0]=1 and b[1]=2 and b[2]=3 and b.length=3
    
  @Test 'audit inline traits', task
    set d to 0
    set c to task
      set d + $
    set b to: a 1, b 2, c 3; | audit from c it
    return b.a=1 and b.b=2 and b.c=3 and d=6
   
  @Test 'audit block traits', task
    set d to 0
    set b to: a 1, b 2, c 3; | audit 
      set d + it
    return b.a=1 and b.b=2 and b.c=3 and d=6
   
  @Test 'audit using traits', task
    set d to 0
    set c to task
      set d + $
    set b to: a 1, b 2, c 3; | audit using c
    return b.a=1 and b.b=2 and b.c=3 and d=6
   
  @Match 'audit iterator', 3, task
     set b to: 1,3,5; |iterate | audit it+2
     b.next
     return b.next().value
     
  @Match 'observe list', 2, task
    set a to false
    set Setter to task
      set a to $
    set b to: 1,2; | observe from Setter it.length
    unless b.length=2 and b.0=1 and b.1=2
      return false
    return a
    
  @Test 'observe block', task
    set b to 0
    set a to 1 | observe
      set b to it+1
    return b=2 and a=1
  
  @Test 'observe inline', task
    set a to 0
    set b to task
       set a to $+1
    set c to 1 | observe from b it
    return c=1 and a=2
  
  @Test 'observe using', task
    set a to 0
    set b to task
       set a to $+1
    set c to 1 | observe using b
    return c=1 and a=2
  
  @Match 'set value block', 1, task
    return 2 | set
      return 1
  
  @Match 'set value inline', 1, task
    return 2 | set 1
  
  @Test 'set block', task
    set b to: 2; | set
       it.unshift 1
    if b.length=2 and b.0=1 and b.1=2
      return true
    return false
    
  @Test 'set inline 1', task
    set Unshifter to task given l,v
      l.unshift v
      return l
    set b to: 2; | set from Unshifter it, 1
    if b.length=2 and b.0=1 and b.1=2
      return true
    return false
    
  @Test 'set inline 2', task
    set b to: 2, 1; | set from it.reverse
    if b.length=2 and b.0=1 and b.1=2
      return true
    return false
    
  @Test 'set using', task
    set rev to task
      return from $.reverse
    set b to: 2, 1; | set using rev
    if b.length=2 and b.0=1 and b.1=2
      return true
    return false
    
