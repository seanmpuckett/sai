/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { startFile: 0, startExpression: 1 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(r, o) {
              var code='';
              if (r) code+=r;
              code+=o.join('\n')
              MagicCheck(code);
              return code;
            },
          function(code) {
             MagicCheck(code); 
             return code;
           },
          function(v) {
            if (v[0]!='fields') error("REFERENCE requires a trait list.");
            var code='';
            for (var i in v[2]) {
              var r=v[2][i];
              References[lp+r[0]]=true; 
              code+='var '+lp+r[0]+'='+r[1]+';\n'; 
            }
            return code;
          },
          function(k, main, v, s) {
              if (!v) v=quoted('0.0.0-unspecified');
              var code='',isof='';
              var isa=quoted(k);
              addToList('lock','isa')
              addToList('freeze','isof')
              code+='var isa=prototype.isa='+isa+';\n';
              isof+='version:'+v+',';
              isof+='isa:isa,';
              isof+='context:__context,';
              if (main) {
                isof+='main:true,';
              }
              code+='prototype.isof['+isa+']={'+isof+'};\n';
              var l;
              if (l=getList('lock')) code+='prototype.__tobelocked=prototype.__tobelocked.concat('+l+');\n';
              if (l=getList('freeze')) code+='prototype.__tobefrozen=prototype.__tobefrozen.concat('+l+');\n';
              code+=s.join('\n');
              clearLists();
              return code;
            },
          function(v) { return v },
          function(v) {
             var inherit='['+v.join(',')+']';
             var code='prototype.isof[prototype.isa].inherit=prototype.__inherits='+inherit+';\n';
             return code;
            },
          function(v) {
             return 'prototype.__contracts=prototype.__contracts.concat(['+v.join(',')+']);\n';
            },
          function(v, p1, p2) {
             var prop={get: undefined, set: undefined};
             prop[p1[0]]=p1[1];
             if (p2) {
               prop[p2[0]]=p2[1]; 
             }
             var ret='Object.defineProperty(prototype,"'+v+
               '",{configurable:true,enumerable:true,get:'+prop.get+
               ',set:'+prop.set+
               '});\n';
             addToList('lock',v);
             return ret;
          },
          function(g, w, b) { 
             if (!g) g='get'; 
             if (g=='get') w=null; 
             return [g,TaskFormatter({prefix:g,as:w,body:b,kind:'function'})]; 
            },
          function(v, k) {
             v.body=k;
             return TaskFormatter(v);    
            },
          function(v, x, w) { 
             return  {name:"'"+v+"'",expects:x,as:w,kind:'function'};
           },
          function(v, x, w) { 
             return  {name:v,expects:x,as:w,kind:'function*'};
           },
          function(v) { return "Symbol.iterator" },
          function(v) { return "'"+v+"'" },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function'});
          },
          ";",
          peg$literalExpectation(";", false),
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:'return '+b+';',kind:'function'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function*'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({
              expects:x
              ,as:o
              ,block:b
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(i, t) { return [i[1],t?t:true] },
          function(i) {return i},
          function(is, i) { is.push(i); return is; },
          function(t) { return [[['','_root'],t]] },
          "..",
          peg$literalExpectation("..", false),
          function(v) { return v+';' },
          function(v) { return v.join('') },
          function() { return 'break;\n'; },
          function() { return 'continue;\n' },
          function() { return 'var $=this;\n' },
          function() { return ';' },
          function(s, o, c) {return c},
          function(s, o, c, d) {return d},
          function(s, o, c, d) {
             o=o?o:tempvar();
             addLocal(o);
             var repl={trial:o};
             var r=RV('switch (^{trial}=('+s+')) {\n',repl);
             for (var i in c) {
               for (var j in c[i][0]) {
                 r+='case ('+c[i][0][j]+'): ';
               }
               r+=RV(c[i][1]+' break; \n',repl);
             }
             if (d) r+=RV('default: '+d+' break; \n',repl);
             r+='}\n';
             return r;
           },
          function(e) { return e; },
          function(e, b) { return [e,b]; },
          function(b) { return b; },
          function(p) { // test 'throw'
           return 'throw '+p+';\n' },
          function(t, c) {return c},
          function(t, c, f) {return f},
          function(t, c, f) {
             if (!(c||f)) error("TRY needs a CATCH and/or FINALLY");
             return t+(c?c:'')+(f?f:'');
           },
          function(b) { return 'try {'+b+'}\n'; },
          function(o, b) { 
             o=o?o:tempvar();
             addLocal(o);
             return RV('catch (^{error}) {'+b+'}\n',{error:o}); 
           },
          function(b) { return 'finally {'+b+'}\n' },
          function(i, l) {return l},
          function(i, l, e) {return e},
          function(i, l, e) { return i+l.join('')+(e?e:'') },
          function(c, out, b) { // test 'exists*'
             if (!out) out=tempvar();
             addLocal(out);
             return RV('if (undefined !==(^{this}=(^{condition}))) {\n'+b+'\n}\n',{this:out,condition:c}); 
           },
          function(c, out, b) { // test 'if*'
             if (!out) out=tempvar();
             addLocal(out);
             return RV('if ((^{trial}=(^{condition}))) {\n'+b+'\n}\n',{trial:out,condition:c}); 
           },
          function(c, b) { // test 'unless*'
             return 'if (!('+c+')) {\n'+b+'\n}\n' },
          function(b) { return 'else '+b+'\n' },
          function(b) { return 'else {'+b+'}\n' },
          ",",
          peg$literalExpectation(",", false),
          function(l) { return l },
          function(l, o) {
             l=l||[]; l.push(o);
             var j=[]; for (var i in l) j.push(l[i][0][1]);
             console.log(j);
             console.log(References);
             for (var i in j) if (References[j[i]]) error("Cannot re-define reference variable "+j[i].substr(1)+" as a local."); 
             return 'var '+j.join(',')+';\n';
           },
          function(value, out, block) {
                var r={this:(out?out:tempvar())};
                var code=RV('var ^{this}=',r)+value+RV(';\n'+block+'\n',r);
                return code; 
            },
          function(a, b) {
             return RV('var ^{t1}=^{v1}; var ^{t2}=^{v2}; ^{v2}=^{t1}; ^{v1}=^{t2};',{t1:tempvar(),t2:tempvar(),v1:a,v2:b});
           },
          function(t) { return t },
          function(t) { return t.join(''); },
          function(v) { return v+'++;\n'; },
          function(v) { return v+'--;\n'; },
          function(v) { return 'delete '+v+';\n'; },
          function(t, v) { return v },
          function(t, v) { return v.concat(t) },
          function(v) { return v.reduce(function(a,b){return a.concat(b)}) },
          function(l, o, e) {
             for (var i in l) if (References[l[i]]) error("Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(itselfops[o], {'1':l[i], '2':RV(e,{self:l[i]}) } )+';\n';
             }
             return code;
           },
          function(l, e) {
             for (var i in l) if (References[l[i]]) error("Cannot assign to reference variable "+l[i].substr(1)+"."); 
             if (l.length==1) return l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+=l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             for (var i in l) if (References[l[i]]) error("Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(unops[o],{'1':l[i]})+';\n';
             }
             return code;
           },
          function(l, o, e) {
             var code='';
             for (var i in l) if (References[l[i]]) error("Cannot re-define reference variable "+l[i].substr(1)+" as a local."); 
             for (var i in l) {
               code+='let '+RV(itselfops[o], {'1':l[i], '2':RV(e,{self:l[i]}) } )+';\n';
             }
             return code;
           },
          function(l, e) {
             for (var i in l) if (References[l[i]]) error("Cannot re-define reference variable "+l[i].substr(1)+" as a local."); 
             if (l.length==1) return 'let '+l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+='let '+l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             for (var i in l) if (References[l[i]]) error("Cannot re-define reference variable "+l[i].substr(1)+" as a local."); 
             var code='';
             for (var i in l) {
               code+='let '+RV(unops[o],{'1':l[i]})+';\n';
             }
             return code;
           },
          function() { return 'local '; },
          "-",
          peg$literalExpectation("-", false),
          "+",
          peg$literalExpectation("+", false),
          "**",
          peg$literalExpectation("**", false),
          "*",
          peg$literalExpectation("*", false),
          "/",
          peg$literalExpectation("/", false),
          "%",
          peg$literalExpectation("%", false),
          "<<",
          peg$literalExpectation("<<", false),
          ">>",
          peg$literalExpectation(">>", false),
          ">>>",
          peg$literalExpectation(">>>", false),
          "?>",
          peg$literalExpectation("?>", false),
          "?<",
          peg$literalExpectation("?<", false),
          function(v) { return v+";\n"; },
          function(v) { return '$AI.drain('+v+');\n'; },
          function(k) { return k },
          function(k) { 
             return 'return '+(k?k:'')+';\n' 
            },
          function(r, k) { 
             return r+'('+(k?k:'')+');\n' ;
            },
          function(k) { 
             return 'yield *'+'('+k+');\n' ;
            },
          function(k) { 
             return 'yield '+'('+k+');\n' ;
            },
          function() { return '$_resolve' },
          function() { return '$_reject' },
          function(b) { return '{'+b+'}\n' },
          function(v, o, b, n) {return n},
          function(v, o, b, n) {
             var w={block:b,t1:tempvar(),t2:tempvar(),v:v,none:n,key:(o?o[1]:false),this:(o?o[0]:false)};
             var setup='var ^{t1}=$AI.kviterate(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'if (!^{t2}.done) ';
             var iterate='for (; !^{t2}.done; ^{t2}=^{t1}.next()) { ^{this}=^{t2}.value[1]; ^{key}=^{t2}.value[0]; ^{block}; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, task, n) {return n},
          function(v, task, n) {
             var w={task:task,t1:tempvar(),t2:tempvar(),v:v,none:n,key:tempvar()};
             var setup='var ^{t1}=$AI.kviterate(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'';
             var iterate='while (!^{t2}.done) { ^{task}(^{t2}.value[1],^{t2}.value[0]); ^{t2}=^{t1}.next();}\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, o, b, n) {
             var w={block:b,t1:tempvar(),t2:tempvar(),v:v,none:n,key:(o?o[1]:false),this:(o?o[0]:false)};
             var setup='var ^{t1}=$AI.iterator(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'if (!^{t2}.done) ';
             var iterate='for (var ^{key}=0; !^{t2}.done; ^{t2}=^{t1}.next(), ^{key}++) { ^{this}=^{t2}.value; ^{block}; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, task, n) {
             var w={task:task,t1:tempvar(),t2:tempvar(),v:v,none:n,key:tempvar()};
             var setup='var ^{t1}=$AI.iterator(^{v}), ^{t2}=^{t1}.next(), ^{key}=0;\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'';
             var iterate='while (!^{t2}.done) { ^{task}(^{t2}.value,^{key}); ^{t2}=^{t1}.next(); ^{key}++; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, o, b, n) {
               var w={block:b,j:tempvar(),v:v,n:n,k:tempvar(),key:(o?o[1]:false),this:(o?o[0]:false),list:(o?o[2]:false)};
               var setup='var ^{list}=^{v};\nif (undefined===^{list}) ^{list}=[];';
               var iterate='for (var ^{key} in ^{list}) { var ^{this}=^{list}[^{key}];\n^{block}}\n'+(n?'if (undefined===^{key}) { ^{n} }\n':'');
               return RV(setup+iterate,w); 
            },
          function(list, task, n) {return n},
          function(list, task, none) {
               var w={task:task,list:list,j:tempvar(),k:tempvar(),none:none};
               var setup='var ^{j}=^{list};\nif (undefined===^{j}) ^{j}=[]; ';
               var iterate='for (var ^{k} in ^{j}) ^{task}(^{j}[^{k}],^{k},^{j});\n';
               var final=none?'if (^{k}===undefined) { ^{none} }\n':'';
               return RV(setup+iterate+final,w); 
            },
          function(v, o, b, n) {
               var w={block:b,j:tempvar(),v:v,n:n,k:tempvar(),l:tempvar(),key:(o?o[1]:false),this:(o?o[0]:false),list:(o?o[2]:false)};
               var setup='var ^{list}=^{v};\nif (undefined===^{list}) ^{list}=[]; ';
               var iterate='var ^{l}=^{list}.length; if (^{l}) { var ^{this},^{key}=0; for (;^{key}<^{l};^{key}++) { ^{this}=^{list}[^{key}];\n^{block}\n} } '+(n?'else { ^{n} }':'')+'\n';
               return RV(setup+iterate,w); 
            },
          function(list, task, none) {
               var w={task:task,list:list,l:tempvar(),j:tempvar(),k:tempvar(),none:none};
               var setup='var ^{j}=^{list};\nif (undefined===^{j}) ^{j}=[]; var ^{l}=^{j}.length;\n';
               var test=none?'if (!^{l}) ^{none} else ':'';
               var iterate='for (var ^{k}=0; ^{k}<^{l}; ^{k}++) { ^{task}(^{j}[^{k}],^{k},^{j}) };\n';
               return RV(setup+test+iterate,w); 
            },
          function(start, x) {return x},
          function(start, stop, step, out, block, n) {return n},
          function(start, stop, step, out, block, none) { // test 'count to*'
               if (!stop) stop=0;
               var w={start:start,stop:stop,out:out,block:block,none:none,dest:tempvar(),counter:(out?out[0]:false),step:(step?step:'-1')};
               var setup='var ^{counter}=^{start},^{dest}=^{stop};\n ';
               var alternate=none ? 'if (^{counter}<=^{dest}) { ^{none} } else ' : '';
               var iterate='for (^{counter}+=^{step}; ^{counter}>=^{dest}; ^{counter}+=^{step}) { ^{block} }\n';
               return RV(setup+alternate+iterate,w); 
            },
          function(x) { return x },
          function(start, stop, step, out, block, none) { // test 'count to*'
               if (!start) start=0;
               var w={start:start,stop:stop,out:out,block:block,none:none,dest:tempvar(),counter:(out?out[0]:false),step:(step?step:'1')};
               var setup='var ^{counter}=^{start},^{dest}=^{stop};\n ';
               var alternate=none ? 'if (^{counter}>=^{dest}) { ^{none} } else ' : '';
               var iterate='for (; ^{counter}<^{dest}; ^{counter}+=^{step}) { ^{block} }\n';
               return RV(setup+alternate+iterate,w); 
            },
          function(v, o, b) {
              return RV('var ^{this}; while (^{this}=( ^{v})) { ^{block} }\n',{v:v,block:b,this:(o?o[0]:false)});
            },
          function(v, b) {
              return 'while (!('+v+')) { '+b+' }\n';
            },
          function(v, b) {
              return 'do { '+b+' } while ('+v+');\n';
            },
          function(v, b) {
              return 'do { '+b+' } while (!('+v+'));\n';
            },
          function(v, a) { return [v].concat(a) },
          function(v) {
              var j=v.length;
              if (!j) error("Expected something to assign into");
              if (j==1) {
                var pattern=accessors.firststore[v[0][0]];
                if (!pattern) error("Couldn't construct recipient from "+v);
                return pattern[0] + v[0][1] + pattern[1];
              }
              j--;
              var code='';
              var patternbase=accessors.firstfetch;
              var i=0; while (i<j) {
                var pattern=patternbase[v[i][0]]; patternbase=accessors.nextfetch;
                if (!pattern) error("Couldn't construct recipient from "+v);
                code+=pattern[0] + v[i][1] + pattern[1];
                i++;
              }
              var pattern=accessors.laststore[v[j][0]];
              if (!pattern) error("Couldn't construct recipient from "+v);
              code= code+pattern[0]+v[j][1]+pattern[1];
              return code;
            },
          function(v) { return ValueCompositor(v,false) },
          function(v) { return ValueCompositor(v,true) },
          function(v) {
              var verb='',stem='';
              if (v[0][0]=='local') {
                var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
                var binding=options.globals[test];
                if (binding) {
                  v[0][0]='bound';
                  v[0][1]=binding;
                }
              }
              var patternbase=accessors.firstfetch;
              var i=0; while (i<v.length) {
                var pattern=patternbase[v[i][0]]; 
                patternbase=accessors.nextfetch;
                if (!pattern) error("VV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
                stem+=verb;
                verb=pattern[0] + v[i][1] + pattern[1];
          //      console.log("VV"+i+": stem:"+stem+" verb:"+verb);
                i++;
              }
              return [stem,verb];
            },
          function() { return [['super','']]; },
          function(x, y) { 
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
            },
          function(x, y) {
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
           },
          function() { return [['it','']] },
          function() { return [['key','']]},
          function() { return [['counter','']]},
          function() { return [['trial','']]},
          function() { return [['sum','']]},
          function() { return [['self','']]},
          function() { return [['error','']]},
          function(v) { return [[ 'attribute', v ]] },
          function(p) { 
             return [[ 'function', p?p[1]:'' ]] 
          },
          function(v) { return [[ 'it', ''],[ 'attribute', v ]] },
          function(v) { return [[ 'it', ''],[ 'index', v ]] },
          function() { return [[ 'it', '']] },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(v) { return [[ 'index', v ]] },
          ".",
          peg$literalExpectation(".", false),
          function(v) { return [[ 'paren', v ]] },
          function(v) { 
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          "$$",
          peg$literalExpectation("$$", false),
          function() { return [['arguments','']]},
          "$",
          peg$literalExpectation("$", false),
          function(v) { return [[ 'parameters','' ],['attribute',v]] },
          function() { return [[ 'parameters','' ]]},
          function(v) { return [['literal',v]]},
          "~",
          peg$literalExpectation("~", false),
          function(v) { return [['global',v]] },
          "@",
          peg$literalExpectation("@", false),
          function(v) { return [['this',''],[ 'attribute',v ]] },
          "@@",
          peg$literalExpectation("@@", false),
          function(v) { return [['currentthis',''],[ 'attribute',v ]] },
          function() { return [['currentthis','']] },
          function() { return [['this','']] },
          function(v) { return [['literal',v]] },
          function(k, v) { 
               addToList('freeze',k);
               return 'prototype["'+k+'"]='+v[1]+';\n';
             },
          function(v) { 
          //    addToList('lock',i);
              var code='';
              code+='var t='+v[1]+';\nfor (var i in t) { prototype.__tobelocked.push(i); prototype[i]=t[i]; };\n'; 
              return code;
            },
          function(v) {
              var ivar=GlobVar(); 
              var proof='var '+ivar+'=function(){ return '+v[1]+'; }\nfor (var i in '+ivar+'()) { prototype[i]="uninitialized instance attribute"; };\n'; 
              //prototype.__ivars=function(){ return '+v[1]+';}\n;\nfor (var i in prototype.__ivars()) { prototype[i]="uninitialized instance attribute"; };\n'; 
              var sup=GlobVar();
              var setup= 'var '+sup+'=prototype.Constructor || function(){};\nprototype.Constructor=function() {\n'+sup+'.call(this);\n  var t='+ivar+'();\n  for (var i in t) this[i]=t[i];\n};\n'; 
              return proof+setup;
            },
          function(maj, min, patch) {
             return "'"+maj+"."+min+"."+patch+"'";
           },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields', '{'+w.join(',')+'}',v] },
          function(v) { return ['array',v.join(','),v] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields','{'+w.join(',')+'}',v] },
          function() { return null },
          function(v) { return ['literal',v] },
          function() { return ['literal','[]']; },
          function() { return ['literal','{}']; },
          function(v) { return ['literal','['+v.join(',')+']'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { return v[1] },
          /^[^\n},);|]/,
          peg$classExpectation(["\n", "}", ",", ")", ";", "|"], true, false),
          "|",
          peg$literalExpectation("|", false),
          ")",
          peg$literalExpectation(")", false),
          function(v) { return quoted(v.join('').trim()) },
          function(v, t) { return v.concat(t) },
          function(k) { return [[k,true]] },
          function(k, v) { return [[k,v]] },
          function(v, t) { 
             var r=[]; 
             for (var i in v) r=r.concat(v[i]); 
             r=r.concat(t);  
             return r; 
          },
          function(v, t) { var r=[]; for (var i in v) r=r.concat(v[i]); r=r.concat(t); return r; },
          function(v) { return v[0][1] },
          function(o) {
             var v=[];
             for (var i in o) v.push(o[i][0][1]);
             return v;
           },
          function(k) {return k},
          function(k, v) { k.push(v); return k; },
          function(v, c) {return c},
          function(v, c) {
             for (var i in c) {
               v=c[i][0]+v+c[i][1];
             }
             return v;
           },
          function() { // test 'sow *'
               return ['$AI.iterate(',')'];
             },
          function() { // test 'keys comp*'
               return ['$AI.keys(',')'];
             },
          function() { // test 'values comp*'
               return ['$AI.values(',')'];
             },
          function(x) {
             return ['$AI.concat(' , ','+x+')' ];
           },
          function() { return ['$AI.collect(',')']; },
          function() { return ['$AI.enlist(',')']; },
          function() { return ['$AI.entrait(',')']; },
          function(o, b) {
              if (!o) o=[lp+'a',lp+'b'];
              var block=RV('function('+o[0]+','+o[1]+'){'+b+'}');
              return ['$AI.sort(' , ','+block+')']; 
            },
          function(x) {
             return ['$AI.sort(' , ','+x+')' ];
            },
          function(x) { // test 'thru inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'}',{this:'$_v',key:'$_k'});
               return ['$AI.map(' , ','+block+' )']; 
            },
          function(o, b) { // test 'thru block'
               var block=RV('function(^{this},^{key}){'+b+'; return ^{this};}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.map(' , ','+block+' )']; 
            },
          function(x) { // test 'thru using'
             return ['$AI.map(' , ','+x+')' ];
            },
          function(x) { // test 'audit inline *'
               var block=RV('function(^{this},^{key}){ '+x+'; }',{this:'$_v',key:'$_k'});
               return ['$AI.audit(' , ','+block+' )']; 
            },
          function(o, b) { // test 'audit block*'
               var block=RV('function(^{this},^{key}){'+b+' }',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.audit(' , ','+block+' )']; 
            },
          function(x) { // test 'audit using*'
             return ['$AI.audit(' , ','+x+')' ];
            },
          function(into, o, b) {
              if (!o) o=[];
              if (!o[0]) o[0]=lp+'sum'; 
              if (!o[1]) o[1]='$_v';
              if (!o[2]) o[2]='$_k';
              b+='return ^{sum};\n';
              var block=RV('function(^{sum},^{this},^{key}){'+b+'}',{sum:o[0],this:o[1],key:o[2]});
              if (into=='it') {
                return ['$AI.reduce(' , ','+block+')' ];
              } else {
                return ['$AI.reduce(' , ','+block+','+into+')' ];
              }
            },
          function(into, b) {
              var block=RV('function(^{sum},^{this},^{key}){ return '+b+';}',{sum:lp+'sum',this:'$_v',key:'$_k'});
              if (into=='it') {
                return ['$AI.reduce(' , ','+block+')' ];
              } else {
                return ['$AI.reduce(' , ','+block+','+into+')' ];
              }
            },
          function(into, x) {
              if (into=='it') {
                return ['$AI.reduce(' , ','+x+')' ];
              } else {
                return ['$AI.reduce(' , ','+x+','+into+')' ];
              }
            },
          function(x) { // test 'filter inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'; }',{this:'$_v',key:'$_k'});
               //console.log("filter comp exp");
               return ['$AI.filter(' , ','+block+' )']; 
            },
          function(o, b) {
               var block=RV('function(^{this},^{key}){'+b+'}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.filter(' , ','+block+')']; 
            },
          function(x) {
              return ['$AI.filter(' , ','+x+')' ];
            },
          function(x) { // test 'alter inline*'
               var block=RV('function(^{this}){ return '+x+'; }',{this:'$_v'});
               return [ '$AI.alter(' , ','+block+')']; 
            },
          function(o, b) { // test 'alter block*'
               var block=RV('function(^{this}){'+b+'; return ^{this}; }',{this:o?o[0]:'$_v'});
               return [ '$AI.alter(' , ','+block+')']; 
            },
          function(x) { // test 'alter using'
               return [ '$AI.alter(' , ','+x+')']; 
            },
          function(x) { // test 'observe inline'
               var block=RV('function(^{this}){ '+x+'; }',{this:'$_v'});
               return [ '$AI.observe(' , ','+block+')']; 
            },
          function(o, b) { // test 'observe block'
               var block=RV('function(^{this}){'+b+'; }',{this:o?o[0]:'$_v'});
               return [ '$AI.observe(' , ','+block+')']; 
            },
          function(x) { // test 'observe using'
               return [ '$AI.observe(' , ','+x+')']; 
            },
          function(q) {
             var code='({<>})';
             q=[].concat(q);
             var expr={quality:[],having:[],by:[],map:[],limit:[]};
             for (var i in q) { 
               for (var j=0; j<q[i].length; j+=2) {
                 expr[q[i][j]].push(q[i][j+1]); 
               }
             }
             var conds=[];
             if (expr.quality.length) {
               for (var i in expr.quality) { 
                 conds.push(expr.quality[i]); 
                }
             }
             if (expr.having.length) {
               var conds=conds.concat(expr.having.map(function(c){ return '('+c+')';}));
             }
             if (conds.length) {
               code=RV('$AI.filter(^{source},function($_v,$_k){ return ^{block}; })',{source:code,block:conds.join(' && '),this:'$_v',key:'$_k'});
             }
             if (expr.limit.length && expr.limit[0].extract && expr.by.length) { // first/last singleton with a sort
               code='$AI.reduce('+code+',function(a,b) { if (undefined===a) return b; var r; ';
               expr.by[0][1]*=expr.limit[0].sort; // flip sort if looking for "last"
               var conds=expr.by.map(function(c){
                 c[0]=c[0]||'^{this}';
                 var x1=RV(c[0],{this:'a'});
                 var x2=RV(c[0],{this:'b'});
                 return RV('r=$AI.compare(^{x1},^{x2}); if (r<0) return ^{lt}; if (r>0) return ^{gt};\n',{x1:x1,x2:x2,lt:(c[1]>0?'a':'b'),gt:(c[1]>0?'b':'a')});
               });
               code+=conds.join(' ')+'return a; },undefined)';     
             } else {
               if (expr.by.length) {
                 code='$AI.sort('+code+',function(a,b) { var aa,bb; ';
                 var conds=expr.by.map(function(c){
                   c[0]=c[0]||'^{this}';
                   var x1=RV('aa='+c[0]+'; ',{this:'a'});
                   var x2=RV('bb='+c[0]+'; ',{this:'b'});
                   return x1+x2+RV('if (aa<bb) return ^{lt}; if (aa>bb) return ^{gt}; ',{c:c[0],lt:-c[1],gt:c[1]});
                 });
                 code+=conds.join(' ')+'return 0; })';
               }
               if (expr.limit.length) {
                 var l=expr.limit[0];
                 if (l.slice) {
                   code='$AI.slice('+code+','+l.start+','+l.len+')';
                 }
                 if (l.extract) { 
                   code='$AI.element('+code+',0)';
                 }
                 if (l.count) {
                   code='$AI.count('+code+')';
                 }
               }
             } 
             return code.split('{<>}');
           },
          function() { return ['limit',{extract:true,sort:1}]; },
          function() { return ['limit',{extract:true,slice:true,start:-1}]; },
          function(s, c) { return ['limit',{slice:true,start:s,len:c}]; },
          function(s) { return ['limit',{slice:true,start:undefined,len:s}]; },
          function() { return ['limit',{count:true}]; },
          function(v) { return ['quality', '^{this}["'+v+'"]'] },
          function(v) { return ['quality', '(!^{this}["'+v+'"])'] },
          function(v) { return ['having',v] },
          function(d) { return ['by',[null,d?d:1]] },
          function(v, d) { return ['by',[v,d?d:1]] },
          function(v) { return ['by',[v,-1],'limit',{extract:true,sort:1}]},
          function(v) { return ['by',[v,1],'limit',{extract:true,sort:1}]},
          function() { return 1 },
          function() { return -1 },
          function(l, o, r) { return '('+l+o+r+')' },
          function(c, l) { return '($AI.xor('+c+','+l+'))' },
          function(l, f) { return '(!('+l+' && '+f+'))' },
          function(l, f) { return '(!('+l+' || '+f+'))' },
          "??",
          peg$literalExpectation("??", false),
          "::",
          peg$literalExpectation("::", false),
          function(c, l, r) { 
               return RV('((^{c})?(^{l}):(^{r}))',{c:c,l:l,r:r}); 
             },
          function(c, v) {  // test 'default*'
               SafetyFetch=true; 
               return RV('((undefined!==($_b=^{c}))?$_b:^{v})',{c:c,v:v}); 
             },
          function() { return '&&' },
          function() { return '||' },
          function(l, o, r) { return o+'('+l+','+r+')' },
          ">=",
          peg$literalExpectation(">=", false),
          function() { return '>=' },
          ">",
          peg$literalExpectation(">", false),
          function() { return '>' },
          "=",
          peg$literalExpectation("=", false),
          function() { return '==' },
          function() { return '!==' },
          function() { return '===' },
          "<=",
          peg$literalExpectation("<=", false),
          function() { return '<=' },
          "<",
          peg$literalExpectation("<", false),
          function() { return '<' },
          "!=",
          peg$literalExpectation("!=", false),
          function() { return '!=' },
          function() { return '$AI.max' },
          function() { return '$AI.min' },
          "<=>",
          peg$literalExpectation("<=>", false),
          function() { return '$AI.compare' },
          function() {return '|' },
          function() {return '&'},
          function() { return '^'},
          function(l, r) { // test '**'
             return 'Math.pow('+l+','+r+')' 
           },
          function(l, op, x) {
             var p=undefined;
             if (x) {
               p=x[1];
             }
             return '('+op+').call(this,('+l+'),'+p+')';
           },
          function(l, r) { // test 'overlay *'
             return '$AI.overlay('+l+','+r+')' 
           },
          function(l, r) { // test 'select *'
             return '$AI.select('+l+','+r+')' 
           },
          function(l, r) { // test 'delete *'
             return '$AI.delete($AI.clone('+l+'),'+r+')' 
           },
          function(l, r) { 
             return '$AI.expects('+l+','+r+')' 
           },
          function(l, r) { 
             return '('+l+').isof['+r+']'; 
           },
          function(v) { return '(0-('+v+'))' },
          function(v) { return '(~('+v+'))' },
          function(v) { return '(!('+v+'))' },
          function(v) { return 'typeof ('+v+')'; },
          function(v) { return 'isNaN('+v+')'; },
          function(v) { return '($AI.number('+v+'))'; },
          function(v) { return '(undefined!=='+v+')' },
          function(v) { return '$AI.clone('+v+')'; },
          function(v) { return 'yield *'+v; },
          function(v) { return 'yield'+v; },
          "?",
          peg$literalExpectation("?", false),
          function(o) { return o },
          "(",
          peg$literalExpectation("(", false),
          function(v, o) { 
             if (o) {
               addLocal(o);
               return RV('(^{out}='+v+')',{out:o}); 
             } else {
               return '('+v+')'; 
             }
            },
          /^[igm]/,
          peg$classExpectation(["i", "g", "m"], false, false),
          function(x, m) {
             var re= '/'+x.join('')+'/'+m.join('');
             return re;
           },
          "\\/",
          peg$literalExpectation("\\/", false),
          /^[^\n\r\/]/,
          peg$classExpectation(["\n", "\r", "/"], true, false),
          /^[.([|]/,
          peg$classExpectation([".", "(", "[", "|"], false, false),
          function(v) { return v; },
          /^[a-zA-Z_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
          /^[a-zA-Z_0-9]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false),
          function(v1, v2) { return v1+v2.join('') },
          /^[a-zA-Z]/,
          peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
          function() { return 'NaN' },
          function() { return 'Infinity' },
          function() { return 'it' },
          function(v) {
             return AssembleVerb(v);
           },
          function(v, o) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$'+(o?(','+o[1]):'') }]; 
               return [{ base:v[0], verb:v[1], param:(o?o[1]:'') }]
            },
          function(v) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$' }]; 
               return [{ base:v[0], verb:v[1], param:'' }]
             },
          function(v, c) {
             c[0].base=v;
             return AssembleVerb(c);
           },
          function(l) { 
               return l ;
             },
          function(c) {
               return {left:c[0], right: c[1]}
            },
          function(i, o) {
               return {verb:'.'+i, param:(o?o[1]:''), test:true}; 
            },
          function(v, o) { 
             return '$AI.create('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) { 
             return '$AI.singleton('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) {
             return 'new '+v+'('+(o?o[1]:'')+')'; 
           },
          /^[a-zA-Z0-9_\/]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "/"], false, false),
          function(n) { return n.join('') },
          "o",
          peg$literalExpectation("o", false),
          function(v) { return v*(Math.PI/180) },
          "0b",
          peg$literalExpectation("0b", false),
          /^[0-1]/,
          peg$classExpectation([["0", "1"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*2+Number(v[i++]));
             return r.toString();
           },
          "0o",
          peg$literalExpectation("0o", false),
          /^[0-7]/,
          peg$classExpectation([["0", "7"]], false, false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*8+Number(v[i++]));
             return r.toString();
           },
          "0x",
          peg$literalExpectation("0x", false),
          function(v) {
             var r=0;
             for (var i=0; i<v.length; r=r*16+v[i++]);
             return r;
           },
          "0",
          peg$literalExpectation("0", false),
          function() { return 0; },
          "1",
          peg$literalExpectation("1", false),
          function() { return 1; },
          "2",
          peg$literalExpectation("2", false),
          function() { return 2; },
          "3",
          peg$literalExpectation("3", false),
          function() { return 3; },
          "4",
          peg$literalExpectation("4", false),
          function() { return 4; },
          "5",
          peg$literalExpectation("5", false),
          function() { return 5; },
          "6",
          peg$literalExpectation("6", false),
          function() { return 6; },
          "7",
          peg$literalExpectation("7", false),
          function() { return 7; },
          "8",
          peg$literalExpectation("8", false),
          function() { return 8; },
          "9",
          peg$literalExpectation("9", false),
          function() { return 9; },
          "a",
          peg$literalExpectation("a", false),
          "A",
          peg$literalExpectation("A", false),
          function() { return 10; },
          "b",
          peg$literalExpectation("b", false),
          "B",
          peg$literalExpectation("B", false),
          function() { return 11; },
          "c",
          peg$literalExpectation("c", false),
          "C",
          peg$literalExpectation("C", false),
          function() { return 12; },
          "d",
          peg$literalExpectation("d", false),
          "D",
          peg$literalExpectation("D", false),
          function() { return 13; },
          "e",
          peg$literalExpectation("e", false),
          "E",
          peg$literalExpectation("E", false),
          function() { return 14; },
          "f",
          peg$literalExpectation("f", false),
          "F",
          peg$literalExpectation("F", false),
          function() { return 15; },
          function(r, x) { return r+'e'+x },
          function(w, f) { return Number(w+'.'+f) },
          function(v) { return -v },
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          function(v) { return parseInt(v.join('')) },
          "'",
          peg$literalExpectation("'", false),
          function(v) { return assembleLiteral(v) },
          "\"",
          peg$literalExpectation("\"", false),
          "`",
          peg$literalExpectation("`", false),
          /^[^'\n]/,
          peg$classExpectation(["'", "\n"], true, false),
          function(v) { return [true,v] },
          /^[^"\n]/,
          peg$classExpectation(["\"", "\n"], true, false),
          "'''",
          peg$literalExpectation("'''", false),
          function(v) { return v},
          function(v) { return v.join("+'\\n'+") },
          /^[^\n}]/,
          peg$classExpectation(["\n", "}"], true, false),
          "\\",
          peg$literalExpectation("\\", false),
          function() { return [true,'\\'+"'"] },
          function() { return [true,'\\'+'"'] },
          function() { return [true,'\\'+'$'] },
          "\\&#123;",
          peg$literalExpectation("\\&#123;", false),
          function() { return [true,'\\'+'&#123;'] },
          "\\&#125;",
          peg$literalExpectation("\\&#125;", false),
          function() { return [true,'\\'+'&#125;'] },
          "n",
          peg$literalExpectation("n", false),
          function() { return [true,'\\'+'n'] },
          "r",
          peg$literalExpectation("r", false),
          function() { return [true,'\\'+'r'] },
          "t",
          peg$literalExpectation("t", false),
          function() { return [true,'\\'+'t'] },
          function() { return [true,'\\'+'b'] },
          function() { return [true,'\\'+'f'] },
          "x",
          peg$literalExpectation("x", false),
          /^[0-9a-fA-F]/,
          peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
          function(a, b) { return [true,'\\'+'x'+a+b ] },
          "u",
          peg$literalExpectation("u", false),
          function(a, b, c, d) { return [true,'\\'+'u'+a+b+c+d] },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function(a) { return [true,'\\'+'u{'+a.join('')+'}' ] },
          "${",
          peg$literalExpectation("${", false),
          function(v) { return [false,v] },
          /^[^a-zA-Z0-9_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], true, false),
          "...",
          peg$literalExpectation("...", false),
          /^[ ]/,
          peg$classExpectation([" "], false, false),
          "//",
          peg$literalExpectation("//", false),
          /^[^\r\n]/,
          peg$classExpectation(["\r", "\n"], true, false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "__source",
          peg$literalExpectation("__source", false),
          "__offset",
          peg$literalExpectation("__offset", false),
          "__column",
          peg$literalExpectation("__column", false),
          "__line",
          peg$literalExpectation("__line", false),
          "and",
          peg$literalExpectation("and", false),
          "andb",
          peg$literalExpectation("andb", false),
          "array",
          peg$literalExpectation("array", false),
          "as",
          peg$literalExpectation("as", false),
          "asc",
          peg$literalExpectation("asc", false),
          "ascending",
          peg$literalExpectation("ascending", false),
          "audit",
          peg$literalExpectation("audit", false),
          "blank",
          peg$literalExpectation("blank", false),
          "break",
          peg$literalExpectation("break", false),
          "by",
          peg$literalExpectation("by", false),
          "case",
          peg$literalExpectation("case", false),
          "catch",
          peg$literalExpectation("catch", false),
          "chain",
          peg$literalExpectation("chain", false),
          "collect",
          peg$literalExpectation("collect", false),
          "copy",
          peg$literalExpectation("copy", false),
          "concat",
          peg$literalExpectation("concat", false),
          "continue",
          peg$literalExpectation("continue", false),
          "contract",
          peg$literalExpectation("contract", false),
          "count",
          peg$literalExpectation("count", false),
          "counter",
          peg$literalExpectation("counter", false),
          "create",
          peg$literalExpectation("create", false),
          "dec",
          peg$literalExpectation("dec", false),
          "default",
          peg$literalExpectation("default", false),
          "delete",
          peg$literalExpectation("delete", false),
          "desc",
          peg$literalExpectation("desc", false),
          "descending",
          peg$literalExpectation("descending", false),
          "do",
          peg$literalExpectation("do", false),
          "down",
          peg$literalExpectation("down", false),
          "each",
          peg$literalExpectation("each", false),
          "else",
          peg$literalExpectation("else", false),
          "empty",
          peg$literalExpectation("empty", false),
          "enum",
          peg$literalExpectation("enum", false),
          "enlist",
          peg$literalExpectation("enlist", false),
          "entrait",
          peg$literalExpectation("entrait", false),
          "error",
          peg$literalExpectation("error", false),
          "every",
          peg$literalExpectation("every", false),
          "exists",
          peg$literalExpectation("exists", false),
          "expects",
          peg$literalExpectation("expects", false),
          "finally",
          peg$literalExpectation("finally", false),
          "fields",
          peg$literalExpectation("fields", false),
          "first",
          peg$literalExpectation("first", false),
          "from",
          peg$literalExpectation("from", false),
          "get",
          peg$literalExpectation("get", false),
          "given",
          peg$literalExpectation("given", false),
          "has",
          peg$literalExpectation("has", false),
          "highest",
          peg$literalExpectation("highest", false),
          "if",
          peg$literalExpectation("if", false),
          "Infinity",
          peg$literalExpectation("Infinity", false),
          "instance",
          peg$literalExpectation("instance", false),
          "into",
          peg$literalExpectation("into", false),
          "inc",
          peg$literalExpectation("inc", false),
          "inherit",
          peg$literalExpectation("inherit", false),
          "isnt",
          peg$literalExpectation("isnt", false),
          "isNaN",
          peg$literalExpectation("isNaN", false),
          "is",
          peg$literalExpectation("is", false),
          "isof",
          peg$literalExpectation("isof", false),
          "iterate",
          peg$literalExpectation("iterate", false),
          "Iterator",
          peg$literalExpectation("Iterator", false),
          "it",
          peg$literalExpectation("it", false),
          "keys",
          peg$literalExpectation("keys", false),
          "key",
          peg$literalExpectation("key", false),
          "last",
          peg$literalExpectation("last", false),
          "limit",
          peg$literalExpectation("limit", false),
          "list",
          peg$literalExpectation("list", false),
          "local",
          peg$literalExpectation("local", false),
          "lowest",
          peg$literalExpectation("lowest", false),
          "main",
          peg$literalExpectation("main", false),
          "NaN",
          peg$literalExpectation("NaN", false),
          "nand",
          peg$literalExpectation("nand", false),
          "new",
          peg$literalExpectation("new", false),
          "nop",
          peg$literalExpectation("nop", false),
          "nor",
          peg$literalExpectation("nor", false),
          "not",
          peg$literalExpectation("not", false),
          "notb",
          peg$literalExpectation("notb", false),
          "number",
          peg$literalExpectation("number", false),
          "null",
          peg$literalExpectation("null", false),
          "object",
          peg$literalExpectation("object", false),
          "observe",
          peg$literalExpectation("observe", false),
          "orphan",
          peg$literalExpectation("orphan", false),
          "or",
          peg$literalExpectation("or", false),
          "orb",
          peg$literalExpectation("orb", false),
          "overlay",
          peg$literalExpectation("overlay", false),
          "true",
          peg$literalExpectation("true", false),
          "false",
          peg$literalExpectation("false", false),
          "ply",
          peg$literalExpectation("ply", false),
          "promise",
          peg$literalExpectation("promise", false),
          "process",
          peg$literalExpectation("process", false),
          "resolve",
          peg$literalExpectation("resolve", false),
          "reject",
          peg$literalExpectation("reject", false),
          "reference",
          peg$literalExpectation("reference", false),
          "return",
          peg$literalExpectation("return", false),
          "select",
          peg$literalExpectation("select", false),
          "self",
          peg$literalExpectation("self", false),
          "set",
          peg$literalExpectation("set", false),
          "singleton",
          peg$literalExpectation("singleton", false),
          "step",
          peg$literalExpectation("step", false),
          "sum",
          peg$literalExpectation("sum", false),
          "swap",
          peg$literalExpectation("swap", false),
          "super",
          peg$literalExpectation("super", false),
          "switch",
          peg$literalExpectation("switch", false),
          "task",
          peg$literalExpectation("task", false),
          "throw",
          peg$literalExpectation("throw", false),
          "thru",
          peg$literalExpectation("thru", false),
          "traits",
          peg$literalExpectation("traits", false),
          "trial",
          peg$literalExpectation("trial", false),
          "try",
          peg$literalExpectation("try", false),
          "to",
          peg$literalExpectation("to", false),
          "typeof",
          peg$literalExpectation("typeof", false),
          "unless",
          peg$literalExpectation("unless", false),
          "until",
          peg$literalExpectation("until", false),
          "undefined",
          peg$literalExpectation("undefined", false),
          "update",
          peg$literalExpectation("update", false),
          "using",
          peg$literalExpectation("using", false),
          "values",
          peg$literalExpectation("values", false),
          "via",
          peg$literalExpectation("via", false),
          "while",
          peg$literalExpectation("while", false),
          "with",
          peg$literalExpectation("with", false),
          "xor",
          peg$literalExpectation("xor", false),
          "xorb",
          peg$literalExpectation("xorb", false),
          "yielding",
          peg$literalExpectation("yielding", false),
          "yield",
          peg$literalExpectation("yield", false),
          "!",
          peg$literalExpectation("!", false),
          "#",
          peg$literalExpectation("#", false),
          ":",
          peg$literalExpectation(":", false),
          function() { return ':' }
        ],

        peg$bytecode = [
          peg$decode("%;\xE3/M#;\".\" &\"/?$$;#/&#0#*;#&&&#/)$8#: #\"! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/1#;\xE4/($8\":!\"!!)(\"'#&'#"),
          peg$decode("%;\u0148/C#;\xE1/:$;x/1$;\xE4/($8$:\"$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u013B/\x93#;\xE1/\x8A$;\xBD/\x81$;\xE1/x$;\u0131.\" &\"/j$;\xE1/a$;w.\" &\"/S$;\xE1/J$;\xE4/A$$;$/&#0#*;$&&&#/+$8*:#*$'%# )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;%.5 &;&./ &;'.) &;).# &;v/' 8!:$!! ).# &;\xE4"),
          peg$decode("%;\u0122/C#;\xE1/:$;{/1$;\xE4/($8$:%$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0100/C#;\xE1/:$;{/1$;\xE4/($8$:&$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xBD/A#;(/8$;(.\" &\"/*$8#:'##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\xE1/k#;\u0119.# &;\u014C/\\$;\xE1/S$;\x92.\" &\"/E$;\xE1/<$;1/3$;\xE4/*$8':('#%#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;*/;#;1/2$;\xE4/)$8#:)#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;\xBD/\x8A#;\xE1/\x81$;\u0159.\" &\"/s$;\xE1/j$;\u0153/a$;\xE1/X$;0.\" &\"/J$;\xE1/A$;\x92.\" &\"/3$;\xE1/*$8*:**#)#!)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x94 &%;+/\x8A#;\xE1/\x81$;\u0159.\" &\"/s$;\xE1/j$;\u0145/a$;\xE1/X$;0.\" &\"/J$;\xE1/A$;\x92.\" &\"/3$;\xE1/*$8*:+*#)#!)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0128/' 8!:,!! )./ &%;\xBD/' 8!:-!! )"),
          peg$decode("%;0.\" &\"/S#;\xE1/J$;\x92.\" &\"/<$;\xE1/3$;1/*$8%:.%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;0.\" &\"/p#;\xE1/g$;\x92.\" &\"/Y$;\xE1/P$2/\"\"6/70.\" &\"/<$;\xE1/3$;\x93/*$8':1'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;0.\" &\"/S#;\xE1/J$;\x92.\" &\"/<$;\xE1/3$;1/*$8%:2%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;0.\" &\"/p#;\xE1/g$;\x92.\" &\"/Y$;\xE1/P$2/\"\"6/70.\" &\"/<$;\xE1/3$;\x93/*$8':2'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;0.\" &\"/S#;\xE1/J$;\x92.\" &\"/<$;\xE1/3$;1/*$8%:3%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;q/I#;\xE1/@$;|.\" &\"/2$;\xE1/)$8$:4$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0114/\x8D#;\xE1/\x84$$%;//:#;\u016C/1$;\xE1/($8#:5#!\")(#'#(\"'#&'#0D*%;//:#;\u016C/1$;\xE1/($8#:5#!\")(#'#(\"'#&'#&/2$;//)$8$:6$\"! )($'#(#'#(\"'#&'#.M &%;\u0114/C#;\xE1/:$;|/1$;\xE1/($8$:7$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE1/U#;\xE4/L$;\u016E/C$;\xE4/:$;2/1$;\u016F/($8&:$&!!)(&'#(%'#($'#(#'#(\"'#&'#.h &%;\xE1/^#28\"\"6879/O$;\xE1/F$;4/=$%<;\xE4=/##&'!&&#/($8%::%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;3/&#0#*;3&&&#/' 8!:;!! )"),
          peg$decode("%;4/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode(";?.Y &;F.S &;S.M &;V.G &;D.A &;6.; &;;.5 &;:./ &;E.) &;5.# &;R"),
          peg$decode("%;\xF7/0#;\xE1/'$8\":<\" )(\"'#&'#.t &%;\xFF/0#;\xE1/'$8\":=\" )(\"'#&'#.W &%;\u013D/0#;\xE1/'$8\":>\" )(\"'#&'#.: &%;\u0135/0#;\xE1/'$8\":?\" )(\"'#&'#"),
          peg$decode("%;7/\xD0#;\x90.\" &\"/\xC2$;\xE4/\xB9$;\u016E/\xB0$$%;\xE4/3#;8/*$8\":@\"#'& )(\"'#&'#/@#0=*%;\xE4/3#;8/*$8\":@\"#'& )(\"'#&'#&&&#/f$%;\xE4/4#;9/+$8\":A\"$'&# )(\"'#&'#.\" &\"/=$;\xE4/4$;\u016F/+$8(:B($'&#\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0152/:#;\xE0/1$;\x93/($8#:C#! )(#'#(\"'#&'#"),
          peg$decode("%;\xF9/M#;\xE0/D$;\x83/;$;\xE1/2$;1/)$8%:D%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0105/:#;\xE0/1$;1/($8#:E#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0154/:#;\xE1/1$;\x93/($8#:F#! )(#'#(\"'#&'#"),
          peg$decode("%;</y#%;\xE4/2#;=/)$8\":G\"\"# )(\"'#&'#.\" &\"/R$%;\xE4/3#;>/*$8\":H\"#$# )(\"'#&'#.\" &\"/*$8#:I##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\u0158/:#;\xE1/1$;1/($8#:J#! )(#'#(\"'#&'#"),
          peg$decode("%;\xFA/R#;\xE1/I$;\x90.\" &\"/;$;\xE1/2$;1/)$8%:K%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0115/:#;\xE1/1$;1/($8#:L#! )(#'#(\"'#&'#"),
          peg$decode("%;@/\x94#$%;\xE4/2#;A/)$8\":M\"\"$ )(\"'#&'#0<*%;\xE4/2#;A/)$8\":M\"\"$ )(\"'#&'#&/R$%;\xE4/3#;B/*$8\":N\"#$# )(\"'#&'#.\" &\"/*$8#:O##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\u0113/S#;\xE1/J$;\x93/A$;\x90.\" &\"/3$;1/*$8%:P%#\"! )(%'#($'#(#'#(\"'#&'#.\x8E &%;\u011D/S#;\xE1/J$;\x93/A$;\x90.\" &\"/3$;1/*$8%:Q%#\"! )(%'#($'#(#'#(\"'#&'#.N &%;\u015B/D#;\xE1/;$;\x93/2$;1/)$8$:R$\"! )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u010C/:#;\xE1/1$;@/($8#:S#! )(#'#(\"'#&'#"),
          peg$decode("%;\u010C/:#;\xE1/1$;1/($8#:T#! )(#'#(\"'#&'#"),
          peg$decode("%;\u012F/\xB4#;\xE1/\xAB$$%;p/I#;\xE1/@$2U\"\"6U7V/1$;\xE1/($8$:W$!#)($'#(#'#(\"'#&'#0S*%;p/I#;\xE1/@$2U\"\"6U7V/1$;\xE1/($8$:W$!#)($'#(#'#(\"'#&'#&/;$;p/2$;\xE1/)$8%:X%\"\"!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0163/S#;\xE0/J$;\x93/A$;\x90.\" &\"/3$;1/*$8%:Y%#\"! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0150/M#;\xE0/D$;Z/;$;\xE0/2$;Z/)$8%:Z%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u014C/:#;\xE0/1$;G/($8#:[#! )(#'#(\"'#&'#.\u016A &%;\u014C/^#;\xE0/U$;\xE4/L$;\u016E/C$;\xE4/:$;I/1$;\u016F/($8':\\'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u011F &%;\u012F/:#;\xE0/1$;K/($8#:[#! )(#'#(\"'#&'#.\xF8 &%;\u012F/^#;\xE0/U$;\xE4/L$;\u016E/C$;\xE4/:$;M/1$;\u016F/($8':\\'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAD &%;\u0121/C#;\xE0/:$;Z/1$;\xE1/($8$:]$!!)($'#(#'#(\"'#&'#.} &%;\u0104/C#;\xE0/:$;Z/1$;\xE1/($8$:^$!!)($'#(#'#(\"'#&'#.M &%;\u0106/C#;\xE0/:$;^/1$;\xE1/($8$:_$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;J/\xA4#;\xE1/\x9B$$%2U\"\"6U7V/D#;\xE1/;$;J/2$;\xE1/)$8$:`$\"'!)($'#(#'#(\"'#&'#0T*%2U\"\"6U7V/D#;\xE1/;$;J/2$;\xE1/)$8$:`$\"'!)($'#(#'#(\"'#&'#&/)$8#:a#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;G/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;H/&#0#*;H&&&#/' 8!:b!! )"),
          peg$decode("%;[/N#;\xE1/E$;Q/<$;\xE1/3$;\x93/*$8%:c%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;X/\x88#;\xE1/\x7F$;\u0159.\" &\".S &%<;\u0118=/##&'!&&#.A &%<;\u0168=/##&'!&&#./ &%<;\xFB=/##&'!&&#/;$;\xE1/2$;\x93/)$8%:d%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;[/;#;\xE1/2$;P/)$8#:e#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;N/\xA4#;\xE1/\x9B$$%2U\"\"6U7V/D#;\xE1/;$;N/2$;\xE1/)$8$:`$\"'!)($'#(#'#(\"'#&'#0T*%2U\"\"6U7V/D#;\xE1/;$;N/2$;\xE1/)$8$:`$\"'!)($'#(#'#(\"'#&'#&/)$8#:a#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;K/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;L/&#0#*;L&&&#/' 8!:b!! )"),
          peg$decode("%;[/N#;\xE1/E$;Q/<$;\xE1/3$;\x93/*$8%:f%#$\" )(%'#($'#(#'#(\"'#&'#.\xBA &%;X/\x88#;\xE1/\x7F$;\u0159.\" &\".S &%<;\u0118=/##&'!&&#.A &%<;\u0168=/##&'!&&#./ &%<;\xFB=/##&'!&&#/;$;\xE1/2$;\x93/)$8%:g%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;[/;#;\xE1/2$;P/)$8#:h#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\u012F/0#;\xE0/'$8\":i\" )(\"'#&'#"),
          peg$decode("2j\"\"6j7k.; &;\u0121.5 &;\u0104./ &;\u0106.) &;\u0138.# &;\u0137"),
          peg$decode("2l\"\"6l7m.\xE3 &2j\"\"6j7k.\xD7 &2n\"\"6n7o.\xCB &2p\"\"6p7q.\xBF &2r\"\"6r7s.\xB3 &2t\"\"6t7u.\xA7 &2v\"\"6v7w.\x9B &2x\"\"6x7y.\x8F &2z\"\"6z7{.\x83 &;\xF0.} &;\u013F.w &;\u0165.q &;\xEF.k &;\u013E.e &;\u0164._ &;\u0133.Y &;\u0136.S &2|\"\"6|7}.G &2~\"\"6~7\x7F.; &;\u015E.5 &;\u0155./ &;\u0106.) &;\u0105.# &;\xFE"),
          peg$decode("%;\xC2/' 8!:\x80!! )./ &%;\xC4/' 8!:\x81!! )"),
          peg$decode("%;\u0149/N#%;\xE0/1#;\x93/($8\":\x82\"! )(\"'#&'#.\" &\"/($8\":\x83\"! )(\"'#&'#.\x98 &%;T/@#;\xE0/7$;\x93.\" &\"/)$8#:\x84#\"\" )(#'#(\"'#&'#.k &%;\u0166/:#;\xE0/1$;\x93/($8#:\x85#! )(#'#(\"'#&'#.D &%;\u0167/:#;\xE0/1$;\x93/($8#:\x86#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0146/& 8!:\x87! ).. &%;\u0147/& 8!:\x88! )"),
          peg$decode("%;\u010C/:#;\xE0/1$;1/($8#:\x89#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0112/}#;\xE0/t$;\x93/k$;\x91.\" &\"/]$;1/T$%;\xE4/4#;U/+$8\":\x8A\"$%$# )(\"'#&'#.\" &\"/+$8&:\x8B&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u0598 &%;\u0112/\x88#;\xE0/\x7F$;\x93/v$;\xE1/m$;\u015F/d$;\xE0/[$;\xB8/R$%;\xE4/3#;U/*$8\":\x8C\"#'# )(\"'#&'#.\" &\"/*$8(:\x8D(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0523 &%;\u0127/}#;\xE0/t$;\x93/k$;\x91.\" &\"/]$;1/T$%;\xE4/4#;U/+$8\":\x8A\"$%$# )(\"'#&'#.\" &\"/+$8&:\x8E&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u04B9 &%;\u0127/\x88#;\xE0/\x7F$;\x93/v$;\xE1/m$;\u015F/d$;\xE0/[$;\xB8/R$%;\xE4/3#;U/*$8\":\x8C\"#'# )(\"'#&'#.\" &\"/*$8(:\x8F(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0444 &%;\u010B/}#;\xE0/t$;\x93/k$;\x91.\" &\"/]$;1/T$%;\xE4/4#;U/+$8\":\x8A\"$%$# )(\"'#&'#.\" &\"/+$8&:\x90&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u03DA &%;\u010B/\x88#;\xE0/\x7F$;\x93/v$;\xE1/m$;\u015F/d$;\xE0/[$;\xB8/R$%;\xE4/3#;U/*$8\":\x91\"#'# )(\"'#&'#.\" &\"/*$8(:\x92(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0365 &%;\u0143/}#;\xE0/t$;\x93/k$;\x91.\" &\"/]$;1/T$%;\xE4/4#;U/+$8\":\x8A\"$%$# )(\"'#&'#.\" &\"/+$8&:\x93&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u02FB &%;\u0143/\x88#;\xE0/\x7F$;\x93/v$;\xE1/m$;\u015F/d$;\xE0/[$;\xB8/R$%;\xE4/3#;U/*$8\":\x91\"#'# )(\"'#&'#.\" &\"/*$8(:\x94(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0286 &%;\u0101/\xD1#;\xE0/\xC8$;\u010A/\xBF$;\xE0/\xB6$;\x93/\xAD$%;\u0159/;#;\xE0/2$;\x93/)$8#:\x95#\"$ )(#'#(\"'#&'#.\" &\"/}$;W.\" &\"/o$;\x91.\" &\"/a$;1/X$%;\xE4/6#;U/-$8\":\x96\"&'&%$# )(\"'#&'#.\" &\"/-$8*:\x97*&%$#\"! )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01C8 &%;\u0101/\xC7#;\xE0/\xBE$%;\x93/C#;\xE1/:$;\u0159/1$;\xE0/($8$:\x98$!#)($'#(#'#(\"'#&'#.\" &\"/\x86$;\x93/}$;W.\" &\"/o$;\x91.\" &\"/a$;1/X$%;\xE4/6#;U/-$8\":\x96\"&'&%$# )(\"'#&'#.\" &\"/-$8(:\x99(&%$#\"! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0114 &%;\u0162/S#;\xE0/J$;\x93/A$;\x91.\" &\"/3$;1/*$8%:\x9A%#\"! )(%'#($'#(#'#(\"'#&'#.\xD4 &%;\u015C/D#;\xE0/;$;\x93/2$;1/)$8$:\x9B$\"! )($'#(#'#(\"'#&'#.\xA3 &%;\u0109/V#;\xE0/M$;\u0162/D$;\xE0/;$;\x93/2$;1/)$8&:\x9C&\"! )(&'#(%'#($'#(#'#(\"'#&'#.` &%;\u0109/V#;\xE0/M$;\u015C/D$;\xE0/;$;\x93/2$;1/)$8&:\x9D&\"! )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u014E/C#;\xE0/:$;\x93/1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;Z/B#$;Y0#*;Y&/2$;\xE1/)$8#:\x9E#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%2U\"\"6U7V/:#;\xE1/1$;Z/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;a/' 8!:\x9F!! )"),
          peg$decode("%;^/9#$;\\0#*;\\&/)$8\":\x9E\"\"! )(\"'#&'#"),
          peg$decode("%2U\"\"6U7V/:#;\xE1/1$;^/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;u/' 8!:\xA0!! )"),
          peg$decode("%;a/' 8!:\xA0!! )"),
          peg$decode("%;a/' 8!:\xA1!! )"),
          peg$decode("%;a/' 8!:\xA2!! )"),
          peg$decode(";h.G &;b.A &;d.; &;c.5 &;g./ &;f.) &;e.# &;i"),
          peg$decode("%;\u0151/0#;\xE1/'$8\":\xA3\" )(\"'#&'#"),
          peg$decode("%;t/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA4\"\"! )(\"'#&'#"),
          peg$decode("%;m/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA4\"\"! )(\"'#&'#"),
          peg$decode("%;s/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA4\"\"! )(\"'#&'#"),
          peg$decode("%;p/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA4\"\"! )(\"'#&'#"),
          peg$decode("%;q/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA5\"\"! )(\"'#&'#"),
          peg$decode("%;j/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA5\"\"! )(\"'#&'#"),
          peg$decode("%;o.# &;r/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA5\"\"! )(\"'#&'#"),
          peg$decode("%;\u0129/0#;\xE0/'$8\":\xA6\" )(\"'#&'#.\xCB &%;\u012B/0#;\xE0/'$8\":\xA7\" )(\"'#&'#.\xAE &%;\u0102/0#;\xE0/'$8\":\xA8\" )(\"'#&'#.\x91 &%;\u0157/0#;\xE0/'$8\":\xA9\" )(\"'#&'#.t &%;\u014F/0#;\xE0/'$8\":\xAA\" )(\"'#&'#.W &%;\u014B/0#;\xE0/'$8\":\xAB\" )(\"'#&'#.: &%;\u0111/0#;\xE0/'$8\":\xAC\" )(\"'#&'#"),
          peg$decode("%;\u0169/1#;\xBF/($8\":\xAD\"! )(\"'#&'#"),
          peg$decode("%;\u0171/Z#;\xE1/Q$;x.\" &\"/C$;\xE1/:$;\u0172/1$;\xE1/($8&:\xAE&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0169/F#%<;\u0169=.##&&!&'#/1$;\xBF/($8#:\xAF#! )(#'#(\"'#&'#.d &%;\u0169/1#;\xD4/($8\":\xB0\"! )(\"'#&'#.F &%;\u0169/<#%<;\u0169=.##&&!&'#/'$8\":\xB1\" )(\"'#&'#"),
          peg$decode("%2\xB2\"\"6\xB27\xB3/R#;\xE1/I$;\x93/@$;\xE1/7$2\xB4\"\"6\xB47\xB5/($8%:\xB6%!\")(%'#($'#(#'#(\"'#&'#.A &%2\xB7\"\"6\xB77\xB8/1#;\xD4/($8\":\xB6\"! )(\"'#&'#"),
          peg$decode("%;\u0171/L#;\xE1/C$;\x93/:$;\xE1/1$;\u0172/($8%:\xB9%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xBD/' 8!:\xBA!! )"),
          peg$decode("%2\xBB\"\"6\xBB7\xBC/& 8!:\xBD! ).X &%2\xBE\"\"6\xBE7\xBF/1#;\xBF/($8\":\xC0\"! )(\"'#&'#.4 &%2\xBE\"\"6\xBE7\xBF/& 8!:\xC1! )"),
          peg$decode("%;\xC0/' 8!:\xC2!! )"),
          peg$decode("%2\xC3\"\"6\xC37\xC4/1#;\xBE/($8\":\xC5\"! )(\"'#&'#"),
          peg$decode("%2\xC6\"\"6\xC67\xC7/1#;\xBF/($8\":\xC8\"! )(\"'#&'#.o &%2\xC9\"\"6\xC97\xCA/1#;\xBF/($8\":\xCB\"! )(\"'#&'#.K &%2\xC9\"\"6\xC97\xCA/& 8!:\xCC! ).4 &%2\xC6\"\"6\xC67\xC7/& 8!:\xCD! )"),
          peg$decode(";j.Y &;p.S &;q.M &;t.G &;m.A &%;\xCA/' 8!:\xCE!! )./ &%;\xD7/' 8!:\xCE!! )"),
          peg$decode("%;\u011A/V#;\xE1/M$;\xBD/D$;\xE1/;$;y/2$;\xE4/)$8&:\xCF&\"#!)(&'#(%'#($'#(#'#(\"'#&'#.} &%;\u011A/C#;\xE1/:$;y/1$;\xE4/($8$:\xD0$!!)($'#(#'#(\"'#&'#.M &%;\u011F/C#;\xE1/:$;y/1$;\xE4/($8$:\xD1$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xD4/N#;\u0169/E$;\xD4/<$;\u0169/3$;\xD4/*$8%:\xD2%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u016D/^#;\xE1/U$;\xE4/L$;\u016E/C$;\xE4/:$;\x8F/1$;\u016F/($8':\xD3'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xD1 &%;\u016D/^#;\xE1/U$;\xE4/L$;\u016E/C$;\xE4/:$;\x85/1$;\u016F/($8':\xD4'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x86 &%;\x83/<#2/\"\"6/70.\" &\"/($8\":\xD4\"!!)(\"'#&'#.] &%;\x8D/<#2/\"\"6/70.\" &\"/($8\":\xD5\"!!)(\"'#&'#.4 &%2/\"\"6/70/& 8!:\xD6! )"),
          peg$decode("%;\xE1/1#;\x93/($8\":\xD7\"! )(\"'#&'#"),
          peg$decode("%;\xE1/9#;\u010D/0$;\xE1/'$8#:\xD8# )(#'#(\"'#&'#.\u02EB &%;\xE1/9#;\xF6/0$;\xE1/'$8#:\xD9# )(#'#(\"'#&'#.\u02C5 &%;\xE1/c#;\u012E/Z$;\xE1/Q$;\x7F/H$;\xE1/?$;\u016B.\" &\"/1$;\xE1/($8':\xDA'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0275 &%;\xE1/g#;\u012E/^$;\xE1/U$;\xE4/L$;\u016E/C$;\xE4/:$;\x81/1$;\u016F/($8(:\xDA(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0221 &%;\xE1/c#;\u0156/Z$;\xE1/Q$;\x88/H$;\xE1/?$;\u016B.\" &\"/1$;\xE1/($8':\xDB'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01D1 &%;\xE1/g#;\u0156/^$;\xE1/U$;\xE4/L$;\u016E/C$;\xE4/:$;\x8A/1$;\u016F/($8(:\xDC(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u017D &%;\xE1/i#;\u016D.# &;\u0116/Z$;\xE1/Q$;\x8D/H$;\xE1/?$;\u016B.\" &\"/1$;\xE1/($8':\xDD'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0127 &%;\xE1/m#;\u016D.# &;\u0116/^$;\xE1/U$;\xE4/L$;\u016E/C$;\xE4/:$;\x8F/1$;\u016F/($8(:\xDE(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xCD &%;\xE1/i#;\u016D.# &;\xF1/Z$;\xE1/Q$;\x83/H$;\xE1/?$;\u016B.\" &\"/1$;\xE1/($8':\xDA'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xE1/m#;\u016D.# &;\xF1/^$;\xE1/U$;\xE4/L$;\u016E/C$;\xE4/:$;\x85/1$;\u016F/($8(:\xDA(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE1/i#;\u016D.# &;\u012E/Z$;\xE1/Q$;\x7F/H$;\xE1/?$;\u016B.\" &\"/1$;\xE1/($8':$'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xE1/m#;\u016D.# &;\u012E/^$;\xE1/U$;\xE4/L$;\u016E/C$;\xE4/:$;\x81/1$;\u016F/($8(:$(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0170/:#;\xE1/1$;\x93/($8#:$#! )(#'#(\"'#&'#._ &%;z/' 8!:\xDF!! ).M &;\xDA.G &;\xCA.A &;\u0141.; &;\u0142.5 &;\u015D./ &;\u013A.) &;\xD7.# &;}"),
          peg$decode("%$4\xE0\"\"5!7\xE1/,#0)*4\xE0\"\"5!7\xE1&&&#/m#%<2\xE2\"\"6\xE27\xE3.G &2U\"\"6U7V.; &2\xE4\"\"6\xE47\xE5./ &2/\"\"6/70.# &;\xE4=/##&'!&&#/($8\":\xE6\"!!)(\"'#&'#"),
          peg$decode("%;|/C#;\xE1/:$;\u016C/1$;\xE1/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;~0#*;~&/2#;|/)$8\":\xE7\"\"! )(\"'#&'#"),
          peg$decode("%;\x7F/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x80/&#0#*;\x80&&&#/' 8!:b!! )"),
          peg$decode("%;\x93/C#;\xE1/:$;\u016C/1$;\xE1/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x820#*;\x82&/2#;\x93/)$8\":\xE7\"\"! )(\"'#&'#"),
          peg$decode("%;\x83/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x84/&#0#*;\x84&&&#/' 8!:b!! )"),
          peg$decode("%;\u016A/:#;\xBC/1$;\xE1/($8#:\xE8#!!)(#'#(\"'#&'#.N &%;\xBC/D#;\xE0/;$;|/2$;\xE1/)$8$:\xE9$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x86/C#;\xE1/:$;\u016C/1$;\xE1/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x870#*;\x87&/2#;\x86/)$8\":\xEA\"\"! )(\"'#&'#"),
          peg$decode("%;\x88/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x89/&#0#*;\x89&&&#/' 8!:b!! )"),
          peg$decode("%;\u016A/:#;\xBC/1$;\xE1/($8#:\xE8#!!)(#'#(\"'#&'#.T &%;\xBC/J#;\xE0/A$;\x93.# &;\u010E/2$;\xE1/)$8$:\xE9$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x8B/C#;\xE1/:$;\u016C/1$;\xE1/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x8C0#*;\x8C&/2#;\x8B/)$8\":\xEB\"\"! )(\"'#&'#"),
          peg$decode("%;\x8D/1#;\xE4/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x8E/&#0#*;\x8E&&&#/' 8!:b!! )"),
          peg$decode("%;\xF2/C#;\xE1/:$;p/1$;\xE1/($8$:\xEC$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x92/' 8!:\xED!! )"),
          peg$decode("%;\xF2.# &;\u011A/\xA8#;\xE1/\x9F$$%;p/C#;\xE1/:$;\u016C/1$;\xE1/($8$:\xEE$!#)($'#(#'#(\"'#&'#0M*%;p/C#;\xE1/:$;\u016C/1$;\xE1/($8$:\xEE$!#)($'#(#'#(\"'#&'#&/;$;\xE1/2$;p/)$8%:\xEF%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";\x94"),
          peg$decode("%;\xAF/t#;\xE1/k$$%;\x95/2#;\xE1/)$8\":\xF0\"\"%!)(\"'#&'#0<*%;\x95/2#;\xE1/)$8\":\xF0\"\"%!)(\"'#&'#&/)$8#:\xF1#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\x9D.e &;\x9F._ &;\xA1.Y &;\x97.S &;\x98.M &;\x96.G &;\x9A.A &;\xA5.; &;\xA7.5 &;\xA9./ &;\xA3.) &;\x9B.# &;\x99"),
          peg$decode("%;\u0127/& 8!:\xF2! )"),
          peg$decode("%;\u012A/& 8!:\xF3! )"),
          peg$decode("%;\u0160/& 8!:\xF4! )"),
          peg$decode("%;\xFE/:#;\xE0/1$;\x93/($8#:\xF5#! )(#'#(\"'#&'#"),
          peg$decode("%;\xFC/& 8!:\xF6! ).? &%;\u010F/& 8!:\xF7! ).. &%;\u0110/& 8!:\xF8! )"),
          peg$decode("%;\xF8/:#;\xE0/1$;\x9C/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x91.\" &\"/2#;1/)$8\":\xF9\"\"! )(\"'#&'#.D &%;\u015F/:#;\xE0/1$;\xB8/($8#:\xFA#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0155/:#;\xE0/1$;\x9E/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/' 8!:\xFB!! ).\xAA &%;\u0171/U#;\xE1/L$;\x93/C$;\xE1/:$;\u0172/1$;\xE1/($8&:\xFB&!#)(&'#(%'#($'#(#'#(\"'#&'#.h &%;\x91.\" &\"/2#;1/)$8\":\xFC\"\"! )(\"'#&'#.D &%;\u015F/:#;\xE0/1$;\xB8/($8#:\xFD#! )(#'#(\"'#&'#"),
          peg$decode("%;\xF5/:#;\xE0/1$;\xA0/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0171/U#;\xE1/L$;\x93/C$;\xE1/:$;\u0172/1$;\xE1/($8&:\xFE&!#)(&'#(%'#($'#(#'#(\"'#&'#.z &%;\x93/' 8!:\xFE!! ).h &%;\x91.\" &\"/2#;1/)$8\":\xFF\"\"! )(\"'#&'#.D &%;\u015F/:#;\xE0/1$;\xB8/($8#:\u0100#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0120/:#;\xE0/1$;\xA2/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\xC1/A#;\x91.\" &\"/3$;1/*$8#:\u0101##\"! )(#'#(\"'#&'#.m &%;\xC1/2#;\x93/)$8\":\u0102\"\"! )(\"'#&'#.N &%;\xC1/D#;\u015F/;$;\xE0/2$;\xB8/)$8$:\u0103$\"# )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u011B/:#;\xE0/1$;\xA4/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/' 8!:\u0104!! ).h &%;\x91.\" &\"/2#;1/)$8\":\u0105\"\"! )(\"'#&'#.D &%;\u015F/:#;\xE0/1$;\xB8/($8#:\u0106#! )(#'#(\"'#&'#"),
          peg$decode("%;\u014C/:#;\xE0/1$;\xA6/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/' 8!:\u0107!! ).h &%;\x91.\" &\"/2#;1/)$8\":\u0108\"\"! )(\"'#&'#.D &%;\u015F/:#;\xE0/1$;\xB8/($8#:\u0109#! )(#'#(\"'#&'#"),
          peg$decode("%;\u013C/:#;\xE0/1$;\xA8/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/' 8!:\u010A!! ).h &%;\x91.\" &\"/2#;1/)$8\":\u010B\"\"! )(\"'#&'#.D &%;\u015F/:#;\xE0/1$;\xB8/($8#:\u010C#! )(#'#(\"'#&'#"),
          peg$decode("%;\xE1/k#$;\xAB./ &;\xAC.) &;\xAD.# &;\xAA/8#05*;\xAB./ &;\xAC.) &;\xAD.# &;\xAA&&&#/1$;\xE1/($8#:\u010D#!!)(#'#(\"'#&'#"),
          peg$decode("%;\u0117/0#;\xE1/'$8\":\u010E\" )(\"'#&'#.\xDC &%;\u012C/0#;\xE1/'$8\":\u010F\" )(\"'#&'#.\xBF &%;\u012D/h#;\xE1/_$;\xAF/V$;\xE1/M$;\u016C/D$;\xE1/;$;\xAF/2$;\xE1/)$8(:\u0110(\"%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.j &%;\u012D/C#;\xE1/:$;\xAF/1$;\xE1/($8$:\u0111$!!)($'#(#'#(\"'#&'#.: &%;\u0101/0#;\xE1/'$8\":\u0112\" )(\"'#&'#"),
          peg$decode("%;\u016A/:#;\xBC/1$;\xE1/($8#:\u0113#!!)(#'#(\"'#&'#.M &%;\u0168/C#;\u016A/:$;\xBC/1$;\xE1/($8$:\u0114$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u011B/C#;\xE1/:$;\xAF/1$;\xE1/($8$:\u0115$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xF8/C#;\xE1/:$;\xAE/1$;\xE1/($8$:\u0116$!!)($'#(#'#(\"'#&'#.\xBC &%;\xF8/R#;\xE1/I$;\xAF/@$;\xAE.\" &\"/2$;\xE1/)$8%:\u0117%\"\"!)(%'#($'#(#'#(\"'#&'#.} &%;\u011C/C#;\xE1/:$;\xAF/1$;\xE1/($8$:\u0118$!!)($'#(#'#(\"'#&'#.M &%;\u0130/C#;\xE1/:$;\xAF/1$;\xE1/($8$:\u0119$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xF4.# &;\xF3/0#;\xE1/'$8\":\u011A\" )(\"'#&'#.@ &%;\u0108.# &;\u0107/0#;\xE1/'$8\":\u011B\" )(\"'#&'#"),
          peg$decode("%;\xB1/N#;\xE1/E$;\xB0/<$;\xE1/3$;\xAF/*$8%:\u011C%#$\" )(%'#($'#(#'#(\"'#&'#.\u018E &%;\xB1/M#;\xE1/D$;\u0164/;$;\xE1/2$;\xAF/)$8%:\u011D%\"$ )(%'#($'#(#'#(\"'#&'#.\u0154 &%;\xB1/M#;\xE1/D$;\u0133/;$;\xE1/2$;\xAF/)$8%:\u011E%\"$ )(%'#($'#(#'#(\"'#&'#.\u011A &%;\xB1/M#;\xE1/D$;\u0136/;$;\xE1/2$;\xAF/)$8%:\u011F%\"$ )(%'#($'#(#'#(\"'#&'#.\xE0 &%;\xB1/~#;\xE1/u$2\u0120\"\"6\u01207\u0121/f$;\xE1/]$;\xAF/T$;\xE1/K$2\u0122\"\"6\u01227\u0123/<$;\xE1/3$;\xAF/*$8):\u0124)#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.u &%;\xB1/M#;\xE1/D$;\u0105/;$;\xE1/2$;\xAF/)$8%:\u0125%\"$ )(%'#($'#(#'#(\"'#&'#.; &%;\xB1/1#;\xE1/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xEF/0#;\xE0/'$8\":\u0126\" )(\"'#&'#.: &%;\u013E/0#;\xE0/'$8\":\u0127\" )(\"'#&'#"),
          peg$decode("%;\xB4/N#;\xE1/E$;\xB3/<$;\xE1/3$;\xB1/*$8%:\u0128%#$\" )(%'#($'#(#'#(\"'#&'#.v &%;\xB4/N#;\xE1/E$;\xB2/<$;\xE1/3$;\xB1/*$8%:\u011C%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xB4/1#;\xE1/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%2\u0129\"\"6\u01297\u012A/& 8!:\u012B! ).\u0106 &%2\u012C\"\"6\u012C7\u012D/B#%<2\u012C\"\"6\u012C7\u012D=.##&&!&'#/'$8\":\u012E\" )(\"'#&'#.\xD1 &%2\u012F\"\"6\u012F7\u0130/& 8!:\u0131! ).\xBA &%;\u0123/0#;\xE0/'$8\":\u0132\" )(\"'#&'#.\x9D &%;\u0125/0#;\xE0/'$8\":\u0133\" )(\"'#&'#.\x80 &%2\u0134\"\"6\u01347\u0135/& 8!:\u0136! ).i &%2\u0137\"\"6\u01377\u0138/B#%<2\u0137\"\"6\u01377\u0138=.##&&!&'#/'$8\":\u0139\" )(\"'#&'#.4 &%2\u013A\"\"6\u013A7\u013B/& 8!:\u013C! )"),
          peg$decode("%2|\"\"6|7}/& 8!:\u013D! ).K &%2~\"\"6~7\x7F/& 8!:\u013E! ).4 &%2\u013F\"\"6\u013F7\u0140/& 8!:\u0141! )"),
          peg$decode("%;\xB6/N#;\xE1/E$;\xB5/<$;\xE1/3$;\xB4/*$8%:\u011C%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xB6/1#;\xE1/($8\":$\"!!)(\"'#&'#"),
          peg$decode("2l\"\"6l7m.\x80 &2j\"\"6j7k.t &%;\u013F/0#;\xE0/'$8\":\u0142\" )(\"'#&'#.W &%;\xF0/0#;\xE0/'$8\":\u0143\" )(\"'#&'#.: &%;\u0165/0#;\xE0/'$8\":\u0144\" )(\"'#&'#"),
          peg$decode("%;\xB8/N#;\xE1/E$;\xB7/<$;\xE1/3$;\xB6/*$8%:\u011C%#$\" )(%'#($'#(#'#(\"'#&'#.\u01EF &%;\xB8/S#;\xE1/J$2n\"\"6n7o/;$;\xE1/2$;\xB6/)$8%:\u0145%\"$ )(%'#($'#(#'#(\"'#&'#.\u01AF &%;\xB8/e#;\xE1/\\$;\u0161/S$;\xE1/J$;\xB8/A$;\xE1/8$;x.\" &\"/*$8':\u0146'#&\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.\u015D &%;\xB8/M#;\xE1/D$;\u0140/;$;\xE0/2$;\xB6/)$8%:\u0147%\"$ )(%'#($'#(#'#(\"'#&'#.\u0123 &%;\xB8/M#;\xE1/D$;\u014A/;$;\xE0/2$;\xB6/)$8%:\u0148%\"$ )(%'#($'#(#'#(\"'#&'#.\xE9 &%;\xB8/M#;\xE1/D$;\u0106/;$;\xE0/2$;\xB6/)$8%:\u0149%\"$ )(%'#($'#(#'#(\"'#&'#.\xAF &%;\xB8/M#;\xE1/D$;\u0114/;$;\xE0/2$;\xB6/)$8%:\u014A%\"$ )(%'#($'#(#'#(\"'#&'#.u &%;\xB8/M#;\xE1/D$;\u0126/;$;\xE0/2$;\xB6/)$8%:\u014B%\"$ )(%'#($'#(#'#(\"'#&'#.; &%;\xB8/1#;\xE1/($8\":$\"!!)(\"'#&'#"),
          peg$decode("2p\"\"6p7q.Y &2r\"\"6r7s.M &2t\"\"6t7u.A &2z\"\"6z7{.5 &2x\"\"6x7y.) &2v\"\"6v7w"),
          peg$decode("%2j\"\"6j7k/C#;\xE1/:$;\xB8/1$;\xE1/($8$:\u014C$!!)($'#(#'#(\"'#&'#.\u03B5 &%;\u0138/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u014D$!!)($'#(#'#(\"'#&'#.\u0385 &%;\u0137/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u014E$!!)($'#(#'#(\"'#&'#.\u0355 &%;\u015A/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u014F$!!)($'#(#'#(\"'#&'#.\u0325 &%;\u0124/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u0150$!!)($'#(#'#(\"'#&'#.\u02F5 &%;\u0139/:#;\xE0/1$;\xB8/($8#:\u0151#! )(#'#(\"'#&'#.\u02CE &%;\u0113/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u0152$!!)($'#(#'#(\"'#&'#.\u029E &%;\xFD/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u0153$!!)($'#(#'#(\"'#&'#.\u026E &%;\u0153/C#;\xE0/:$;,/1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u023E &%;\u0145/C#;\xE0/:$;-/1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u020E &%;\u0144/C#;\xE0/:$;./1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u01DE &%;\u0168/H#;\xE0.\" &\"/:$;\xC2/1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u01A9 &%;\u0118/C#;\xE0/:$;\xC2/1$;\xE1/($8$:$$!!)($'#(#'#(\"'#&'#.\u0179 &%;\u0166/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u0154$!!)($'#(#'#(\"'#&'#.\u0149 &%;\u0167/C#;\xE0/:$;\xB8/1$;\xE1/($8$:\u0155$!!)($'#(#'#(\"'#&'#.\u0119 &%2\u0156\"\"6\u01567\u0157/:#;_/1$;\xE1/($8#:$#!!)(#'#(\"'#&'#.\xEC &%;^/1#;\xE1/($8\":$\"!!)(\"'#&'#.\xCE &;\xC4.\xC8 &%;z/' 8!:\xDF!! ).\xB6 &%;\xC7/1#;\xE1/($8\":\u0158\"!!)(\"'#&'#.\x98 &%2\u0159\"\"6\u01597\u015A/j#;\xE1/a$;\x93/X$;\xE1/O$;\x90.\" &\"/A$2\xE4\"\"6\xE47\xE5/2$;\xE1/)$8':\u015B'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xB9/1#;\xE1/($8\":\x98\"!!)(\"'#&'#"),
          peg$decode("%2r\"\"6r7s/\x7F#$;\xBA.# &;\xBB/,#0)*;\xBA.# &;\xBB&&&#/]$2r\"\"6r7s/N$$4\u015C\"\"5!7\u015D0)*4\u015C\"\"5!7\u015D&/2$;\xE1/)$8%:\u015E%\"#!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2\u015F\"\"6\u015F7\u0160"),
          peg$decode("4\u0161\"\"5!7\u0162"),
          peg$decode("%;\xBD/C#%<4\u0163\"\"5!7\u0164=.##&&!&'#/($8\":$\"!!)(\"'#&'#.# &;\xD7"),
          peg$decode("%%<;\xE9=.##&&!&'#/1#;\xBF/($8\":\u0165\"! )(\"'#&'#"),
          peg$decode("%4\u0166\"\"5!7\u0167/E#$4\u0168\"\"5!7\u01690)*4\u0168\"\"5!7\u0169&/)$8\":\u016A\"\"! )(\"'#&'#"),
          peg$decode("%4\u016B\"\"5!7\u016C/E#$4\u0168\"\"5!7\u01690)*4\u0168\"\"5!7\u0169&/)$8\":\u016A\"\"! )(\"'#&'#"),
          peg$decode(";\xCA.] &;\xD7.W &;\u0141.Q &;\u0142.K &;\u015D.E &;\u013A.? &%;\u0132/& 8!:\u016D! ).. &%;\u011E/& 8!:\u016E! )"),
          peg$decode("%;\u0129/0#;\xE0/'$8\":\u016F\" )(\"'#&'#.# &;\x93"),
          peg$decode("%;\xC3/' 8!:\u0170!! )"),
          peg$decode("%;`/@#;\xE1/7$;x.\" &\"/)$8#:\u0171#\"\" )(#'#(\"'#&'#.; &%;`/1#;\xE1/($8\":\u0172\"!!)(\"'#&'#"),
          peg$decode("%;\xFB/M#;\xE1/D$;\x93/;$;\xE1/2$;\xC5/)$8%:\u0173%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xE4/Y#;\u016E/P$;\xE4/G$$;\xC6/&#0#*;\xC6&&&#/1$;\u016F/($8%:\u0174%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x95/:#;\xE1/1$;\xE4/($8#:\u0175#!\")(#'#(\"'#&'#.\\ &%;\xBD/R#;\xE1/I$;x.\" &\"/;$;\xE1/2$;\xE4/)$8%:\u0176%\"$\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0103/R#;\xE1/I$;\xB8/@$;\xE1/7$;x.\" &\"/)$8%:\u0177%\"\" )(%'#($'#(#'#(\"'#&'#.\x9B &%;\u014D/R#;\xE1/I$;\xB8/@$;\xE1/7$;x.\" &\"/)$8%:\u0178%\"\" )(%'#($'#(#'#(\"'#&'#.\\ &%;\u0134/R#;\xE1/I$;\xB8/@$;\xE1/7$;x.\" &\"/)$8%:\u0179%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%<;\xE4=/##&'!&&#.G &%<;\xE8=/##&'!&&#.5 &%<2\xE4\"\"6\xE47\xE5=/##&'!&&#"),
          peg$decode("%$4\u017A\"\"5!7\u017B/,#0)*4\u017A\"\"5!7\u017B&&&#/' 8!:\u017C!! )"),
          peg$decode(";\xCD.S &;\xCE.M &;\xCC.G &%;\xCB/7#2\u017D\"\"6\u017D7\u017E/($8\":\u017F\"!!)(\"'#&'#.# &;\xCB"),
          peg$decode(";\xD1./ &;\xD2.) &;\xD3.# &;\u0132"),
          peg$decode("%2\u0180\"\"6\u01807\u0181/J#$4\u0182\"\"5!7\u0183/,#0)*4\u0182\"\"5!7\u0183&&&#/($8\":\u0184\"! )(\"'#&'#"),
          peg$decode("%2\u0185\"\"6\u01857\u0186/J#$4\u0187\"\"5!7\u0188/,#0)*4\u0187\"\"5!7\u0188&&&#/($8\":\u0189\"! )(\"'#&'#"),
          peg$decode("%2\u018A\"\"6\u018A7\u018B/1#;\xCF/($8\":\u0165\"! )(\"'#&'#"),
          peg$decode("%$;\xD0/&#0#*;\xD0&&&#/' 8!:\u018C!! )"),
          peg$decode("%2\u018D\"\"6\u018D7\u018E/& 8!:\u018F! ).\u01BE &%2\u0190\"\"6\u01907\u0191/& 8!:\u0192! ).\u01A7 &%2\u0193\"\"6\u01937\u0194/& 8!:\u0195! ).\u0190 &%2\u0196\"\"6\u01967\u0197/& 8!:\u0198! ).\u0179 &%2\u0199\"\"6\u01997\u019A/& 8!:\u019B! ).\u0162 &%2\u019C\"\"6\u019C7\u019D/& 8!:\u019E! ).\u014B &%2\u019F\"\"6\u019F7\u01A0/& 8!:\u01A1! ).\u0134 &%2\u01A2\"\"6\u01A27\u01A3/& 8!:\u01A4! ).\u011D &%2\u01A5\"\"6\u01A57\u01A6/& 8!:\u01A7! ).\u0106 &%2\u01A8\"\"6\u01A87\u01A9/& 8!:\u01AA! ).\xEF &%2\u01AB\"\"6\u01AB7\u01AC.) &2\u01AD\"\"6\u01AD7\u01AE/& 8!:\u01AF! ).\xCC &%2\u01B0\"\"6\u01B07\u01B1.) &2\u01B2\"\"6\u01B27\u01B3/& 8!:\u01B4! ).\xA9 &%2\u01B5\"\"6\u01B57\u01B6.) &2\u01B7\"\"6\u01B77\u01B8/& 8!:\u01B9! ).\x86 &%2\u01BA\"\"6\u01BA7\u01BB.) &2\u01BC\"\"6\u01BC7\u01BD/& 8!:\u01BE! ).c &%2\u01BF\"\"6\u01BF7\u01C0.) &2\u01C1\"\"6\u01C17\u01C2/& 8!:\u01C3! ).@ &%2\u01C4\"\"6\u01C47\u01C5.) &2\u01C6\"\"6\u01C67\u01C7/& 8!:\u01C8! )"),
          peg$decode("%;\xD2.# &;\xD3/A#2\u01BF\"\"6\u01BF7\u01C0/2$;\xD3/)$8#:\u01C9#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xD3/;#;\u0169/2$;\xD5/)$8#:\u01CA#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\xD4.A &%2j\"\"6j7k/1#;\xD4/($8\":\u01CB\"! )(\"'#&'#"),
          peg$decode("%$4\u01CC\"\"5!7\u01CD/,#0)*4\u01CC\"\"5!7\u01CD&&&#/' 8!:\u01CE!! )"),
          peg$decode("%$4\u01CC\"\"5!7\u01CD/,#0)*4\u01CC\"\"5!7\u01CD&&&#/' 8!:;!! )"),
          peg$decode("%2\u01CF\"\"6\u01CF7\u01D0/S#$;\xDD.# &;\xD80)*;\xDD.# &;\xD8&/7$2\u01CF\"\"6\u01CF7\u01D0/($8#:\u01D1#!!)(#'#(\"'#&'#.c &%2\u01D2\"\"6\u01D27\u01D3/S#$;\xDD.# &;\xD90)*;\xDD.# &;\xD9&/7$2\u01D2\"\"6\u01D27\u01D3/($8#:\u01D1#!!)(#'#(\"'#&'#"),
          peg$decode(";\xDA.\xE5 &%2\u01D4\"\"6\u01D47\u01D5/1#;\xDB/($8\":$\"! )(\"'#&'#.\xC1 &%2\u01CF\"\"6\u01CF7\u01D0/_#$;\xDD.) &;\xDE.# &;\xD80/*;\xDD.) &;\xDE.# &;\xD8&/7$2\u01CF\"\"6\u01CF7\u01D0/($8#:\u01D1#!!)(#'#(\"'#&'#.o &%2\u01D2\"\"6\u01D27\u01D3/_#$;\xDD.) &;\xDE.# &;\xD90/*;\xDD.) &;\xDE.# &;\xD9&/7$2\u01D2\"\"6\u01D27\u01D3/($8#:\u01D1#!!)(#'#(\"'#&'#"),
          peg$decode("%4\u01D6\"\"5!7\u01D7/' 8!:\u01D8!! )"),
          peg$decode("%4\u01D9\"\"5!7\u01DA/' 8!:\u01D8!! )"),
          peg$decode("%2\u01DB\"\"6\u01DB7\u01DC/\xAA#;\xE1/\xA1$;\xE4/\x98$;\u016E/\x8F$;\xE4/\x86$$%;\xDB/1#;\xE5/($8\":\u01DD\"!!)(\"'#&'#0;*%;\xDB/1#;\xE5/($8\":\u01DD\"!!)(\"'#&'#&/F$;\u016F/=$%<;\xE4=/##&'!&&#/($8(:\u01DE(!\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;\xDD.) &;\xDE.# &;\xDC0/*;\xDD.) &;\xDE.# &;\xDC&/=#%<;\xE4=/##&'!&&#/($8\":\u01D1\"!!)(\"'#&'#"),
          peg$decode("%4\u01DF\"\"5!7\u01E0/' 8!:\u01D8!! )"),
          peg$decode("%2\u01E1\"\"6\u01E17\u01E2/6#2\u01CF\"\"6\u01CF7\u01D0/'$8\":\u01E3\" )(\"'#&'#.\u0286 &%2\u01E1\"\"6\u01E17\u01E2/6#2\u01D2\"\"6\u01D27\u01D3/'$8\":\u01E4\" )(\"'#&'#.\u025D &%2\u01E1\"\"6\u01E17\u01E2/6#2\xBE\"\"6\xBE7\xBF/'$8\":\u01E5\" )(\"'#&'#.\u0234 &%2\u01E6\"\"6\u01E67\u01E7/& 8!:\u01E8! ).\u021D &%2\u01E9\"\"6\u01E97\u01EA/& 8!:\u01EB! ).\u0206 &%2\u01E1\"\"6\u01E17\u01E2/6#2\u01EC\"\"6\u01EC7\u01ED/'$8\":\u01EE\" )(\"'#&'#.\u01DD &%2\u01E1\"\"6\u01E17\u01E2/6#2\u01EF\"\"6\u01EF7\u01F0/'$8\":\u01F1\" )(\"'#&'#.\u01B4 &%2\u01E1\"\"6\u01E17\u01E2/6#2\u01F2\"\"6\u01F27\u01F3/'$8\":\u01F4\" )(\"'#&'#.\u018B &%2\u01E1\"\"6\u01E17\u01E2/6#2\u01B0\"\"6\u01B07\u01B1/'$8\":\u01F5\" )(\"'#&'#.\u0162 &%2\u01E1\"\"6\u01E17\u01E2/6#2\u01C4\"\"6\u01C47\u01C5/'$8\":\u01F6\" )(\"'#&'#.\u0139 &%2\u01E1\"\"6\u01E17\u01E2/V#2\u01F7\"\"6\u01F77\u01F8/G$4\u01F9\"\"5!7\u01FA/8$4\u01F9\"\"5!7\u01FA/)$8$:\u01FB$\"! )($'#(#'#(\"'#&'#.\xF0 &%2\u01E1\"\"6\u01E17\u01E2/v#2\u01FC\"\"6\u01FC7\u01FD/g$4\u01F9\"\"5!7\u01FA/X$4\u01F9\"\"5!7\u01FA/I$4\u01F9\"\"5!7\u01FA/:$4\u01F9\"\"5!7\u01FA/+$8&:\u01FE&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\x87 &%2\u01E1\"\"6\u01E17\u01E2/w#2\u01FC\"\"6\u01FC7\u01FD/h$2\u01FF\"\"6\u01FF7\u0200/Y$$4\u01F9\"\"5!7\u01FA/,#0)*4\u01F9\"\"5!7\u01FA&&&#/7$2\u0201\"\"6\u02017\u0202/($8%:\u0203%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2\u0204\"\"6\u02047\u0205/@#;\x93/7$2\u0201\"\"6\u02017\u0202/($8#:\u0206#!!)(#'#(\"'#&'#"),
          peg$decode("$;\xE2/&#0#*;\xE2&&&#"),
          peg$decode(";\xE2.5 &%<4\u0207\"\"5!7\u0208=/##&'!&&#"),
          peg$decode("$;\xE20#*;\xE2&"),
          peg$decode("%;\xE5/2#2\u0209\"\"6\u02097\u020A/#$+\")(\"'#&'#.) &4\u020B\"\"5!7\u020C"),
          peg$decode("$;\xE50#*;\xE5&"),
          peg$decode("$;\xE5/&#0#*;\xE5&&&#"),
          peg$decode("%2\u020D\"\"6\u020D7\u020E/H#$4\u020F\"\"5!7\u02100)*4\u020F\"\"5!7\u0210&/,$;\xE6/#$+#)(#'#(\"'#&'#.# &;\xE6"),
          peg$decode("4\u0211\"\"5!7\u0212"),
          peg$decode("2\u01FF\"\"6\u01FF7\u0200"),
          peg$decode("2\u0201\"\"6\u02017\u0202"),
          peg$decode("%;\xEA/>#%<4\u0168\"\"5!7\u0169=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode(";\u014C.\u01F7 &;\xF0.\u01F1 &;\xEF.\u01EB &;\xF1.\u01E5 &;\xF2.\u01DF &;\xF4.\u01D9 &;\xF3.\u01D3 &;\xF5.\u01CD &;\xF6.\u01C7 &;\xF7.\u01C1 &;\xF8.\u01BB &;\xF9.\u01B5 &;\xFB.\u01AF &;\u0103.\u01A9 &;\xFC.\u01A3 &;\xFE.\u019D &;\xFD.\u0197 &;\u0104.\u0191 &;\u0105.\u018B &;\u0106.\u0185 &;\u0108.\u017F &;\u0107.\u0179 &;\u010A.\u0173 &;\u010D.\u016D &;\u010F.\u0167 &;\u0110.\u0161 &;\u010E.\u015B &;\u0111.\u0155 &;\u0113.\u014F &;\u0114.\u0149 &;\u0142.\u0143 &;\u0116.\u013D &;\u0117.\u0137 &;\u0118.\u0131 &;\u0119.\u012B &;\u011B.\u0125 &;\u011C.\u011F &;\u0121.\u0119 &;\u0120.\u0113 &;\u0123.\u010D &;\u0124.\u0107 &;\u0125.\u0101 &;\u0127.\xFB &;\u012A.\xF5 &;\u012C.\xEF &;\u012D.\xE9 &;\u012E.\xE3 &;\u0130.\xDD &;\u0132.\xD7 &;\u0133.\xD1 &;\u0134.\xCB &;\u0136.\xC5 &;\u0138.\xBF &;\u0137.\xB9 &;\u0139.\xB3 &;\u013A.\xAD &;\u013C.\xA7 &;\u013F.\xA1 &;\u013E.\x9B &;\u0140.\x95 &;\u0144.\x8F &;\u0145.\x89 &;\u014B.\x83 &;\u014D.} &;\u0150.w &;\u0153.q &;\u0157.k &;\u0154.e &;\u0155._ &;\u0159.Y &;\u0156.S &;\u0141.M &;\u015A.G &;\u015D.A &;\u015E.; &;\u015F.5 &;\u0160./ &;\u0161.) &;\u0165.# &;\u0164"),
          peg$decode("2\u0213\"\"6\u02137\u0214"),
          peg$decode("2\u0215\"\"6\u02157\u0216"),
          peg$decode("2\u0217\"\"6\u02177\u0218"),
          peg$decode("2\u0219\"\"6\u02197\u021A"),
          peg$decode("2\u021B\"\"6\u021B7\u021C"),
          peg$decode("2\u021D\"\"6\u021D7\u021E"),
          peg$decode("2\u021F\"\"6\u021F7\u0220"),
          peg$decode("2\u0221\"\"6\u02217\u0222"),
          peg$decode("2\u0223\"\"6\u02237\u0224"),
          peg$decode("2\u0225\"\"6\u02257\u0226"),
          peg$decode("2\u0227\"\"6\u02277\u0228"),
          peg$decode("2\u0229\"\"6\u02297\u022A"),
          peg$decode("2\u022B\"\"6\u022B7\u022C"),
          peg$decode("2\u022D\"\"6\u022D7\u022E"),
          peg$decode("2\u022F\"\"6\u022F7\u0230"),
          peg$decode("2\u0231\"\"6\u02317\u0232"),
          peg$decode("2\u0233\"\"6\u02337\u0234"),
          peg$decode("2\u0235\"\"6\u02357\u0236"),
          peg$decode("2\u0237\"\"6\u02377\u0238"),
          peg$decode("2\u0239\"\"6\u02397\u023A"),
          peg$decode("2\u023B\"\"6\u023B7\u023C"),
          peg$decode("2\u023D\"\"6\u023D7\u023E"),
          peg$decode("2\u023F\"\"6\u023F7\u0240"),
          peg$decode("2\u0241\"\"6\u02417\u0242"),
          peg$decode("2\u0243\"\"6\u02437\u0244"),
          peg$decode("2\u0245\"\"6\u02457\u0246"),
          peg$decode("2\u0247\"\"6\u02477\u0248"),
          peg$decode("2\u0249\"\"6\u02497\u024A"),
          peg$decode("2\u024B\"\"6\u024B7\u024C"),
          peg$decode("2\u024D\"\"6\u024D7\u024E"),
          peg$decode("2\u024F\"\"6\u024F7\u0250"),
          peg$decode("2\u0251\"\"6\u02517\u0252"),
          peg$decode("2\u0253\"\"6\u02537\u0254"),
          peg$decode("2\u0255\"\"6\u02557\u0256"),
          peg$decode("2\u0257\"\"6\u02577\u0258"),
          peg$decode("2\u0259\"\"6\u02597\u025A"),
          peg$decode("2\u025B\"\"6\u025B7\u025C"),
          peg$decode("2\u025D\"\"6\u025D7\u025E"),
          peg$decode("2\u025F\"\"6\u025F7\u0260"),
          peg$decode("2\u0261\"\"6\u02617\u0262"),
          peg$decode("2\u0263\"\"6\u02637\u0264"),
          peg$decode("2\u0265\"\"6\u02657\u0266"),
          peg$decode("2\u0267\"\"6\u02677\u0268"),
          peg$decode("2\u0269\"\"6\u02697\u026A"),
          peg$decode("2\u026B\"\"6\u026B7\u026C"),
          peg$decode("2\u026D\"\"6\u026D7\u026E"),
          peg$decode("2\u026F\"\"6\u026F7\u0270"),
          peg$decode("2\u0271\"\"6\u02717\u0272"),
          peg$decode("2\u0273\"\"6\u02737\u0274"),
          peg$decode("2\u0275\"\"6\u02757\u0276"),
          peg$decode("2\u0277\"\"6\u02777\u0278"),
          peg$decode("2\u0279\"\"6\u02797\u027A"),
          peg$decode("2\u027B\"\"6\u027B7\u027C"),
          peg$decode("2\u027D\"\"6\u027D7\u027E"),
          peg$decode("2\u027F\"\"6\u027F7\u0280"),
          peg$decode("2\u0281\"\"6\u02817\u0282"),
          peg$decode("2\u0283\"\"6\u02837\u0284"),
          peg$decode("2\u0285\"\"6\u02857\u0286"),
          peg$decode("2\u0287\"\"6\u02877\u0288"),
          peg$decode("2\u0289\"\"6\u02897\u028A"),
          peg$decode("2\u028B\"\"6\u028B7\u028C"),
          peg$decode("2\u028D\"\"6\u028D7\u028E"),
          peg$decode("2\u028F\"\"6\u028F7\u0290"),
          peg$decode("2\u0291\"\"6\u02917\u0292"),
          peg$decode("2\u0293\"\"6\u02937\u0294"),
          peg$decode("2\u0295\"\"6\u02957\u0296"),
          peg$decode("2\u0297\"\"6\u02977\u0298"),
          peg$decode("2\u0299\"\"6\u02997\u029A"),
          peg$decode("2\u029B\"\"6\u029B7\u029C"),
          peg$decode("2\u029D\"\"6\u029D7\u029E"),
          peg$decode("2\u029F\"\"6\u029F7\u02A0"),
          peg$decode("2\u02A1\"\"6\u02A17\u02A2"),
          peg$decode("2\u02A3\"\"6\u02A37\u02A4"),
          peg$decode("2\u02A5\"\"6\u02A57\u02A6"),
          peg$decode("2\u02A7\"\"6\u02A77\u02A8"),
          peg$decode("2\u02A9\"\"6\u02A97\u02AA"),
          peg$decode("2\u02AB\"\"6\u02AB7\u02AC"),
          peg$decode("2\u02AD\"\"6\u02AD7\u02AE"),
          peg$decode("2\u02AF\"\"6\u02AF7\u02B0"),
          peg$decode("2\u02B1\"\"6\u02B17\u02B2"),
          peg$decode("2\u02B3\"\"6\u02B37\u02B4"),
          peg$decode("2\u02B5\"\"6\u02B57\u02B6"),
          peg$decode("2\u02B7\"\"6\u02B77\u02B8"),
          peg$decode("2\u02B9\"\"6\u02B97\u02BA"),
          peg$decode("2\u02BB\"\"6\u02BB7\u02BC"),
          peg$decode("2\u02BD\"\"6\u02BD7\u02BE"),
          peg$decode("2\u02BF\"\"6\u02BF7\u02C0"),
          peg$decode("2\u02C1\"\"6\u02C17\u02C2"),
          peg$decode("2\u02C3\"\"6\u02C37\u02C4"),
          peg$decode("2\u02C5\"\"6\u02C57\u02C6"),
          peg$decode("2\u02C7\"\"6\u02C77\u02C8"),
          peg$decode("2\u02C9\"\"6\u02C97\u02CA"),
          peg$decode("2\u02CB\"\"6\u02CB7\u02CC"),
          peg$decode("2\u02CD\"\"6\u02CD7\u02CE"),
          peg$decode("2\u02CF\"\"6\u02CF7\u02D0"),
          peg$decode("2\u02D1\"\"6\u02D17\u02D2"),
          peg$decode("2\u02D3\"\"6\u02D37\u02D4"),
          peg$decode("2\u02D5\"\"6\u02D57\u02D6"),
          peg$decode("2\u02D7\"\"6\u02D77\u02D8"),
          peg$decode("2\u02D9\"\"6\u02D97\u02DA"),
          peg$decode("2\u02DB\"\"6\u02DB7\u02DC"),
          peg$decode("2\u02DD\"\"6\u02DD7\u02DE"),
          peg$decode("2\u02DF\"\"6\u02DF7\u02E0"),
          peg$decode("2\u02E1\"\"6\u02E17\u02E2"),
          peg$decode("2\u02E3\"\"6\u02E37\u02E4"),
          peg$decode("2\u02E5\"\"6\u02E57\u02E6"),
          peg$decode("2\u02E7\"\"6\u02E77\u02E8"),
          peg$decode("2\u02E9\"\"6\u02E97\u02EA"),
          peg$decode("2\u02EB\"\"6\u02EB7\u02EC"),
          peg$decode("2\u02ED\"\"6\u02ED7\u02EE"),
          peg$decode("2\u02EF\"\"6\u02EF7\u02F0"),
          peg$decode("2\u02F1\"\"6\u02F17\u02F2"),
          peg$decode("2\u02F3\"\"6\u02F37\u02F4"),
          peg$decode("2\u02F5\"\"6\u02F57\u02F6"),
          peg$decode("2\u02F7\"\"6\u02F77\u02F8"),
          peg$decode("2\u02F9\"\"6\u02F97\u02FA"),
          peg$decode("2\u02FB\"\"6\u02FB7\u02FC"),
          peg$decode("2\u02FD\"\"6\u02FD7\u02FE"),
          peg$decode("2\u02FF\"\"6\u02FF7\u0300"),
          peg$decode("2\u0301\"\"6\u03017\u0302"),
          peg$decode("2\u0303\"\"6\u03037\u0304"),
          peg$decode("2\u0305\"\"6\u03057\u0306"),
          peg$decode("2\u0307\"\"6\u03077\u0308"),
          peg$decode("2\u0309\"\"6\u03097\u030A"),
          peg$decode("2\u030B\"\"6\u030B7\u030C"),
          peg$decode("2\u030D\"\"6\u030D7\u030E"),
          peg$decode("2\xB7\"\"6\xB77\xB8"),
          peg$decode("2\u030F\"\"6\u030F7\u0310"),
          peg$decode("2/\"\"6/70"),
          peg$decode("2U\"\"6U7V"),
          peg$decode("%2\u0311\"\"6\u03117\u0312/B#%<2\u0311\"\"6\u03117\u0312=.##&&!&'#/'$8\":\u0313\" )(\"'#&'#"),
          peg$decode("2\u01FF\"\"6\u01FF7\u0200"),
          peg$decode("2\u0201\"\"6\u02017\u0202"),
          peg$decode("2\u012F\"\"6\u012F7\u0130"),
          peg$decode("2\u0159\"\"6\u01597\u015A"),
          peg$decode("2\xE4\"\"6\xE47\xE5")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 339 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      var _bindings={};
      var _locals={};
      var reCache={};
      var Entity=false;
      var FunctionChain=false;
      var SafetyFetch=false;
      var References={};
      
      var _db=false;
      var lp='_'; // prefix for bareword variables
      var LeakedMagic=/\^\{([a-z0-9]+)\}/;
      
      function addLocal(v,a) { 
        if (_db) console.log("request local "+v+" - "+a);
        if (References[v]) return;
        if (_bindings[v]) return;
        _locals._hasLocals=true;
        if (!_locals[v]) {
          _locals[v]=a?(v+a):v;
        } else if (a) {
          _locals[v]=v+a;
        }
        if (_db) console.log("  added local "+v+" - "+_locals[v]);
      }
      
      function removeLocal(v) {
        if (_db) console.log("removed local "+v);
        delete _locals[v];
      }
      
      function getLocals() { 
        if (!_locals._hasLocals) return ''; 
        var k=[]; 
        for (var i in _locals) if (i!=='_hasLocals') {
          if (i!=_locals[i]) {
            k.push(_locals[i]);
          } else {
            k.unshift(_locals[i]);
          }
        } 
        var finalk=[];
        if (_db) {
          console.log("references");
          console.log(References);
          console.log("locals");
          console.log(_locals);
        }
        for (var i in k) {
          //console.log(k[i]);
          if (!References[k[i]]) finalk.push(k[i]);
        }
        //console.log(finalk);
        var r='var '+finalk.join(',')+';\n'; 
        _locals={};
        return r; 
      }

      function rep(list,val) {
        var j;
        for (var i in list) {
          if (j==val[list[i]]) list[i]=j;
        }
      }
     
      function RV(code,varnames) {
        if (!varnames) varnames={};
        if (!code.replace) {
          code=code.toString();
        }
        var repl=function(key) {
          var val=varnames[key];
          if (undefined===val || null===val || false===val) {
            val=tempvar();
            addLocal(val);
          }
          var re=reCache[key]; if (!re) re=reCache[i]=new RegExp('\\^\\{'+key+'\\}','g');
          //console.log(" -- replace "+key+" with "+val)
          code=code.replace(re,val);
        };
        //console.log("###############################")
        //console.log(code);
        //console.log("........................");
        //console.log(varnames);
        var completed={};
        var precedence=['block','this','key','list','counter'];
        for (var j in precedence) {
          var i=precedence[j];
          if (varnames.hasOwnProperty(i)) {
            //console.log("intercept "+i+" with "+varnames[i]);
            repl(i);
            completed[i]=true;
          }
        }
        for (var i in varnames) {
          if (undefined===completed[i]) {
            repl(i);
          }
        }
        //console.log(code)
        //console.log("---------------------------------")
        return code;
      }
      
      var varnum=0;
      function tempvar() {
        var v="$"+(varnum++);
        return v;
      }
      
      function quoted(v) {
        return "'"+v.replace(/\'/g,"\\\'")+"'";
      }
      
      var accessors = {
        firstfetch: { // [0]+key+[1]
          this: [ '$' , '' ],
          currentthis: [ 'this' , ''],
          local: [ '' , '' ], 
          arguments: [ 'arguments','' ],
          parameters: [ 'p','' ],
          it: [ '^{this}','' ],
          key: [ '^{key}','' ],
          counter: [ '^{counter}','' ],
          trial: [ '^{trial}','' ],
          sum: [ '^{sum}','' ],
          error: [ '^{error}','' ],
          self: [ '^{self}','' ],
          super: [ '^{super}','' ],
          paren: [ '', '' ],
          bound: [ '' , '' ],
          global: [ '' , '' ],
          function: [ '' , '' ],
          literal: ['','']
        },
        nextfetch: { // +[0]+key+[1]
          function: [ '(' , ')' ],
          attribute: [ '.' , '' ], 
          index: [ '[' , ']' ],
        },
        firststore: { //[0]+key+[1]
          function: [ '' , '' ],
          paren: [ '', '' ],
          local: [ '' , ''  ],
          error: [ '^{error}','' ],
          attribute: [ '^{this}.' ,  '' ],
          self: [ '^{self}','' ],
          sum: [ '^{sum}' , '' ],
          property: [ '$["' , '"]' ], 
          parameter: [ 'p["','"]' ],
        },
        laststore: { // +[0]+key+[1]
          attribute: [ '.' , '' ], 
          index: [ '[' , ']'  ],
        }
      };

      function safetyFetch(root,leaf) {
        SafetyFetch=true;
        return '(undefined===($_b=('+root+'))?undefined:($_b'+leaf+'))';
      }

      function ValueCompositor(v,safe) {
        //console.log("Value Compositor...");
        //console.log(v);
        var code='';
        if (v[0][0]=='local') {
          var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
          var binding=options.globals[test];
          if (binding) {
            v[0][0]='bound';
            v[0][1]=binding;
          }
        }
        if (v[0][0]=='local') {
          code+=VarUse(v[0][1]);
        }
        var patternbase=accessors.firstfetch;
        var i=0; while (i<v.length) {
          var pattern=patternbase[v[i][0]]; 
          patternbase=accessors.nextfetch;
          if (!pattern) error("RV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
          var leaf=pattern[0] + v[i][1] + pattern[1];
          if (i>0 && safe) {
            code=safetyFetch(code,leaf);
          } else {
            code=code+leaf;
          }
          i++;
        }
        return code;
      }

      var itselfops = {
        '+': '^{1} += ^{2}' , // test 'self +'
        '-': '^{1} -= ^{2}' , // test 'self -'
        
        '*': '^{1} *= ^{2}' , // test 'self *'
        '/': '^{1} /= ^{2}' , // test 'self /'
        '%': '^{1} %= ^{2}' , // test 'self %'
        '<<': '^{1} <<= ^{2}' , // 
        '>>': '^{1} >>= ^{2}' , // 
        '>>>': '^{1} >>>= ^{2}' , // 
        '**': '^{1} = Math.pow(^{1},^{2})' , // test 'self **'

        xorb: '^{1} ^= ^{2}' , // test 'self xorb'
        andb: '^{1} &= ^{2}' , // test 'self andb'
        orb: '^{1} |= ^{2}' , // test 'self orb'

        and: '^{1} = ^{1} && ^{2}', // test 'self and'
        or: '^{1} = ^{1} || ^{2}', // test 'self or'
        xor: '^{1} = $AI.xor(^{1},^{2})',  // test 'self xor'
        nand: '^{1} = (!((^{1})&&(^{2})))', // test 'self nand'
        nor: '^{1} = (!((^{1})||(^{2})))', // test 'self nor'

        '?>': '^{1} = Math.max(^{1},^{2})', // test 'self ?>'
        '?<': '^{1} = Math.min(^{1},^{2})', // test 'self ?<'
        
        update: '^{1} = $AI.update(^{1},^{2})', // test 'self update'
        delete: '$AI.delete(^{1},^{2})', // test 'self delete*'
        default: 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        concat: '^{1} = $AI.concat(^{1},^{2}, true)', // test 'self concat inplace*'
      };

      var unops={
        '-': '^{1}=-(^{1})' , // test 'self negate'
        'not': '^{1}=!(^{1})', // test 'self not'
        'notb': '^{1}=~(^{1})', // test 'self notb'
        'inc': '^{1}++', // test 'self inc'
        'dec': '^{1}--', // test 'self dec'
        'delete': 'delete ^{1}', // test 'self delete'
        'collect': '^{1} = $AI.collect(^{1})' // test 'self collect*'
      };  

      
      function assembleLiteral(v) {
        var build='';
        var result=[];
        for (var i in v) {
          var c=v[i];
          if (c[0]) {
            build+=c[1];
          } else {
            if (build.length) result.push(quoted(build));
            build='';
            if (!result.length) result.push(quoted(''));
            result.push(c[1]);
          }
        }
        if (build.length) result.push(quoted(build));
        if (!result.length) result=[quoted('')];
        return result.join('+');
      }

      var Lists={};
      function addToList(list,e) {
        var list=Lists[list] || (Lists[list]=[]);
        list.push(e);
      }
      function getList(list) {
        var list=Lists[list] || (Lists[list]=[]);
        if (list.length) {
          return '["'+list.join('","')+'"]';
        } 
        return '[]';
      }
      function clearLists() {
        Lists={};
      }
        
      function GetExpectsTester(x,name) {
        var l =[];
        for (var i in x) {
          var t=x[i][1] || 'true';
          var p='"'+x[i][0][1]+'":'+x[i][1];
          l.push(p);
        }
        return '$AI.expectsThrow(p,{'+l.join(',')+'},'+quoted(name)+');\n';
      }
      
      
      // expects
      // as
      // kind
      // body
      // preface
      // appendix
      function TaskClauseFormatter(o) {
        var params=['p'];
        var expects='',locals=[];//$unused=this';
        if (o.expects && o.as) Error("cannot have both EXPECTS and AS in a function declaration");
        if (o.expects && o.expects.length) {
          expects=GetExpectsTester(o.expects,'in-line');
        } else if (o.as) {
          for (var i in o.as) {
            if (i==0) {
              locals.push(o.as[i][0][1]+'=p');
            } else {
              params.push(o.as[i][0][1]);
            }
          }
        }
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var finallocals=[];
        for (var i in locals) if (!References[locals[i]]) finallocals.push(locals[i]);
        locals=locals.length?('var '+finallocals.join(',')+';'):'';
        var code = o.kind+'('+params.join(',')+'){'+o.preface+FunStart()+locals+expects+'{'+o.block+'}'+FunStop()+o.postface+'}';
        if (o.execute) code+='()';
        return code;
      }

      
      // prefix (v0)
      // name (v1)
      // as (v2)
      // expects (v3)
      // kind 
      // body (k)
      function TaskFormatter(o) {
        
        var fn=(o.prefix?o.prefix+'_':'')+o.name;
        var params='p';
        var paramspec=o.as||[];
        
        for (var i in paramspec) {
          var pname=paramspec[i][0][1];
          if (i==0) {
            addLocal(pname,'=p');
          } else {
            removeLocal(pname);
            params+=','+pname;
          }
        }

        if (SafetyFetch) { addLocal('$_b'); SafetyFetch=false; }
        if (FunctionChain) { addLocal('$_c'); addLocal('$_d'); FunctionChain=false; }
        addLocal('$','=this');
        var head='', tail='';
        var sup=GlobVar();
        if (o.prefix!='get' && o.prefix!='set') {
          addToList('lock',fn);
          head='var '+sup+'=prototype['+fn+'];\n';
          head+='prototype['+fn+']=';
          tail=';\n';
        }
      
        var fun=o.kind+'('+params+') {\n'+FunStart()+getLocals();
        if (o.expects) {
          fun+=GetExpectsTester(o.expects,fn);
        }
        fun+='{'+o.body+'}'+FunStop(); // function body
        fun+='}';
      
        if (o.name) {
          if (fun.indexOf('^{this}')>-1) error("Cannot use unrooted . accessor without a context\n\n"+fun);
        }
        var r=RV(head+fun+tail,{this:false,super:sup});
      
        return r;

      }

      function VerbCat(v) {
    //       console.log("VerbCat");
    //       console.log(v);
         if (v.left) {
           return v.left+v.base+v.right;
    //     } else if (v.call) {
    //       if (test) {
    //         return RV('((undefined===($_c=^{verb}(($_d=^{base}),^{param})))?$_d:$_c)',v);
    //       } else {
    //         return v.verb+'('+v.base+(v.param?(','+v.param):'')+')';
    //       }
         } else {
           if (v.test) {
             return RV('((undefined===($_c=(($_d=^{base})^{verb}(^{param}))))?$_d:$_c)',v);
           } else {
             return v.base+v.verb+'('+v.param+')';
           }
         }
      }
     
      function AssembleVerb(v) {
         if (v.length==1) {
    //       console.log("AV 1");
    //       console.log(v[0]);
           return VerbCat(v[0]);
         }
         FunctionChain=true;
         var base=v[0].base;
         for (var i in v) {
           v[i].base=base;
           v[i].test=true;
           base=VerbCat(v[i]);
         }
         return base;
      }
      
      function EnumCheck(v) {
        var start=1;
        for (var i in v) {
          if (v[i][1]==='enum') {
            v[i][1]=start++;
          } else {
            var n=parseInt(v[i][1],10);
            if (!isNaN(n)) {
              start=n+1;
            }
          }
        }
        return v;
      }
      
      function GlobVar() {
        return '$'+(options.persist.globalcount++)+'g';
      }
      function FunStart() {
        return '';
        //return ' /*:FUNSTART:*/ ';
      }
      function FunStop() {
        return '';
        //return ' /*:FUNSTOP:*/ ';
      }
      function VarUse(v) {
        return '';
        //return [].concat(v).map(function(v) { return ' /*:VAR:'+v+':*/ '});
      }
      function FixVars(code) {
      }

      function MagicCheck(code) {
        var lm=LeakedMagic.exec(code);
        if (lm) error("Magic variable '"+lm[1]+"' used in the wrong place (but I can't tell you where yet, please search for your use of this variable and make sure it is contained within a construct that uses it.)");
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()