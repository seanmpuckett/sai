/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleIndices = { startFile: 0, startExpression: 1 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(r, o) {
              var code='';
              if (r) code+=r;
              code+=o.join('\n')
              MagicCheck(code);
              return code;
            },
          function(code) {
             MagicCheck(code); 
             return code;
           },
          function(v) {
            if (v[0]!='fields') error("REFERENCE requires a trait list.");
            var code='';
            for (var i in v[2]) {
              var r=v[2][i];
              References[lp+r[0]]=true; 
              code+='var '+lp+r[0]+'='+r[1]+';\n'; 
            }
            return code;
          },
          function(k, main, v, s) {
              if (!v) v=quoted('0.0.0-unspecified');
              var code='',isof='';
              var isa=quoted(k);
              addToList('lock','isa')
              addToList('freeze','isof')
              code+='var isa=prototype.isa='+isa+';\n';
              isof+='version:'+v+',';
              isof+='isa:isa,';
              isof+='context:__context,';
              if (main) {
                isof+='main:true,';
              }
              code+='prototype.isof['+isa+']={'+isof+'};\n';
              var l;
              if (l=getList('lock')) code+='prototype.__tobelocked=prototype.__tobelocked.concat('+l+');\n';
              if (l=getList('freeze')) code+='prototype.__tobefrozen=prototype.__tobefrozen.concat('+l+');\n';
              code+=s.join('\n');
              clearLists();
              return code;
            },
          function(v) { return v },
          function(v) {
             var inherit='['+v.join(',')+']';
             var code='prototype.isof[prototype.isa].inherit=prototype.__inherits='+inherit+';\n';
             return code;
            },
          function(v) {
             return 'prototype.__contracts=prototype.__contracts.concat(['+v.join(',')+']);\n';
            },
          function(v, p1, p2) {
             var prop={get: undefined, set: undefined};
             prop[p1[0]]=p1[1];
             if (p2) {
               prop[p2[0]]=p2[1]; 
             }
             var ret='Object.defineProperty(prototype,"'+v+
               '",{configurable:true,enumerable:true,get:'+prop.get+
               ',set:'+prop.set+
               '});\n';
             addToList('lock',v);
             return ret;
          },
          function(g, w, b) { 
             if (!g) g='get'; 
             if (g=='get') w=null; 
             return [g,TaskFormatter({prefix:g,as:w,body:b,kind:'function'})]; 
            },
          function(v, k) {
             v.body=k;
             return TaskFormatter(v);    
            },
          function(v, x, w) { 
             return  {name:"'"+v+"'",expects:x,as:w,kind:'function'};
           },
          function(v, x, w) { 
             return  {name:v,expects:x,as:w,kind:'function*'};
           },
          function(v) { return "Symbol.iterator" },
          function(v) { return "'"+v+"'" },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function'});
          },
          ";",
          peg$literalExpectation(";", false),
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:'return '+b+';',kind:'function'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({expects:x,as:o,block:b,kind:'function*'});
          },
          function(x, o, b) {
            return TaskClauseFormatter({
              expects:x
              ,as:o
              ,block:b
              ,kind:'function'
              ,preface:'return new Promise(function($_resolve,$_reject) {'
              ,postface:'});'
            });
          },
          function(i, t) { return [i[1],t?t:true] },
          function(i) {return i},
          function(is, i) { is.push(i); return is; },
          function(t) { return [[['','_root'],t]] },
          "..",
          peg$literalExpectation("..", false),
          function(v) { return v+';' },
          function(v) { return v.join('') },
          function() { return 'break;\n'; },
          function() { return 'continue;\n' },
          function() { return 'var $=this;\n' },
          function() { return ';' },
          function(s, o, c) {return c},
          function(s, o, c, d) {return d},
          function(s, o, c, d) {
             o=o?o:tempvar();
             addLocal(o);
             var repl={trial:o};
             var r=RV('switch (^{trial}=('+s+')) {\n',repl);
             for (var i in c) {
               for (var j in c[i][0]) {
                 r+='case ('+c[i][0][j]+'): ';
               }
               r+=RV(c[i][1]+' break; \n',repl);
             }
             if (d) r+=RV('default: '+d+' break; \n',repl);
             r+='}\n';
             return r;
           },
          function(e) { return e; },
          function(e, b) { return [e,b]; },
          function(b) { return b; },
          function(p) { // test 'throw'
           return 'throw '+p+';\n' },
          function(t, c) {return c},
          function(t, c, f) {return f},
          function(t, c, f) {
             if (!(c||f)) error("TRY needs a CATCH and/or FINALLY");
             return t+(c?c:'')+(f?f:'');
           },
          function(b) { return 'try {'+b+'}\n'; },
          function(o, b) { 
             o=o?o:tempvar();
             addLocal(o);
             return RV('catch (^{error}) {'+b+'}\n',{error:o}); 
           },
          function(b) { return 'finally {'+b+'}\n' },
          function(i, l) {return l},
          function(i, l, e) {return e},
          function(i, l, e) { return i+l.join('')+(e?e:'') },
          function(c, out, b) { // test 'exists*'
             if (!out) out=tempvar();
             addLocal(out);
             return RV('if (undefined !==(^{this}=(^{condition}))) {\n'+b+'\n}\n',{this:out,condition:c}); 
           },
          function(c, out, b) { // test 'if*'
             if (!out) out=tempvar();
             addLocal(out);
             return RV('if ((^{trial}=(^{condition}))) {\n'+b+'\n}\n',{trial:out,condition:c}); 
           },
          function(c, b) { // test 'unless*'
             return 'if (!('+c+')) {\n'+b+'\n}\n' },
          function(b) { return 'else '+b+'\n' },
          function(b) { return 'else {'+b+'}\n' },
          ",",
          peg$literalExpectation(",", false),
          function(l) { return l },
          function(l, o) {
             l=l||[]; l.push(o);
             var j=[]; for (var i in l) j.push(l[i][0][1]);
             console.log(j);
             console.log(References);
             for (var i in j) if (References[j[i]]) error("Cannot re-define reference variable "+j[i].substr(1)+" as a local."); 
             return 'var '+j.join(',')+';\n';
           },
          function(value, out, block) {
                var r={this:(out?out:tempvar())};
                var code=RV('var ^{this}=',r)+value+RV(';\n'+block+'\n',r);
                return code; 
            },
          function(a, b) {
             return RV('var ^{t1}=^{v1}; var ^{t2}=^{v2}; ^{v2}=^{t1}; ^{v1}=^{t2};',{t1:tempvar(),t2:tempvar(),v1:a,v2:b});
           },
          function(t) { return t },
          function(t) { return t.join(''); },
          function(v) { return v+'++;\n'; },
          function(v) { return v+'--;\n'; },
          function(v) { return 'delete '+v+';\n'; },
          function(t, v) { return v },
          function(t, v) { return v.concat(t) },
          function(v) { return v.reduce(function(a,b){return a.concat(b)}) },
          function(l, o, e) {
             for (var i in l) if (References[l[i]]) error("Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(itselfops[o], {'1':l[i], '2':RV(e,{self:l[i]}) } )+';\n';
             }
             return code;
           },
          function(l, e) {
             for (var i in l) if (References[l[i]]) error("Cannot assign to reference variable "+l[i].substr(1)+"."); 
             if (l.length==1) return l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+=l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             for (var i in l) if (References[l[i]]) error("Cannot assign to reference variable "+l[i].substr(1)+"."); 
             var code='';
             for (var i in l) {
               code+=RV(unops[o],{'1':l[i]})+';\n';
             }
             return code;
           },
          function(l, o, e) {
             var code='';
             for (var i in l) if (References[l[i]]) error("Cannot re-define reference variable "+l[i].substr(1)+" as a local."); 
             for (var i in l) {
               code+='let '+RV(itselfops[o], {'1':l[i], '2':RV(e,{self:l[i]}) } )+';\n';
             }
             return code;
           },
          function(l, e) {
             for (var i in l) if (References[l[i]]) error("Cannot re-define reference variable "+l[i].substr(1)+" as a local."); 
             if (l.length==1) return 'let '+l[0]+'='+RV(e,{self:l[0]})+';\n';
             var code='var $_='+e+';\n';
             for (var i in l) {
               code+='let '+l[i]+'=$_['+i+'];\n';
             }
             return code;
           },
          function(l, o) {
             for (var i in l) if (References[l[i]]) error("Cannot re-define reference variable "+l[i].substr(1)+" as a local."); 
             var code='';
             for (var i in l) {
               code+='let '+RV(unops[o],{'1':l[i]})+';\n';
             }
             return code;
           },
          function() { return 'local '; },
          "-",
          peg$literalExpectation("-", false),
          "+",
          peg$literalExpectation("+", false),
          "**",
          peg$literalExpectation("**", false),
          "*",
          peg$literalExpectation("*", false),
          "/",
          peg$literalExpectation("/", false),
          "%",
          peg$literalExpectation("%", false),
          "<<",
          peg$literalExpectation("<<", false),
          ">>",
          peg$literalExpectation(">>", false),
          ">>>",
          peg$literalExpectation(">>>", false),
          "?>",
          peg$literalExpectation("?>", false),
          "?<",
          peg$literalExpectation("?<", false),
          function(v) { return v+";\n"; },
          function(v) { return '$AI.drain('+v+');\n'; },
          function(k) { return k },
          function(k) { 
             return 'return '+(k?k:'')+';\n' 
            },
          function(r, k) { 
             return r+'('+(k?k:'')+');\n' ;
            },
          function(k) { 
             return 'yield *'+'('+k+');\n' ;
            },
          function(k) { 
             return 'yield '+'('+k+');\n' ;
            },
          function() { return '$_resolve' },
          function() { return '$_reject' },
          function(b) { return '{'+b+'}\n' },
          function(v, o, b, n) {return n},
          function(v, o, b, n) {
             var w={block:b,t1:tempvar(),t2:tempvar(),v:v,none:n,key:(o?o[1]:false),this:(o?o[0]:false)};
             var setup='var ^{t1}=$AI.kviterate(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'if (!^{t2}.done) ';
             var iterate='for (; !^{t2}.done; ^{t2}=^{t1}.next()) { ^{this}=^{t2}.value[1]; ^{key}=^{t2}.value[0]; ^{block}; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, task, n) {return n},
          function(v, task, n) {
             var w={task:task,t1:tempvar(),t2:tempvar(),v:v,none:n,key:tempvar()};
             var setup='var ^{t1}=$AI.kviterate(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'';
             var iterate='while (!^{t2}.done) { ^{task}(^{t2}.value[1],^{t2}.value[0]); ^{t2}=^{t1}.next();}\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, o, b, n) {
             var w={block:b,t1:tempvar(),t2:tempvar(),v:v,none:n,key:(o?o[1]:false),this:(o?o[0]:false)};
             var setup='var ^{t1}=$AI.iterator(^{v}), ^{t2}=^{t1}.next();\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'if (!^{t2}.done) ';
             var iterate='for (var ^{key}=0; !^{t2}.done; ^{t2}=^{t1}.next(), ^{key}++) { ^{this}=^{t2}.value; ^{block}; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, task, n) {
             var w={task:task,t1:tempvar(),t2:tempvar(),v:v,none:n,key:tempvar()};
             var setup='var ^{t1}=$AI.iterator(^{v}), ^{t2}=^{t1}.next(), ^{key}=0;\n';
             var none=n?'if (^{t2}.done) { ^{none} } else \n':'';
             var iterate='while (!^{t2}.done) { ^{task}(^{t2}.value,^{key}); ^{t2}=^{t1}.next(); ^{key}++; }\n';
             return RV(setup+none+iterate,w); 
            },
          function(v, o, b, n) {
               var w={block:b,j:tempvar(),v:v,n:n,k:tempvar(),key:(o?o[1]:false),this:(o?o[0]:false),list:(o?o[2]:false)};
               var setup='var ^{list}=^{v};\nif (undefined===^{list}) ^{list}=[];';
               var iterate='for (var ^{key} in ^{list}) { var ^{this}=^{list}[^{key}];\n^{block}}\n'+(n?'if (undefined===^{key}) { ^{n} }\n':'');
               return RV(setup+iterate,w); 
            },
          function(list, task, n) {return n},
          function(list, task, none) {
               var w={task:task,list:list,j:tempvar(),k:tempvar(),none:none};
               var setup='var ^{j}=^{list};\nif (undefined===^{j}) ^{j}=[]; ';
               var iterate='for (var ^{k} in ^{j}) ^{task}(^{j}[^{k}],^{k},^{j});\n';
               var final=none?'if (^{k}===undefined) { ^{none} }\n':'';
               return RV(setup+iterate+final,w); 
            },
          function(v, o, b, n) {
               var w={block:b,j:tempvar(),v:v,n:n,k:tempvar(),l:tempvar(),key:(o?o[1]:false),this:(o?o[0]:false),list:(o?o[2]:false)};
               var setup='var ^{list}=^{v};\nif (undefined===^{list}) ^{list}=[]; ';
               var iterate='var ^{l}=^{list}.length; if (^{l}) { var ^{this},^{key}=0; for (;^{key}<^{l};^{key}++) { ^{this}=^{list}[^{key}];\n^{block}\n} } '+(n?'else { ^{n} }':'')+'\n';
               return RV(setup+iterate,w); 
            },
          function(list, task, none) {
               var w={task:task,list:list,l:tempvar(),j:tempvar(),k:tempvar(),none:none};
               var setup='var ^{j}=^{list};\nif (undefined===^{j}) ^{j}=[]; var ^{l}=^{j}.length;\n';
               var test=none?'if (!^{l}) ^{none} else ':'';
               var iterate='for (var ^{k}=0; ^{k}<^{l}; ^{k}++) { ^{task}(^{j}[^{k}],^{k},^{j}) };\n';
               return RV(setup+test+iterate,w); 
            },
          function(start, x) {return x},
          function(start, stop, step, out, block, n) {return n},
          function(start, stop, step, out, block, none) { // test 'count to*'
               if (!stop) stop=0;
               var w={start:start,stop:stop,out:out,block:block,none:none,dest:tempvar(),counter:(out?out[0]:false),step:(step?step:'-1')};
               var setup='var ^{counter}=^{start},^{dest}=^{stop};\n ';
               var alternate=none ? 'if (^{counter}<=^{dest}) { ^{none} } else ' : '';
               var iterate='for (^{counter}+=^{step}; ^{counter}>=^{dest}; ^{counter}+=^{step}) { ^{block} }\n';
               return RV(setup+alternate+iterate,w); 
            },
          function(x) { return x },
          function(start, stop, step, out, block, none) { // test 'count to*'
               if (!start) start=0;
               var w={start:start,stop:stop,out:out,block:block,none:none,dest:tempvar(),counter:(out?out[0]:false),step:(step?step:'1')};
               var setup='var ^{counter}=^{start},^{dest}=^{stop};\n ';
               var alternate=none ? 'if (^{counter}>=^{dest}) { ^{none} } else ' : '';
               var iterate='for (; ^{counter}<^{dest}; ^{counter}+=^{step}) { ^{block} }\n';
               return RV(setup+alternate+iterate,w); 
            },
          function(v, o, b) {
              return RV('var ^{this}; while (^{this}=( ^{v})) { ^{block} }\n',{v:v,block:b,this:(o?o[0]:false)});
            },
          function(v, b) {
              return 'while (!('+v+')) { '+b+' }\n';
            },
          function(v, b) {
              return 'do { '+b+' } while ('+v+');\n';
            },
          function(v, b) {
              return 'do { '+b+' } while (!('+v+'));\n';
            },
          function(v, a) { return [v].concat(a) },
          function(v) {
              var j=v.length;
              if (!j) error("Expected something to assign into");
              if (j==1) {
                var pattern=accessors.firststore[v[0][0]];
                if (!pattern) error("Couldn't construct recipient from "+v);
                return pattern[0] + v[0][1] + pattern[1];
              }
              j--;
              var code='';
              var patternbase=accessors.firstfetch;
              var i=0; while (i<j) {
                var pattern=patternbase[v[i][0]]; patternbase=accessors.nextfetch;
                if (!pattern) error("Couldn't construct recipient from "+v);
                code+=pattern[0] + v[i][1] + pattern[1];
                i++;
              }
              var pattern=accessors.laststore[v[j][0]];
              if (!pattern) error("Couldn't construct recipient from "+v);
              code= code+pattern[0]+v[j][1]+pattern[1];
              return code;
            },
          function(v) { return ValueCompositor(v,false) },
          function(v) { return ValueCompositor(v,true) },
          function(v) {
              var verb='',stem='';
              if (v[0][0]=='local') {
                var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
                var binding=options.globals[test];
                if (binding) {
                  v[0][0]='bound';
                  v[0][1]=binding;
                }
              }
              var patternbase=accessors.firstfetch;
              var i=0; while (i<v.length) {
                var pattern=patternbase[v[i][0]]; 
                patternbase=accessors.nextfetch;
                if (!pattern) error("VV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
                stem+=verb;
                verb=pattern[0] + v[i][1] + pattern[1];
          //      console.log("VV"+i+": stem:"+stem+" verb:"+verb);
                i++;
              }
              return [stem,verb];
            },
          function() { return [['super','']]; },
          function(x, y) { 
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
            },
          function(x, y) {
              var stem=x;
              for (var i in y) stem=stem.concat(y[i]);
              return stem 
           },
          function() { return [['it','']] },
          function() { return [['key','']]},
          function() { return [['counter','']]},
          function() { return [['trial','']]},
          function() { return [['sum','']]},
          function() { return [['self','']]},
          function() { return [['error','']]},
          function(v) { return [[ 'attribute', v ]] },
          function(p) { 
             return [[ 'function', p?p[1]:'' ]] 
          },
          function(v) { return [[ 'it', ''],[ 'attribute', v ]] },
          function(v) { return [[ 'it', ''],[ 'index', v ]] },
          function() { return [[ 'it', '']] },
          "[",
          peg$literalExpectation("[", false),
          "]",
          peg$literalExpectation("]", false),
          function(v) { return [[ 'index', v ]] },
          ".",
          peg$literalExpectation(".", false),
          function(v) { return [[ 'paren', v ]] },
          function(v) { 
             if (!options.globals[v]) addLocal(lp+v); 
             return [[ 'local',lp+v ]];
          },
          "$$",
          peg$literalExpectation("$$", false),
          function() { return [['arguments','']]},
          "$",
          peg$literalExpectation("$", false),
          function(v) { return [[ 'parameters','' ],['attribute',v]] },
          function() { return [[ 'parameters','' ]]},
          function(v) { return [['literal',v]]},
          "~",
          peg$literalExpectation("~", false),
          function(v) { return [['global',v]] },
          "@",
          peg$literalExpectation("@", false),
          function(v) { return [['this',''],[ 'attribute',v ]] },
          "@@",
          peg$literalExpectation("@@", false),
          function(v) { return [['currentthis',''],[ 'attribute',v ]] },
          function() { return [['currentthis','']] },
          function() { return [['this','']] },
          function(v) { return [['literal',v]] },
          function(k, v) { 
               addToList('freeze',k);
               return 'prototype["'+k+'"]='+v[1]+';\n';
             },
          function(v) { 
          //    addToList('lock',i);
              var code='';
              code+='var t='+v[1]+';\nfor (var i in t) { prototype.__tobelocked.push(i); prototype[i]=t[i]; };\n'; 
              return code;
            },
          function(v) {
              var ivar=GlobVar(); 
              var proof='var '+ivar+'=function(){ return '+v[1]+'; }\nfor (var i in '+ivar+'()) { prototype[i]="uninitialized instance attribute"; };\n'; 
              //prototype.__ivars=function(){ return '+v[1]+';}\n;\nfor (var i in prototype.__ivars()) { prototype[i]="uninitialized instance attribute"; };\n'; 
              var sup=GlobVar();
              var setup= 'var '+sup+'=prototype.Constructor || function(){};\nprototype.Constructor=function() {\n'+sup+'.call(this);\n  var t='+ivar+'();\n  for (var i in t) this[i]=t[i];\n};\n'; 
              return proof+setup;
            },
          function(maj, min, patch) {
             return "'"+maj+"."+min+"."+patch+"'";
           },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields', '{'+w.join(',')+'}',v] },
          function(v) { return ['array',v.join(','),v] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['fields','{'+w.join(',')+'}',v] },
          function() { return null },
          function(v) { return ['literal',v] },
          function() { return ['literal','[]']; },
          function() { return ['literal','{}']; },
          function(v) { return ['literal','['+v.join(',')+']'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal','{'+w.join(',')+'}'] },
          function(v) { v=EnumCheck(v); var w=[]; for (var i in v) { w[i]=v[i][0]+':'+v[i][1]; } return ['literal', '{'+w.join(',')+'}'] },
          function(v) { return v[1] },
          /^[^\n},);|]/,
          peg$classExpectation(["\n", "}", ",", ")", ";", "|"], true, false),
          "|",
          peg$literalExpectation("|", false),
          ")",
          peg$literalExpectation(")", false),
          function(v) { return quoted(v.join('').trim()) },
          function(v, t) { return v.concat(t) },
          function(k) { return [[k,true]] },
          function(k, v) { return [[k,v]] },
          function(v, t) { 
             var r=[]; 
             for (var i in v) r=r.concat(v[i]); 
             r=r.concat(t);  
             return r; 
          },
          function(v, t) { var r=[]; for (var i in v) r=r.concat(v[i]); r=r.concat(t); return r; },
          function(v) { return v[0][1] },
          function(o) {
             var v=[];
             for (var i in o) v.push(o[i][0][1]);
             return v;
           },
          function(k) {return k},
          function(k, v) { k.push(v); return k; },
          function(v, c) {return c},
          function(v, c) {
             for (var i in c) {
               v=c[i][0]+v+c[i][1];
             }
             return v;
           },
          function() { // test 'sow *'
               return ['$AI.iterate(',')'];
             },
          function() { // test 'keys comp*'
               return ['$AI.keys(',')'];
             },
          function() { // test 'values comp*'
               return ['$AI.values(',')'];
             },
          function(x) {
             return ['$AI.concat(' , ','+x+')' ];
           },
          function() { return ['$AI.collect(',')']; },
          function() { return ['$AI.enlist(',')']; },
          function() { return ['$AI.entrait(',')']; },
          function(o, b) {
              if (!o) o=[lp+'a',lp+'b'];
              var block=RV('function('+o[0]+','+o[1]+'){'+b+'}');
              return ['$AI.sort(' , ','+block+')']; 
            },
          function(x) {
             return ['$AI.sort(' , ','+x+')' ];
            },
          function(x) { // test 'thru inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'}',{this:'$_v',key:'$_k'});
               return ['$AI.map(' , ','+block+' )']; 
            },
          function(o, b) { // test 'thru block'
               var block=RV('function(^{this},^{key}){'+b+'; return ^{this};}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.map(' , ','+block+' )']; 
            },
          function(x) { // test 'thru using'
             return ['$AI.map(' , ','+x+')' ];
            },
          function(x) { // test 'audit inline *'
               var block=RV('function(^{this},^{key}){ '+x+'; }',{this:'$_v',key:'$_k'});
               return ['$AI.audit(' , ','+block+' )']; 
            },
          function(o, b) { // test 'audit block*'
               var block=RV('function(^{this},^{key}){'+b+' }',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.audit(' , ','+block+' )']; 
            },
          function(x) { // test 'audit using*'
             return ['$AI.audit(' , ','+x+')' ];
            },
          function(into, o, b) {
              if (!o) o=[];
              if (!o[0]) o[0]=lp+'sum'; 
              if (!o[1]) o[1]='$_v';
              if (!o[2]) o[2]='$_k';
              b+='return ^{sum};\n';
              var block=RV('function(^{sum},^{this},^{key}){'+b+'}',{sum:o[0],this:o[1],key:o[2]});
              if (into=='it') {
                return ['$AI.reduce(' , ','+block+')' ];
              } else {
                return ['$AI.reduce(' , ','+block+','+into+')' ];
              }
            },
          function(into, b) {
              var block=RV('function(^{sum},^{this},^{key}){ return '+b+';}',{sum:lp+'sum',this:'$_v',key:'$_k'});
              if (into=='it') {
                return ['$AI.reduce(' , ','+block+')' ];
              } else {
                return ['$AI.reduce(' , ','+block+','+into+')' ];
              }
            },
          function(into, x) {
              if (into=='it') {
                return ['$AI.reduce(' , ','+x+')' ];
              } else {
                return ['$AI.reduce(' , ','+x+','+into+')' ];
              }
            },
          function(x) { // test 'filter inline *'
               var block=RV('function(^{this},^{key}){ return '+x+'; }',{this:'$_v',key:'$_k'});
               //console.log("filter comp exp");
               return ['$AI.filter(' , ','+block+' )']; 
            },
          function(o, b) {
               var block=RV('function(^{this},^{key}){'+b+'}',{this:o?o[0]:'$_v',key:o?o[1]:'$_k'});
               return ['$AI.filter(' , ','+block+')']; 
            },
          function(x) {
              return ['$AI.filter(' , ','+x+')' ];
            },
          function(x) { // test 'alter inline*'
               var block=RV('function(^{this}){ return '+x+'; }',{this:'$_v'});
               return [ '$AI.alter(' , ','+block+')']; 
            },
          function(o, b) { // test 'alter block*'
               var block=RV('function(^{this}){'+b+'; return ^{this}; }',{this:o?o[0]:'$_v'});
               return [ '$AI.alter(' , ','+block+')']; 
            },
          function(x) { // test 'alter using'
               return [ '$AI.alter(' , ','+x+')']; 
            },
          function(x) { // test 'observe inline'
               var block=RV('function(^{this}){ '+x+'; }',{this:'$_v'});
               return [ '$AI.observe(' , ','+block+')']; 
            },
          function(o, b) { // test 'observe block'
               var block=RV('function(^{this}){'+b+'; }',{this:o?o[0]:'$_v'});
               return [ '$AI.observe(' , ','+block+')']; 
            },
          function(x) { // test 'observe using'
               return [ '$AI.observe(' , ','+x+')']; 
            },
          function(q) {
             var code='({<>})';
             q=[].concat(q);
             var expr={quality:[],having:[],by:[],map:[],limit:[]};
             for (var i in q) { 
               for (var j=0; j<q[i].length; j+=2) {
                 expr[q[i][j]].push(q[i][j+1]); 
               }
             }
             var conds=[];
             if (expr.quality.length) {
               for (var i in expr.quality) { 
                 conds.push(expr.quality[i]); 
                }
             }
             if (expr.having.length) {
               var conds=conds.concat(expr.having.map(function(c){ return '('+c+')';}));
             }
             if (conds.length) {
               code=RV('$AI.filter(^{source},function($_v,$_k){ return ^{block}; })',{source:code,block:conds.join(' && '),this:'$_v',key:'$_k'});
             }
             if (expr.limit.length && expr.limit[0].extract && expr.by.length) { // first/last singleton with a sort
               code='$AI.reduce('+code+',function(a,b) { if (undefined===a) return b; var r; ';
               expr.by[0][1]*=expr.limit[0].sort; // flip sort if looking for "last"
               var conds=expr.by.map(function(c){
                 c[0]=c[0]||'^{this}';
                 var x1=RV(c[0],{this:'a'});
                 var x2=RV(c[0],{this:'b'});
                 return RV('r=$AI.compare(^{x1},^{x2}); if (r<0) return ^{lt}; if (r>0) return ^{gt};\n',{x1:x1,x2:x2,lt:(c[1]>0?'a':'b'),gt:(c[1]>0?'b':'a')});
               });
               code+=conds.join(' ')+'return a; },undefined)';     
             } else {
               if (expr.by.length) {
                 code='$AI.sort('+code+',function(a,b) { var aa,bb; ';
                 var conds=expr.by.map(function(c){
                   c[0]=c[0]||'^{this}';
                   var x1=RV('aa='+c[0]+'; ',{this:'a'});
                   var x2=RV('bb='+c[0]+'; ',{this:'b'});
                   return x1+x2+RV('if (aa<bb) return ^{lt}; if (aa>bb) return ^{gt}; ',{c:c[0],lt:-c[1],gt:c[1]});
                 });
                 code+=conds.join(' ')+'return 0; })';
               }
               if (expr.limit.length) {
                 var l=expr.limit[0];
                 if (l.slice) {
                   code='$AI.slice('+code+','+l.start+','+l.len+')';
                 }
                 if (l.extract) { 
                   code='$AI.element('+code+',0)';
                 }
                 if (l.count) {
                   code='$AI.count('+code+')';
                 }
               }
             } 
             return code.split('{<>}');
           },
          function() { return ['limit',{extract:true,sort:1}]; },
          function() { return ['limit',{extract:true,slice:true,start:-1}]; },
          function(s, c) { return ['limit',{slice:true,start:s,len:c}]; },
          function(s) { return ['limit',{slice:true,start:undefined,len:s}]; },
          function() { return ['limit',{count:true}]; },
          function(v) { return ['quality', '^{this}["'+v+'"]'] },
          function(v) { return ['quality', '(!^{this}["'+v+'"])'] },
          function(v) { return ['having',v] },
          function(d) { return ['by',[null,d?d:1]] },
          function(v, d) { return ['by',[v,d?d:1]] },
          function(v) { return ['by',[v,-1],'limit',{extract:true,sort:1}]},
          function(v) { return ['by',[v,1],'limit',{extract:true,sort:1}]},
          function() { return 1 },
          function() { return -1 },
          function(l, o, r) { return '('+l+o+r+')' },
          function(c, l) { return '($AI.xor('+c+','+l+'))' },
          function(l, f) { return '(!('+l+' && '+f+'))' },
          function(l, f) { return '(!('+l+' || '+f+'))' },
          "??",
          peg$literalExpectation("??", false),
          "::",
          peg$literalExpectation("::", false),
          function(c, l, r) { 
               return RV('((^{c})?(^{l}):(^{r}))',{c:c,l:l,r:r}); 
             },
          function(c, v) {  // test 'default*'
               SafetyFetch=true; 
               return RV('((undefined!==($_b=^{c}))?$_b:^{v})',{c:c,v:v}); 
             },
          function() { return '&&' },
          function() { return '||' },
          function(l, o, r) { return o+'('+l+','+r+')' },
          ">=",
          peg$literalExpectation(">=", false),
          function() { return '>=' },
          ">",
          peg$literalExpectation(">", false),
          function() { return '>' },
          "=",
          peg$literalExpectation("=", false),
          function() { return '==' },
          function() { return '!==' },
          function() { return '===' },
          "<=",
          peg$literalExpectation("<=", false),
          function() { return '<=' },
          "<",
          peg$literalExpectation("<", false),
          function() { return '<' },
          "!=",
          peg$literalExpectation("!=", false),
          function() { return '!=' },
          function() { return '$AI.max' },
          function() { return '$AI.min' },
          "<=>",
          peg$literalExpectation("<=>", false),
          function() { return '$AI.compare' },
          function() {return '|' },
          function() {return '&'},
          function() { return '^'},
          function(l, r) { // test '**'
             return 'Math.pow('+l+','+r+')' 
           },
          function(l, op, x) {
             var p=undefined;
             if (x) {
               p=x[1];
             }
             return '('+op+').call(this,('+l+'),'+p+')';
           },
          function(l, r) { // test 'overlay *'
             return '$AI.overlay('+l+','+r+')' 
           },
          function(l, r) { // test 'select *'
             return '$AI.select('+l+','+r+')' 
           },
          function(l, r) { // test 'delete *'
             return '$AI.delete($AI.clone('+l+'),'+r+')' 
           },
          function(l, r) { 
             return '$AI.expects('+l+','+r+')' 
           },
          function(l, r) { 
             return '('+l+').isof['+r+']'; 
           },
          function(v) { return '(0-('+v+'))' },
          function(v) { return '(~('+v+'))' },
          function(v) { return '(!('+v+'))' },
          function(v) { return 'typeof ('+v+')'; },
          function(v) { return 'isNaN('+v+')'; },
          function(v) { return '($AI.number('+v+'))'; },
          function(v) { return '(undefined!=='+v+')' },
          function(v) { return '$AI.clone('+v+')'; },
          function(v) { return 'yield *'+v; },
          function(v) { return 'yield'+v; },
          "?",
          peg$literalExpectation("?", false),
          function(o) { return o },
          "(",
          peg$literalExpectation("(", false),
          function(v, o) { 
             if (o) {
               addLocal(o);
               return RV('(^{out}='+v+')',{out:o}); 
             } else {
               return '('+v+')'; 
             }
            },
          /^[igm]/,
          peg$classExpectation(["i", "g", "m"], false, false),
          function(x, m) {
             var re= '/'+x.join('')+'/'+m.join('');
             return re;
           },
          "\\/",
          peg$literalExpectation("\\/", false),
          /^[^\n\r\/]/,
          peg$classExpectation(["\n", "\r", "/"], true, false),
          /^[.([|]/,
          peg$classExpectation([".", "(", "[", "|"], false, false),
          function(v) { return v; },
          /^[a-zA-Z_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
          /^[a-zA-Z_0-9]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], "_", ["0", "9"]], false, false),
          function(v1, v2) { return v1+v2.join('') },
          /^[a-zA-Z]/,
          peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
          function() { return 'NaN' },
          function() { return 'Infinity' },
          function() { return 'it' },
          function(v) {
             return AssembleVerb(v);
           },
          function(v, o) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$'+(o?(','+o[1]):'') }]; 
               return [{ base:v[0], verb:v[1], param:(o?o[1]:'') }]
            },
          function(v) { 
               var composite=v[0]+v[1];
               if (composite=='^{super}') return [{ base:'^{super}', verb:'.call', param:'$' }]; 
               return [{ base:v[0], verb:v[1], param:'' }]
             },
          function(v, c) {
             c[0].base=v;
             return AssembleVerb(c);
           },
          function(l) { 
               return l ;
             },
          function(c) {
               return {left:c[0], right: c[1]}
            },
          function(i, o) {
               return {verb:'.'+i, param:(o?o[1]:''), test:true}; 
            },
          function(v, o) { 
             return '$AI.create('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) { 
             return '$AI.singleton('+v+',['+(o?o[1]:'undefined')+'])'; 
           },
          function(v, o) {
             return 'new '+v+'('+(o?o[1]:'')+')'; 
           },
          /^[a-zA-Z0-9_\/]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "/"], false, false),
          function(n) { return n.join('') },
          "o",
          peg$literalExpectation("o", false),
          function(v) { return v*(Math.PI/180) },
          "e",
          peg$literalExpectation("e", false),
          function(r, x) { return r+'e'+x },
          function(w, f) { return Number(w+'.'+f) },
          function(v) { return -v },
          /^[0-9]/,
          peg$classExpectation([["0", "9"]], false, false),
          function(v) { return parseInt(v.join('')) },
          "'",
          peg$literalExpectation("'", false),
          function(v) { return assembleLiteral(v) },
          "\"",
          peg$literalExpectation("\"", false),
          "`",
          peg$literalExpectation("`", false),
          /^[^'\n]/,
          peg$classExpectation(["'", "\n"], true, false),
          function(v) { return [true,v] },
          /^[^"\n]/,
          peg$classExpectation(["\"", "\n"], true, false),
          "'''",
          peg$literalExpectation("'''", false),
          function(v) { return v},
          function(v) { return v.join("+'\\n'+") },
          /^[^\n}]/,
          peg$classExpectation(["\n", "}"], true, false),
          "\\",
          peg$literalExpectation("\\", false),
          function() { return [true,'\\'+"'"] },
          function() { return [true,'\\'+'"'] },
          function() { return [true,'\\'+'$'] },
          "\\&#123;",
          peg$literalExpectation("\\&#123;", false),
          function() { return [true,'\\'+'&#123;'] },
          "\\&#125;",
          peg$literalExpectation("\\&#125;", false),
          function() { return [true,'\\'+'&#125;'] },
          "n",
          peg$literalExpectation("n", false),
          function() { return [true,'\\'+'n'] },
          "r",
          peg$literalExpectation("r", false),
          function() { return [true,'\\'+'r'] },
          "t",
          peg$literalExpectation("t", false),
          function() { return [true,'\\'+'t'] },
          "b",
          peg$literalExpectation("b", false),
          function() { return [true,'\\'+'b'] },
          "f",
          peg$literalExpectation("f", false),
          function() { return [true,'\\'+'f'] },
          "x",
          peg$literalExpectation("x", false),
          /^[0-9a-fA-F]/,
          peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
          function(a, b) { return [true,'\\'+'x'+a+b ] },
          "u",
          peg$literalExpectation("u", false),
          function(a, b, c, d) { return [true,'\\'+'u'+a+b+c+d] },
          "{",
          peg$literalExpectation("{", false),
          "}",
          peg$literalExpectation("}", false),
          function(a) { return [true,'\\'+'u{'+a.join('')+'}' ] },
          "${",
          peg$literalExpectation("${", false),
          function(v) { return [false,v] },
          /^[^a-zA-Z0-9_]/,
          peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], true, false),
          "...",
          peg$literalExpectation("...", false),
          /^[ ]/,
          peg$classExpectation([" "], false, false),
          "//",
          peg$literalExpectation("//", false),
          /^[^\r\n]/,
          peg$classExpectation(["\r", "\n"], true, false),
          /^[\n\r]/,
          peg$classExpectation(["\n", "\r"], false, false),
          "__source",
          peg$literalExpectation("__source", false),
          "__offset",
          peg$literalExpectation("__offset", false),
          "__column",
          peg$literalExpectation("__column", false),
          "__line",
          peg$literalExpectation("__line", false),
          "and",
          peg$literalExpectation("and", false),
          "andb",
          peg$literalExpectation("andb", false),
          "array",
          peg$literalExpectation("array", false),
          "as",
          peg$literalExpectation("as", false),
          "asc",
          peg$literalExpectation("asc", false),
          "ascending",
          peg$literalExpectation("ascending", false),
          "audit",
          peg$literalExpectation("audit", false),
          "blank",
          peg$literalExpectation("blank", false),
          "break",
          peg$literalExpectation("break", false),
          "by",
          peg$literalExpectation("by", false),
          "case",
          peg$literalExpectation("case", false),
          "catch",
          peg$literalExpectation("catch", false),
          "chain",
          peg$literalExpectation("chain", false),
          "collect",
          peg$literalExpectation("collect", false),
          "copy",
          peg$literalExpectation("copy", false),
          "concat",
          peg$literalExpectation("concat", false),
          "continue",
          peg$literalExpectation("continue", false),
          "contract",
          peg$literalExpectation("contract", false),
          "count",
          peg$literalExpectation("count", false),
          "counter",
          peg$literalExpectation("counter", false),
          "create",
          peg$literalExpectation("create", false),
          "dec",
          peg$literalExpectation("dec", false),
          "default",
          peg$literalExpectation("default", false),
          "delete",
          peg$literalExpectation("delete", false),
          "desc",
          peg$literalExpectation("desc", false),
          "descending",
          peg$literalExpectation("descending", false),
          "do",
          peg$literalExpectation("do", false),
          "down",
          peg$literalExpectation("down", false),
          "each",
          peg$literalExpectation("each", false),
          "else",
          peg$literalExpectation("else", false),
          "empty",
          peg$literalExpectation("empty", false),
          "enum",
          peg$literalExpectation("enum", false),
          "enlist",
          peg$literalExpectation("enlist", false),
          "entrait",
          peg$literalExpectation("entrait", false),
          "error",
          peg$literalExpectation("error", false),
          "every",
          peg$literalExpectation("every", false),
          "exists",
          peg$literalExpectation("exists", false),
          "expects",
          peg$literalExpectation("expects", false),
          "finally",
          peg$literalExpectation("finally", false),
          "fields",
          peg$literalExpectation("fields", false),
          "first",
          peg$literalExpectation("first", false),
          "from",
          peg$literalExpectation("from", false),
          "get",
          peg$literalExpectation("get", false),
          "given",
          peg$literalExpectation("given", false),
          "has",
          peg$literalExpectation("has", false),
          "highest",
          peg$literalExpectation("highest", false),
          "if",
          peg$literalExpectation("if", false),
          "Infinity",
          peg$literalExpectation("Infinity", false),
          "instance",
          peg$literalExpectation("instance", false),
          "into",
          peg$literalExpectation("into", false),
          "inc",
          peg$literalExpectation("inc", false),
          "inherit",
          peg$literalExpectation("inherit", false),
          "isnt",
          peg$literalExpectation("isnt", false),
          "isNaN",
          peg$literalExpectation("isNaN", false),
          "is",
          peg$literalExpectation("is", false),
          "isof",
          peg$literalExpectation("isof", false),
          "iterate",
          peg$literalExpectation("iterate", false),
          "Iterator",
          peg$literalExpectation("Iterator", false),
          "it",
          peg$literalExpectation("it", false),
          "keys",
          peg$literalExpectation("keys", false),
          "key",
          peg$literalExpectation("key", false),
          "last",
          peg$literalExpectation("last", false),
          "limit",
          peg$literalExpectation("limit", false),
          "list",
          peg$literalExpectation("list", false),
          "local",
          peg$literalExpectation("local", false),
          "lowest",
          peg$literalExpectation("lowest", false),
          "main",
          peg$literalExpectation("main", false),
          "NaN",
          peg$literalExpectation("NaN", false),
          "nand",
          peg$literalExpectation("nand", false),
          "new",
          peg$literalExpectation("new", false),
          "nop",
          peg$literalExpectation("nop", false),
          "nor",
          peg$literalExpectation("nor", false),
          "not",
          peg$literalExpectation("not", false),
          "notb",
          peg$literalExpectation("notb", false),
          "number",
          peg$literalExpectation("number", false),
          "null",
          peg$literalExpectation("null", false),
          "object",
          peg$literalExpectation("object", false),
          "observe",
          peg$literalExpectation("observe", false),
          "orphan",
          peg$literalExpectation("orphan", false),
          "or",
          peg$literalExpectation("or", false),
          "orb",
          peg$literalExpectation("orb", false),
          "overlay",
          peg$literalExpectation("overlay", false),
          "true",
          peg$literalExpectation("true", false),
          "false",
          peg$literalExpectation("false", false),
          "ply",
          peg$literalExpectation("ply", false),
          "promise",
          peg$literalExpectation("promise", false),
          "process",
          peg$literalExpectation("process", false),
          "resolve",
          peg$literalExpectation("resolve", false),
          "reject",
          peg$literalExpectation("reject", false),
          "reference",
          peg$literalExpectation("reference", false),
          "return",
          peg$literalExpectation("return", false),
          "select",
          peg$literalExpectation("select", false),
          "self",
          peg$literalExpectation("self", false),
          "set",
          peg$literalExpectation("set", false),
          "singleton",
          peg$literalExpectation("singleton", false),
          "step",
          peg$literalExpectation("step", false),
          "sum",
          peg$literalExpectation("sum", false),
          "swap",
          peg$literalExpectation("swap", false),
          "super",
          peg$literalExpectation("super", false),
          "switch",
          peg$literalExpectation("switch", false),
          "task",
          peg$literalExpectation("task", false),
          "throw",
          peg$literalExpectation("throw", false),
          "thru",
          peg$literalExpectation("thru", false),
          "traits",
          peg$literalExpectation("traits", false),
          "trial",
          peg$literalExpectation("trial", false),
          "try",
          peg$literalExpectation("try", false),
          "to",
          peg$literalExpectation("to", false),
          "typeof",
          peg$literalExpectation("typeof", false),
          "unless",
          peg$literalExpectation("unless", false),
          "until",
          peg$literalExpectation("until", false),
          "undefined",
          peg$literalExpectation("undefined", false),
          "update",
          peg$literalExpectation("update", false),
          "using",
          peg$literalExpectation("using", false),
          "values",
          peg$literalExpectation("values", false),
          "via",
          peg$literalExpectation("via", false),
          "while",
          peg$literalExpectation("while", false),
          "with",
          peg$literalExpectation("with", false),
          "xor",
          peg$literalExpectation("xor", false),
          "xorb",
          peg$literalExpectation("xorb", false),
          "yielding",
          peg$literalExpectation("yielding", false),
          "yield",
          peg$literalExpectation("yield", false),
          "!",
          peg$literalExpectation("!", false),
          "#",
          peg$literalExpectation("#", false),
          ":",
          peg$literalExpectation(":", false),
          function() { return ':' }
        ],

        peg$bytecode = [
          peg$decode("%;\xDE/M#;\".\" &\"/?$$;#/&#0#*;#&&&#/)$8#: #\"! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/1#;\xDF/($8\":!\"!!)(\"'#&'#"),
          peg$decode("%;\u0143/C#;\xDC/:$;x/1$;\xDF/($8$:\"$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0136/\x93#;\xDC/\x8A$;\xBD/\x81$;\xDC/x$;\u012C.\" &\"/j$;\xDC/a$;w.\" &\"/S$;\xDC/J$;\xDF/A$$;$/&#0#*;$&&&#/+$8*:#*$'%# )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;%.5 &;&./ &;'.) &;).# &;v/' 8!:$!! ).# &;\xDF"),
          peg$decode("%;\u011D/C#;\xDC/:$;{/1$;\xDF/($8$:%$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xFB/C#;\xDC/:$;{/1$;\xDF/($8$:&$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xBD/A#;(/8$;(.\" &\"/*$8#:'##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\xDC/k#;\u0114.# &;\u0147/\\$;\xDC/S$;\x92.\" &\"/E$;\xDC/<$;1/3$;\xDF/*$8':('#%#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;*/;#;1/2$;\xDF/)$8#:)#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;\xBD/\x8A#;\xDC/\x81$;\u0154.\" &\"/s$;\xDC/j$;\u014E/a$;\xDC/X$;0.\" &\"/J$;\xDC/A$;\x92.\" &\"/3$;\xDC/*$8*:**#)#!)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\x94 &%;+/\x8A#;\xDC/\x81$;\u0154.\" &\"/s$;\xDC/j$;\u0140/a$;\xDC/X$;0.\" &\"/J$;\xDC/A$;\x92.\" &\"/3$;\xDC/*$8*:+*#)#!)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0123/' 8!:,!! )./ &%;\xBD/' 8!:-!! )"),
          peg$decode("%;0.\" &\"/S#;\xDC/J$;\x92.\" &\"/<$;\xDC/3$;1/*$8%:.%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;0.\" &\"/p#;\xDC/g$;\x92.\" &\"/Y$;\xDC/P$2/\"\"6/70.\" &\"/<$;\xDC/3$;\x93/*$8':1'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;0.\" &\"/S#;\xDC/J$;\x92.\" &\"/<$;\xDC/3$;1/*$8%:2%#$\" )(%'#($'#(#'#(\"'#&'#.\x7F &%;0.\" &\"/p#;\xDC/g$;\x92.\" &\"/Y$;\xDC/P$2/\"\"6/70.\" &\"/<$;\xDC/3$;\x93/*$8':2'#&$ )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;0.\" &\"/S#;\xDC/J$;\x92.\" &\"/<$;\xDC/3$;1/*$8%:3%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;q/I#;\xDC/@$;|.\" &\"/2$;\xDC/)$8$:4$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u010F/\x8D#;\xDC/\x84$$%;//:#;\u0167/1$;\xDC/($8#:5#!\")(#'#(\"'#&'#0D*%;//:#;\u0167/1$;\xDC/($8#:5#!\")(#'#(\"'#&'#&/2$;//)$8$:6$\"! )($'#(#'#(\"'#&'#.M &%;\u010F/C#;\xDC/:$;|/1$;\xDC/($8$:7$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xDC/U#;\xDF/L$;\u0169/C$;\xDF/:$;2/1$;\u016A/($8&:$&!!)(&'#(%'#($'#(#'#(\"'#&'#.h &%;\xDC/^#28\"\"6879/O$;\xDC/F$;4/=$%<;\xDF=/##&'!&&#/($8%::%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;3/&#0#*;3&&&#/' 8!:;!! )"),
          peg$decode("%;4/1#;\xDF/($8\":$\"!!)(\"'#&'#"),
          peg$decode(";?.Y &;F.S &;S.M &;V.G &;D.A &;6.; &;;.5 &;:./ &;E.) &;5.# &;R"),
          peg$decode("%;\xF2/0#;\xDC/'$8\":<\" )(\"'#&'#.t &%;\xFA/0#;\xDC/'$8\":=\" )(\"'#&'#.W &%;\u0138/0#;\xDC/'$8\":>\" )(\"'#&'#.: &%;\u0130/0#;\xDC/'$8\":?\" )(\"'#&'#"),
          peg$decode("%;7/\xD0#;\x90.\" &\"/\xC2$;\xDF/\xB9$;\u0169/\xB0$$%;\xDF/3#;8/*$8\":@\"#'& )(\"'#&'#/@#0=*%;\xDF/3#;8/*$8\":@\"#'& )(\"'#&'#&&&#/f$%;\xDF/4#;9/+$8\":A\"$'&# )(\"'#&'#.\" &\"/=$;\xDF/4$;\u016A/+$8(:B($'&#\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u014D/:#;\xDB/1$;\x93/($8#:C#! )(#'#(\"'#&'#"),
          peg$decode("%;\xF4/M#;\xDB/D$;\x83/;$;\xDC/2$;1/)$8%:D%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0100/:#;\xDB/1$;1/($8#:E#! )(#'#(\"'#&'#"),
          peg$decode("%;\u014F/:#;\xDC/1$;\x93/($8#:F#! )(#'#(\"'#&'#"),
          peg$decode("%;</y#%;\xDF/2#;=/)$8\":G\"\"# )(\"'#&'#.\" &\"/R$%;\xDF/3#;>/*$8\":H\"#$# )(\"'#&'#.\" &\"/*$8#:I##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\u0153/:#;\xDC/1$;1/($8#:J#! )(#'#(\"'#&'#"),
          peg$decode("%;\xF5/R#;\xDC/I$;\x90.\" &\"/;$;\xDC/2$;1/)$8%:K%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0110/:#;\xDC/1$;1/($8#:L#! )(#'#(\"'#&'#"),
          peg$decode("%;@/\x94#$%;\xDF/2#;A/)$8\":M\"\"$ )(\"'#&'#0<*%;\xDF/2#;A/)$8\":M\"\"$ )(\"'#&'#&/R$%;\xDF/3#;B/*$8\":N\"#$# )(\"'#&'#.\" &\"/*$8#:O##\"! )(#'#(\"'#&'#"),
          peg$decode("%;\u010E/S#;\xDC/J$;\x93/A$;\x90.\" &\"/3$;1/*$8%:P%#\"! )(%'#($'#(#'#(\"'#&'#.\x8E &%;\u0118/S#;\xDC/J$;\x93/A$;\x90.\" &\"/3$;1/*$8%:Q%#\"! )(%'#($'#(#'#(\"'#&'#.N &%;\u0156/D#;\xDC/;$;\x93/2$;1/)$8$:R$\"! )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0107/:#;\xDC/1$;@/($8#:S#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0107/:#;\xDC/1$;1/($8#:T#! )(#'#(\"'#&'#"),
          peg$decode("%;\u012A/\xB4#;\xDC/\xAB$$%;p/I#;\xDC/@$2U\"\"6U7V/1$;\xDC/($8$:W$!#)($'#(#'#(\"'#&'#0S*%;p/I#;\xDC/@$2U\"\"6U7V/1$;\xDC/($8$:W$!#)($'#(#'#(\"'#&'#&/;$;p/2$;\xDC/)$8%:X%\"\"!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u015E/S#;\xDB/J$;\x93/A$;\x90.\" &\"/3$;1/*$8%:Y%#\"! )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u014B/M#;\xDB/D$;Z/;$;\xDB/2$;Z/)$8%:Z%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0147/:#;\xDB/1$;G/($8#:[#! )(#'#(\"'#&'#.\u016A &%;\u0147/^#;\xDB/U$;\xDF/L$;\u0169/C$;\xDF/:$;I/1$;\u016A/($8':\\'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u011F &%;\u012A/:#;\xDB/1$;K/($8#:[#! )(#'#(\"'#&'#.\xF8 &%;\u012A/^#;\xDB/U$;\xDF/L$;\u0169/C$;\xDF/:$;M/1$;\u016A/($8':\\'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xAD &%;\u011C/C#;\xDB/:$;Z/1$;\xDC/($8$:]$!!)($'#(#'#(\"'#&'#.} &%;\xFF/C#;\xDB/:$;Z/1$;\xDC/($8$:^$!!)($'#(#'#(\"'#&'#.M &%;\u0101/C#;\xDB/:$;^/1$;\xDC/($8$:_$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;J/\xA4#;\xDC/\x9B$$%2U\"\"6U7V/D#;\xDC/;$;J/2$;\xDC/)$8$:`$\"'!)($'#(#'#(\"'#&'#0T*%2U\"\"6U7V/D#;\xDC/;$;J/2$;\xDC/)$8$:`$\"'!)($'#(#'#(\"'#&'#&/)$8#:a#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;G/1#;\xDF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;H/&#0#*;H&&&#/' 8!:b!! )"),
          peg$decode("%;[/N#;\xDC/E$;Q/<$;\xDC/3$;\x93/*$8%:c%#$\" )(%'#($'#(#'#(\"'#&'#.\xA8 &%;X/v#;\xDC/m$;\u0154.\" &\".A &%<;\u0113=/##&'!&&#./ &%<;\xF6=/##&'!&&#/;$;\xDC/2$;\x93/)$8%:d%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;[/;#;\xDC/2$;P/)$8#:e#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;N/\xA4#;\xDC/\x9B$$%2U\"\"6U7V/D#;\xDC/;$;N/2$;\xDC/)$8$:`$\"'!)($'#(#'#(\"'#&'#0T*%2U\"\"6U7V/D#;\xDC/;$;N/2$;\xDC/)$8$:`$\"'!)($'#(#'#(\"'#&'#&/)$8#:a#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;K/1#;\xDF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;L/&#0#*;L&&&#/' 8!:b!! )"),
          peg$decode("%;[/N#;\xDC/E$;Q/<$;\xDC/3$;\x93/*$8%:f%#$\" )(%'#($'#(#'#(\"'#&'#.\xA8 &%;X/v#;\xDC/m$;\u0154.\" &\".A &%<;\u0113=/##&'!&&#./ &%<;\xF6=/##&'!&&#/;$;\xDC/2$;\x93/)$8%:g%\"$ )(%'#($'#(#'#(\"'#&'#.E &%;[/;#;\xDC/2$;P/)$8#:h#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\u012A/0#;\xDB/'$8\":i\" )(\"'#&'#"),
          peg$decode("2j\"\"6j7k.; &;\u011C.5 &;\xFF./ &;\u0101.) &;\u0133.# &;\u0132"),
          peg$decode("2l\"\"6l7m.\xE3 &2j\"\"6j7k.\xD7 &2n\"\"6n7o.\xCB &2p\"\"6p7q.\xBF &2r\"\"6r7s.\xB3 &2t\"\"6t7u.\xA7 &2v\"\"6v7w.\x9B &2x\"\"6x7y.\x8F &2z\"\"6z7{.\x83 &;\xEB.} &;\u013A.w &;\u0160.q &;\xEA.k &;\u0139.e &;\u015F._ &;\u012E.Y &;\u0131.S &2|\"\"6|7}.G &2~\"\"6~7\x7F.; &;\u0159.5 &;\u0150./ &;\u0101.) &;\u0100.# &;\xF9"),
          peg$decode("%;\xC2/' 8!:\x80!! )./ &%;\xC4/' 8!:\x81!! )"),
          peg$decode("%;\u0144/N#%;\xDB/1#;\x93/($8\":\x82\"! )(\"'#&'#.\" &\"/($8\":\x83\"! )(\"'#&'#.\x98 &%;T/@#;\xDB/7$;\x93.\" &\"/)$8#:\x84#\"\" )(#'#(\"'#&'#.k &%;\u0161/:#;\xDB/1$;\x93/($8#:\x85#! )(#'#(\"'#&'#.D &%;\u0162/:#;\xDB/1$;\x93/($8#:\x86#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0141/& 8!:\x87! ).. &%;\u0142/& 8!:\x88! )"),
          peg$decode("%;\u0107/:#;\xDB/1$;1/($8#:\x89#! )(#'#(\"'#&'#"),
          peg$decode("%;\u010D/}#;\xDB/t$;\x93/k$;\x91.\" &\"/]$;1/T$%;\xDF/4#;U/+$8\":\x8A\"$%$# )(\"'#&'#.\" &\"/+$8&:\x8B&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u0598 &%;\u010D/\x88#;\xDB/\x7F$;\x93/v$;\xDC/m$;\u015A/d$;\xDB/[$;\xB8/R$%;\xDF/3#;U/*$8\":\x8C\"#'# )(\"'#&'#.\" &\"/*$8(:\x8D(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0523 &%;\u0122/}#;\xDB/t$;\x93/k$;\x91.\" &\"/]$;1/T$%;\xDF/4#;U/+$8\":\x8A\"$%$# )(\"'#&'#.\" &\"/+$8&:\x8E&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u04B9 &%;\u0122/\x88#;\xDB/\x7F$;\x93/v$;\xDC/m$;\u015A/d$;\xDB/[$;\xB8/R$%;\xDF/3#;U/*$8\":\x8C\"#'# )(\"'#&'#.\" &\"/*$8(:\x8F(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0444 &%;\u0106/}#;\xDB/t$;\x93/k$;\x91.\" &\"/]$;1/T$%;\xDF/4#;U/+$8\":\x8A\"$%$# )(\"'#&'#.\" &\"/+$8&:\x90&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u03DA &%;\u0106/\x88#;\xDB/\x7F$;\x93/v$;\xDC/m$;\u015A/d$;\xDB/[$;\xB8/R$%;\xDF/3#;U/*$8\":\x91\"#'# )(\"'#&'#.\" &\"/*$8(:\x92(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0365 &%;\u013E/}#;\xDB/t$;\x93/k$;\x91.\" &\"/]$;1/T$%;\xDF/4#;U/+$8\":\x8A\"$%$# )(\"'#&'#.\" &\"/+$8&:\x93&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\u02FB &%;\u013E/\x88#;\xDB/\x7F$;\x93/v$;\xDC/m$;\u015A/d$;\xDB/[$;\xB8/R$%;\xDF/3#;U/*$8\":\x91\"#'# )(\"'#&'#.\" &\"/*$8(:\x94(#%! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0286 &%;\xFC/\xD1#;\xDB/\xC8$;\u0105/\xBF$;\xDB/\xB6$;\x93/\xAD$%;\u0154/;#;\xDB/2$;\x93/)$8#:\x95#\"$ )(#'#(\"'#&'#.\" &\"/}$;W.\" &\"/o$;\x91.\" &\"/a$;1/X$%;\xDF/6#;U/-$8\":\x96\"&'&%$# )(\"'#&'#.\" &\"/-$8*:\x97*&%$#\"! )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01C8 &%;\xFC/\xC7#;\xDB/\xBE$%;\x93/C#;\xDC/:$;\u0154/1$;\xDB/($8$:\x98$!#)($'#(#'#(\"'#&'#.\" &\"/\x86$;\x93/}$;W.\" &\"/o$;\x91.\" &\"/a$;1/X$%;\xDF/6#;U/-$8\":\x96\"&'&%$# )(\"'#&'#.\" &\"/-$8(:\x99(&%$#\"! )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0114 &%;\u015D/S#;\xDB/J$;\x93/A$;\x91.\" &\"/3$;1/*$8%:\x9A%#\"! )(%'#($'#(#'#(\"'#&'#.\xD4 &%;\u0157/D#;\xDB/;$;\x93/2$;1/)$8$:\x9B$\"! )($'#(#'#(\"'#&'#.\xA3 &%;\u0104/V#;\xDB/M$;\u015D/D$;\xDB/;$;\x93/2$;1/)$8&:\x9C&\"! )(&'#(%'#($'#(#'#(\"'#&'#.` &%;\u0104/V#;\xDB/M$;\u0157/D$;\xDB/;$;\x93/2$;1/)$8&:\x9D&\"! )(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0149/C#;\xDB/:$;\x93/1$;\xDC/($8$:$$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;Z/B#$;Y0#*;Y&/2$;\xDC/)$8#:\x9E#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%2U\"\"6U7V/:#;\xDC/1$;Z/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;a/' 8!:\x9F!! )"),
          peg$decode("%;^/9#$;\\0#*;\\&/)$8\":\x9E\"\"! )(\"'#&'#"),
          peg$decode("%2U\"\"6U7V/:#;\xDC/1$;^/($8#:$#! )(#'#(\"'#&'#"),
          peg$decode("%;u/' 8!:\xA0!! )"),
          peg$decode("%;a/' 8!:\xA0!! )"),
          peg$decode("%;a/' 8!:\xA1!! )"),
          peg$decode("%;a/' 8!:\xA2!! )"),
          peg$decode(";h.G &;b.A &;d.; &;c.5 &;g./ &;f.) &;e.# &;i"),
          peg$decode("%;\u014C/0#;\xDC/'$8\":\xA3\" )(\"'#&'#"),
          peg$decode("%;t/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA4\"\"! )(\"'#&'#"),
          peg$decode("%;m/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA4\"\"! )(\"'#&'#"),
          peg$decode("%;s/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA4\"\"! )(\"'#&'#"),
          peg$decode("%;p/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA4\"\"! )(\"'#&'#"),
          peg$decode("%;q/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA5\"\"! )(\"'#&'#"),
          peg$decode("%;j/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA5\"\"! )(\"'#&'#"),
          peg$decode("%;o.# &;r/Q#$;k.) &;n.# &;l0/*;k.) &;n.# &;l&/)$8\":\xA5\"\"! )(\"'#&'#"),
          peg$decode("%;\u0124/0#;\xDB/'$8\":\xA6\" )(\"'#&'#.\xCB &%;\u0126/0#;\xDB/'$8\":\xA7\" )(\"'#&'#.\xAE &%;\xFD/0#;\xDB/'$8\":\xA8\" )(\"'#&'#.\x91 &%;\u0152/0#;\xDB/'$8\":\xA9\" )(\"'#&'#.t &%;\u014A/0#;\xDB/'$8\":\xAA\" )(\"'#&'#.W &%;\u0146/0#;\xDB/'$8\":\xAB\" )(\"'#&'#.: &%;\u010C/0#;\xDB/'$8\":\xAC\" )(\"'#&'#"),
          peg$decode("%;\u0164/1#;\xBF/($8\":\xAD\"! )(\"'#&'#"),
          peg$decode("%;\u016C/Z#;\xDC/Q$;x.\" &\"/C$;\xDC/:$;\u016D/1$;\xDC/($8&:\xAE&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0164/F#%<;\u0164=.##&&!&'#/1$;\xBF/($8#:\xAF#! )(#'#(\"'#&'#.d &%;\u0164/1#;\xCF/($8\":\xB0\"! )(\"'#&'#.F &%;\u0164/<#%<;\u0164=.##&&!&'#/'$8\":\xB1\" )(\"'#&'#"),
          peg$decode("%2\xB2\"\"6\xB27\xB3/R#;\xDC/I$;\x93/@$;\xDC/7$2\xB4\"\"6\xB47\xB5/($8%:\xB6%!\")(%'#($'#(#'#(\"'#&'#.A &%2\xB7\"\"6\xB77\xB8/1#;\xCF/($8\":\xB6\"! )(\"'#&'#"),
          peg$decode("%;\u016C/L#;\xDC/C$;\x93/:$;\xDC/1$;\u016D/($8%:\xB9%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xBD/' 8!:\xBA!! )"),
          peg$decode("%2\xBB\"\"6\xBB7\xBC/& 8!:\xBD! ).X &%2\xBE\"\"6\xBE7\xBF/1#;\xBF/($8\":\xC0\"! )(\"'#&'#.4 &%2\xBE\"\"6\xBE7\xBF/& 8!:\xC1! )"),
          peg$decode("%;\xC0/' 8!:\xC2!! )"),
          peg$decode("%2\xC3\"\"6\xC37\xC4/1#;\xBE/($8\":\xC5\"! )(\"'#&'#"),
          peg$decode("%2\xC6\"\"6\xC67\xC7/1#;\xBF/($8\":\xC8\"! )(\"'#&'#.o &%2\xC9\"\"6\xC97\xCA/1#;\xBF/($8\":\xCB\"! )(\"'#&'#.K &%2\xC9\"\"6\xC97\xCA/& 8!:\xCC! ).4 &%2\xC6\"\"6\xC67\xC7/& 8!:\xCD! )"),
          peg$decode(";j.Y &;p.S &;q.M &;t.G &;m.A &%;\xCA/' 8!:\xCE!! )./ &%;\xD2/' 8!:\xCE!! )"),
          peg$decode("%;\u0115/V#;\xDC/M$;\xBD/D$;\xDC/;$;y/2$;\xDF/)$8&:\xCF&\"#!)(&'#(%'#($'#(#'#(\"'#&'#.} &%;\u0115/C#;\xDC/:$;y/1$;\xDF/($8$:\xD0$!!)($'#(#'#(\"'#&'#.M &%;\u011A/C#;\xDC/:$;y/1$;\xDF/($8$:\xD1$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xCF/N#;\u0164/E$;\xCF/<$;\u0164/3$;\xCF/*$8%:\xD2%#$\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0168/^#;\xDC/U$;\xDF/L$;\u0169/C$;\xDF/:$;\x8F/1$;\u016A/($8':\xD3'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\xD1 &%;\u0168/^#;\xDC/U$;\xDF/L$;\u0169/C$;\xDF/:$;\x85/1$;\u016A/($8':\xD4'!!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\x86 &%;\x83/<#2/\"\"6/70.\" &\"/($8\":\xD4\"!!)(\"'#&'#.] &%;\x8D/<#2/\"\"6/70.\" &\"/($8\":\xD5\"!!)(\"'#&'#.4 &%2/\"\"6/70/& 8!:\xD6! )"),
          peg$decode("%;\xDC/1#;\x93/($8\":\xD7\"! )(\"'#&'#"),
          peg$decode("%;\xDC/9#;\u0108/0$;\xDC/'$8#:\xD8# )(#'#(\"'#&'#.\u02EB &%;\xDC/9#;\xF1/0$;\xDC/'$8#:\xD9# )(#'#(\"'#&'#.\u02C5 &%;\xDC/c#;\u0129/Z$;\xDC/Q$;\x7F/H$;\xDC/?$;\u0166.\" &\"/1$;\xDC/($8':\xDA'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0275 &%;\xDC/g#;\u0129/^$;\xDC/U$;\xDF/L$;\u0169/C$;\xDF/:$;\x81/1$;\u016A/($8(:\xDA(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0221 &%;\xDC/c#;\u0151/Z$;\xDC/Q$;\x88/H$;\xDC/?$;\u0166.\" &\"/1$;\xDC/($8':\xDB'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u01D1 &%;\xDC/g#;\u0151/^$;\xDC/U$;\xDF/L$;\u0169/C$;\xDF/:$;\x8A/1$;\u016A/($8(:\xDC(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\u017D &%;\xDC/i#;\u0168.# &;\u0111/Z$;\xDC/Q$;\x8D/H$;\xDC/?$;\u0166.\" &\"/1$;\xDC/($8':\xDD'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.\u0127 &%;\xDC/m#;\u0168.# &;\u0111/^$;\xDC/U$;\xDF/L$;\u0169/C$;\xDF/:$;\x8F/1$;\u016A/($8(:\xDE(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xCD &%;\xDC/i#;\u0168.# &;\xEC/Z$;\xDC/Q$;\x83/H$;\xDC/?$;\u0166.\" &\"/1$;\xDC/($8':\xDA'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xDC/m#;\u0168.# &;\xEC/^$;\xDC/U$;\xDF/L$;\u0169/C$;\xDF/:$;\x85/1$;\u016A/($8(:\xDA(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xDC/i#;\u0168.# &;\u0129/Z$;\xDC/Q$;\x7F/H$;\xDC/?$;\u0166.\" &\"/1$;\xDC/($8':$'!#)(''#(&'#(%'#($'#(#'#(\"'#&'#.w &%;\xDC/m#;\u0168.# &;\u0129/^$;\xDC/U$;\xDF/L$;\u0169/C$;\xDF/:$;\x81/1$;\u016A/($8(:$(!!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\u016B/:#;\xDC/1$;\x93/($8#:$#! )(#'#(\"'#&'#._ &%;z/' 8!:\xDF!! ).M &;\xD5.G &;\xCA.A &;\u013C.; &;\u013D.5 &;\u0158./ &;\u0135.) &;\xD2.# &;}"),
          peg$decode("%$4\xE0\"\"5!7\xE1/,#0)*4\xE0\"\"5!7\xE1&&&#/m#%<2\xE2\"\"6\xE27\xE3.G &2U\"\"6U7V.; &2\xE4\"\"6\xE47\xE5./ &2/\"\"6/70.# &;\xDF=/##&'!&&#/($8\":\xE6\"!!)(\"'#&'#"),
          peg$decode("%;|/C#;\xDC/:$;\u0167/1$;\xDC/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;~0#*;~&/2#;|/)$8\":\xE7\"\"! )(\"'#&'#"),
          peg$decode("%;\x7F/1#;\xDF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x80/&#0#*;\x80&&&#/' 8!:b!! )"),
          peg$decode("%;\x93/C#;\xDC/:$;\u0167/1$;\xDC/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x820#*;\x82&/2#;\x93/)$8\":\xE7\"\"! )(\"'#&'#"),
          peg$decode("%;\x83/1#;\xDF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x84/&#0#*;\x84&&&#/' 8!:b!! )"),
          peg$decode("%;\u0165/:#;\xBC/1$;\xDC/($8#:\xE8#!!)(#'#(\"'#&'#.N &%;\xBC/D#;\xDB/;$;|/2$;\xDC/)$8$:\xE9$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x86/C#;\xDC/:$;\u0167/1$;\xDC/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x870#*;\x87&/2#;\x86/)$8\":\xEA\"\"! )(\"'#&'#"),
          peg$decode("%;\x88/1#;\xDF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x89/&#0#*;\x89&&&#/' 8!:b!! )"),
          peg$decode("%;\u0165/:#;\xBC/1$;\xDC/($8#:\xE8#!!)(#'#(\"'#&'#.T &%;\xBC/J#;\xDB/A$;\x93.# &;\u0109/2$;\xDC/)$8$:\xE9$\"#!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x8B/C#;\xDC/:$;\u0167/1$;\xDC/($8$:$$!#)($'#(#'#(\"'#&'#"),
          peg$decode("%$;\x8C0#*;\x8C&/2#;\x8B/)$8\":\xEB\"\"! )(\"'#&'#"),
          peg$decode("%;\x8D/1#;\xDF/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%$;\x8E/&#0#*;\x8E&&&#/' 8!:b!! )"),
          peg$decode("%;\xED/C#;\xDC/:$;p/1$;\xDC/($8$:\xEC$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\x92/' 8!:\xED!! )"),
          peg$decode("%;\xED.# &;\u0115/\xA8#;\xDC/\x9F$$%;p/C#;\xDC/:$;\u0167/1$;\xDC/($8$:\xEE$!#)($'#(#'#(\"'#&'#0M*%;p/C#;\xDC/:$;\u0167/1$;\xDC/($8$:\xEE$!#)($'#(#'#(\"'#&'#&/;$;\xDC/2$;p/)$8%:\xEF%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";\x94"),
          peg$decode("%;\xAF/t#;\xDC/k$$%;\x95/2#;\xDC/)$8\":\xF0\"\"%!)(\"'#&'#0<*%;\x95/2#;\xDC/)$8\":\xF0\"\"%!)(\"'#&'#&/)$8#:\xF1#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\x9D.e &;\x9F._ &;\xA1.Y &;\x97.S &;\x98.M &;\x96.G &;\x9A.A &;\xA5.; &;\xA7.5 &;\xA9./ &;\xA3.) &;\x9B.# &;\x99"),
          peg$decode("%;\u0122/& 8!:\xF2! )"),
          peg$decode("%;\u0125/& 8!:\xF3! )"),
          peg$decode("%;\u015B/& 8!:\xF4! )"),
          peg$decode("%;\xF9/:#;\xDB/1$;\x93/($8#:\xF5#! )(#'#(\"'#&'#"),
          peg$decode("%;\xF7/& 8!:\xF6! ).? &%;\u010A/& 8!:\xF7! ).. &%;\u010B/& 8!:\xF8! )"),
          peg$decode("%;\xF3/:#;\xDB/1$;\x9C/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x91.\" &\"/2#;1/)$8\":\xF9\"\"! )(\"'#&'#.D &%;\u015A/:#;\xDB/1$;\xB8/($8#:\xFA#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0150/:#;\xDB/1$;\x9E/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/' 8!:\xFB!! ).\xAA &%;\u016C/U#;\xDC/L$;\x93/C$;\xDC/:$;\u016D/1$;\xDC/($8&:\xFB&!#)(&'#(%'#($'#(#'#(\"'#&'#.h &%;\x91.\" &\"/2#;1/)$8\":\xFC\"\"! )(\"'#&'#.D &%;\u015A/:#;\xDB/1$;\xB8/($8#:\xFD#! )(#'#(\"'#&'#"),
          peg$decode("%;\xF0/:#;\xDB/1$;\xA0/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\u016C/U#;\xDC/L$;\x93/C$;\xDC/:$;\u016D/1$;\xDC/($8&:\xFE&!#)(&'#(%'#($'#(#'#(\"'#&'#.z &%;\x93/' 8!:\xFE!! ).h &%;\x91.\" &\"/2#;1/)$8\":\xFF\"\"! )(\"'#&'#.D &%;\u015A/:#;\xDB/1$;\xB8/($8#:\u0100#! )(#'#(\"'#&'#"),
          peg$decode("%;\u011B/:#;\xDB/1$;\xA2/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\xC1/A#;\x91.\" &\"/3$;1/*$8#:\u0101##\"! )(#'#(\"'#&'#.m &%;\xC1/2#;\x93/)$8\":\u0102\"\"! )(\"'#&'#.N &%;\xC1/D#;\u015A/;$;\xDB/2$;\xB8/)$8$:\u0103$\"# )($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0116/:#;\xDB/1$;\xA4/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/' 8!:\u0104!! ).h &%;\x91.\" &\"/2#;1/)$8\":\u0105\"\"! )(\"'#&'#.D &%;\u015A/:#;\xDB/1$;\xB8/($8#:\u0106#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0147/:#;\xDB/1$;\xA6/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/' 8!:\u0107!! ).h &%;\x91.\" &\"/2#;1/)$8\":\u0108\"\"! )(\"'#&'#.D &%;\u015A/:#;\xDB/1$;\xB8/($8#:\u0109#! )(#'#(\"'#&'#"),
          peg$decode("%;\u0137/:#;\xDB/1$;\xA8/($8#:\x98#! )(#'#(\"'#&'#"),
          peg$decode("%;\x93/' 8!:\u010A!! ).h &%;\x91.\" &\"/2#;1/)$8\":\u010B\"\"! )(\"'#&'#.D &%;\u015A/:#;\xDB/1$;\xB8/($8#:\u010C#! )(#'#(\"'#&'#"),
          peg$decode("%;\xDC/k#$;\xAB./ &;\xAC.) &;\xAD.# &;\xAA/8#05*;\xAB./ &;\xAC.) &;\xAD.# &;\xAA&&&#/1$;\xDC/($8#:\u010D#!!)(#'#(\"'#&'#"),
          peg$decode("%;\u0112/0#;\xDC/'$8\":\u010E\" )(\"'#&'#.\xDC &%;\u0127/0#;\xDC/'$8\":\u010F\" )(\"'#&'#.\xBF &%;\u0128/h#;\xDC/_$;\xAF/V$;\xDC/M$;\u0167/D$;\xDC/;$;\xAF/2$;\xDC/)$8(:\u0110(\"%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.j &%;\u0128/C#;\xDC/:$;\xAF/1$;\xDC/($8$:\u0111$!!)($'#(#'#(\"'#&'#.: &%;\xFC/0#;\xDC/'$8\":\u0112\" )(\"'#&'#"),
          peg$decode("%;\u0165/:#;\xBC/1$;\xDC/($8#:\u0113#!!)(#'#(\"'#&'#.M &%;\u0163/C#;\u0165/:$;\xBC/1$;\xDC/($8$:\u0114$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\u0116/C#;\xDC/:$;\xAF/1$;\xDC/($8$:\u0115$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xF3/C#;\xDC/:$;\xAE/1$;\xDC/($8$:\u0116$!!)($'#(#'#(\"'#&'#.\xBC &%;\xF3/R#;\xDC/I$;\xAF/@$;\xAE.\" &\"/2$;\xDC/)$8%:\u0117%\"\"!)(%'#($'#(#'#(\"'#&'#.} &%;\u0117/C#;\xDC/:$;\xAF/1$;\xDC/($8$:\u0118$!!)($'#(#'#(\"'#&'#.M &%;\u012B/C#;\xDC/:$;\xAF/1$;\xDC/($8$:\u0119$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%;\xEF.# &;\xEE/0#;\xDC/'$8\":\u011A\" )(\"'#&'#.@ &%;\u0103.# &;\u0102/0#;\xDC/'$8\":\u011B\" )(\"'#&'#"),
          peg$decode("%;\xB1/N#;\xDC/E$;\xB0/<$;\xDC/3$;\xAF/*$8%:\u011C%#$\" )(%'#($'#(#'#(\"'#&'#.\u018E &%;\xB1/M#;\xDC/D$;\u015F/;$;\xDC/2$;\xAF/)$8%:\u011D%\"$ )(%'#($'#(#'#(\"'#&'#.\u0154 &%;\xB1/M#;\xDC/D$;\u012E/;$;\xDC/2$;\xAF/)$8%:\u011E%\"$ )(%'#($'#(#'#(\"'#&'#.\u011A &%;\xB1/M#;\xDC/D$;\u0131/;$;\xDC/2$;\xAF/)$8%:\u011F%\"$ )(%'#($'#(#'#(\"'#&'#.\xE0 &%;\xB1/~#;\xDC/u$2\u0120\"\"6\u01207\u0121/f$;\xDC/]$;\xAF/T$;\xDC/K$2\u0122\"\"6\u01227\u0123/<$;\xDC/3$;\xAF/*$8):\u0124)#($ )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.u &%;\xB1/M#;\xDC/D$;\u0100/;$;\xDC/2$;\xAF/)$8%:\u0125%\"$ )(%'#($'#(#'#(\"'#&'#.; &%;\xB1/1#;\xDC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%;\xEA/0#;\xDB/'$8\":\u0126\" )(\"'#&'#.: &%;\u0139/0#;\xDB/'$8\":\u0127\" )(\"'#&'#"),
          peg$decode("%;\xB4/N#;\xDC/E$;\xB3/<$;\xDC/3$;\xB1/*$8%:\u0128%#$\" )(%'#($'#(#'#(\"'#&'#.v &%;\xB4/N#;\xDC/E$;\xB2/<$;\xDC/3$;\xB1/*$8%:\u011C%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xB4/1#;\xDC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("%2\u0129\"\"6\u01297\u012A/& 8!:\u012B! ).\u0106 &%2\u012C\"\"6\u012C7\u012D/B#%<2\u012C\"\"6\u012C7\u012D=.##&&!&'#/'$8\":\u012E\" )(\"'#&'#.\xD1 &%2\u012F\"\"6\u012F7\u0130/& 8!:\u0131! ).\xBA &%;\u011E/0#;\xDB/'$8\":\u0132\" )(\"'#&'#.\x9D &%;\u0120/0#;\xDB/'$8\":\u0133\" )(\"'#&'#.\x80 &%2\u0134\"\"6\u01347\u0135/& 8!:\u0136! ).i &%2\u0137\"\"6\u01377\u0138/B#%<2\u0137\"\"6\u01377\u0138=.##&&!&'#/'$8\":\u0139\" )(\"'#&'#.4 &%2\u013A\"\"6\u013A7\u013B/& 8!:\u013C! )"),
          peg$decode("%2|\"\"6|7}/& 8!:\u013D! ).K &%2~\"\"6~7\x7F/& 8!:\u013E! ).4 &%2\u013F\"\"6\u013F7\u0140/& 8!:\u0141! )"),
          peg$decode("%;\xB6/N#;\xDC/E$;\xB5/<$;\xDC/3$;\xB4/*$8%:\u011C%#$\" )(%'#($'#(#'#(\"'#&'#.; &%;\xB6/1#;\xDC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("2l\"\"6l7m.\x80 &2j\"\"6j7k.t &%;\u013A/0#;\xDB/'$8\":\u0142\" )(\"'#&'#.W &%;\xEB/0#;\xDB/'$8\":\u0143\" )(\"'#&'#.: &%;\u0160/0#;\xDB/'$8\":\u0144\" )(\"'#&'#"),
          peg$decode("%;\xB8/N#;\xDC/E$;\xB7/<$;\xDC/3$;\xB6/*$8%:\u011C%#$\" )(%'#($'#(#'#(\"'#&'#.\u01EF &%;\xB8/S#;\xDC/J$2n\"\"6n7o/;$;\xDC/2$;\xB6/)$8%:\u0145%\"$ )(%'#($'#(#'#(\"'#&'#.\u01AF &%;\xB8/e#;\xDC/\\$;\u015C/S$;\xDC/J$;\xB8/A$;\xDC/8$;x.\" &\"/*$8':\u0146'#&\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.\u015D &%;\xB8/M#;\xDC/D$;\u013B/;$;\xDB/2$;\xB6/)$8%:\u0147%\"$ )(%'#($'#(#'#(\"'#&'#.\u0123 &%;\xB8/M#;\xDC/D$;\u0145/;$;\xDB/2$;\xB6/)$8%:\u0148%\"$ )(%'#($'#(#'#(\"'#&'#.\xE9 &%;\xB8/M#;\xDC/D$;\u0101/;$;\xDB/2$;\xB6/)$8%:\u0149%\"$ )(%'#($'#(#'#(\"'#&'#.\xAF &%;\xB8/M#;\xDC/D$;\u010F/;$;\xDB/2$;\xB6/)$8%:\u014A%\"$ )(%'#($'#(#'#(\"'#&'#.u &%;\xB8/M#;\xDC/D$;\u0121/;$;\xDB/2$;\xB6/)$8%:\u014B%\"$ )(%'#($'#(#'#(\"'#&'#.; &%;\xB8/1#;\xDC/($8\":$\"!!)(\"'#&'#"),
          peg$decode("2p\"\"6p7q.Y &2r\"\"6r7s.M &2t\"\"6t7u.A &2z\"\"6z7{.5 &2x\"\"6x7y.) &2v\"\"6v7w"),
          peg$decode("%2j\"\"6j7k/C#;\xDC/:$;\xB8/1$;\xDC/($8$:\u014C$!!)($'#(#'#(\"'#&'#.\u0380 &%;\u0133/C#;\xDB/:$;\xB8/1$;\xDC/($8$:\u014D$!!)($'#(#'#(\"'#&'#.\u0350 &%;\u0132/C#;\xDB/:$;\xB8/1$;\xDC/($8$:\u014E$!!)($'#(#'#(\"'#&'#.\u0320 &%;\u0155/C#;\xDB/:$;\xB8/1$;\xDC/($8$:\u014F$!!)($'#(#'#(\"'#&'#.\u02F0 &%;\u011F/C#;\xDB/:$;\xB8/1$;\xDC/($8$:\u0150$!!)($'#(#'#(\"'#&'#.\u02C0 &%;\u0134/:#;\xDB/1$;\xB8/($8#:\u0151#! )(#'#(\"'#&'#.\u0299 &%;\u010E/C#;\xDB/:$;\xB8/1$;\xDC/($8$:\u0152$!!)($'#(#'#(\"'#&'#.\u0269 &%;\xF8/C#;\xDB/:$;\xB8/1$;\xDC/($8$:\u0153$!!)($'#(#'#(\"'#&'#.\u0239 &%;\u014E/C#;\xDB/:$;,/1$;\xDC/($8$:$$!!)($'#(#'#(\"'#&'#.\u0209 &%;\u0140/C#;\xDB/:$;-/1$;\xDC/($8$:$$!!)($'#(#'#(\"'#&'#.\u01D9 &%;\u013F/C#;\xDB/:$;./1$;\xDC/($8$:$$!!)($'#(#'#(\"'#&'#.\u01A9 &%;\u0113/C#;\xDB/:$;\xC2/1$;\xDC/($8$:$$!!)($'#(#'#(\"'#&'#.\u0179 &%;\u0161/C#;\xDB/:$;\xB8/1$;\xDC/($8$:\u0154$!!)($'#(#'#(\"'#&'#.\u0149 &%;\u0162/C#;\xDB/:$;\xB8/1$;\xDC/($8$:\u0155$!!)($'#(#'#(\"'#&'#.\u0119 &%2\u0156\"\"6\u01567\u0157/:#;_/1$;\xDC/($8#:$#!!)(#'#(\"'#&'#.\xEC &%;^/1#;\xDC/($8\":$\"!!)(\"'#&'#.\xCE &;\xC4.\xC8 &%;z/' 8!:\xDF!! ).\xB6 &%;\xC7/1#;\xDC/($8\":\u0158\"!!)(\"'#&'#.\x98 &%2\u0159\"\"6\u01597\u015A/j#;\xDC/a$;\x93/X$;\xDC/O$;\x90.\" &\"/A$2\xE4\"\"6\xE47\xE5/2$;\xDC/)$8':\u015B'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;\xB9/1#;\xDC/($8\":\x98\"!!)(\"'#&'#"),
          peg$decode("%2r\"\"6r7s/\x7F#$;\xBA.# &;\xBB/,#0)*;\xBA.# &;\xBB&&&#/]$2r\"\"6r7s/N$$4\u015C\"\"5!7\u015D0)*4\u015C\"\"5!7\u015D&/2$;\xDC/)$8%:\u015E%\"#!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2\u015F\"\"6\u015F7\u0160"),
          peg$decode("4\u0161\"\"5!7\u0162"),
          peg$decode("%;\xBD/C#%<4\u0163\"\"5!7\u0164=.##&&!&'#/($8\":$\"!!)(\"'#&'#.# &;\xD2"),
          peg$decode("%%<;\xE4=.##&&!&'#/1#;\xBF/($8\":\u0165\"! )(\"'#&'#"),
          peg$decode("%4\u0166\"\"5!7\u0167/E#$4\u0168\"\"5!7\u01690)*4\u0168\"\"5!7\u0169&/)$8\":\u016A\"\"! )(\"'#&'#"),
          peg$decode("%4\u016B\"\"5!7\u016C/E#$4\u0168\"\"5!7\u01690)*4\u0168\"\"5!7\u0169&/)$8\":\u016A\"\"! )(\"'#&'#"),
          peg$decode(";\xCA.] &;\xD2.W &;\u013C.Q &;\u013D.K &;\u0158.E &;\u0135.? &%;\u012D/& 8!:\u016D! ).. &%;\u0119/& 8!:\u016E! )"),
          peg$decode("%;\u0124/0#;\xDB/'$8\":\u016F\" )(\"'#&'#.# &;\x93"),
          peg$decode("%;\xC3/' 8!:\u0170!! )"),
          peg$decode("%;`/@#;\xDC/7$;x.\" &\"/)$8#:\u0171#\"\" )(#'#(\"'#&'#.; &%;`/1#;\xDC/($8\":\u0172\"!!)(\"'#&'#"),
          peg$decode("%;\xF6/M#;\xDC/D$;\x93/;$;\xDC/2$;\xC5/)$8%:\u0173%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xDF/Y#;\u0169/P$;\xDF/G$$;\xC6/&#0#*;\xC6&&&#/1$;\u016A/($8%:\u0174%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\x95/:#;\xDC/1$;\xDF/($8#:\u0175#!\")(#'#(\"'#&'#.\\ &%;\xBD/R#;\xDC/I$;x.\" &\"/;$;\xDC/2$;\xDF/)$8%:\u0176%\"$\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;\xFE/R#;\xDC/I$;\xB8/@$;\xDC/7$;x.\" &\"/)$8%:\u0177%\"\" )(%'#($'#(#'#(\"'#&'#.\x9B &%;\u0148/R#;\xDC/I$;\xB8/@$;\xDC/7$;x.\" &\"/)$8%:\u0178%\"\" )(%'#($'#(#'#(\"'#&'#.\\ &%;\u012F/R#;\xDC/I$;\xB8/@$;\xDC/7$;x.\" &\"/)$8%:\u0179%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%<;\xDF=/##&'!&&#.G &%<;\xE3=/##&'!&&#.5 &%<2\xE4\"\"6\xE47\xE5=/##&'!&&#"),
          peg$decode("%$4\u017A\"\"5!7\u017B/,#0)*4\u017A\"\"5!7\u017B&&&#/' 8!:\u017C!! )"),
          peg$decode("%;\xCB/7#2\u017D\"\"6\u017D7\u017E/($8\":\u017F\"!!)(\"'#&'#.# &;\xCB"),
          peg$decode(";\xCC./ &;\xCD.) &;\xCE.# &;\u012D"),
          peg$decode("%;\xCD.# &;\xCE/A#2\u0180\"\"6\u01807\u0181/2$;\xCE/)$8#:\u0182#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;\xCE/;#;\u0164/2$;\xD0/)$8#:\u0183#\"\" )(#'#(\"'#&'#"),
          peg$decode(";\xCF.A &%2j\"\"6j7k/1#;\xCF/($8\":\u0184\"! )(\"'#&'#"),
          peg$decode("%$4\u0185\"\"5!7\u0186/,#0)*4\u0185\"\"5!7\u0186&&&#/' 8!:\u0187!! )"),
          peg$decode("%$4\u0185\"\"5!7\u0186/,#0)*4\u0185\"\"5!7\u0186&&&#/' 8!:;!! )"),
          peg$decode("%2\u0188\"\"6\u01887\u0189/S#$;\xD8.# &;\xD30)*;\xD8.# &;\xD3&/7$2\u0188\"\"6\u01887\u0189/($8#:\u018A#!!)(#'#(\"'#&'#.c &%2\u018B\"\"6\u018B7\u018C/S#$;\xD8.# &;\xD40)*;\xD8.# &;\xD4&/7$2\u018B\"\"6\u018B7\u018C/($8#:\u018A#!!)(#'#(\"'#&'#"),
          peg$decode(";\xD5.\xE5 &%2\u018D\"\"6\u018D7\u018E/1#;\xD6/($8\":$\"! )(\"'#&'#.\xC1 &%2\u0188\"\"6\u01887\u0189/_#$;\xD8.) &;\xD9.# &;\xD30/*;\xD8.) &;\xD9.# &;\xD3&/7$2\u0188\"\"6\u01887\u0189/($8#:\u018A#!!)(#'#(\"'#&'#.o &%2\u018B\"\"6\u018B7\u018C/_#$;\xD8.) &;\xD9.# &;\xD40/*;\xD8.) &;\xD9.# &;\xD4&/7$2\u018B\"\"6\u018B7\u018C/($8#:\u018A#!!)(#'#(\"'#&'#"),
          peg$decode("%4\u018F\"\"5!7\u0190/' 8!:\u0191!! )"),
          peg$decode("%4\u0192\"\"5!7\u0193/' 8!:\u0191!! )"),
          peg$decode("%2\u0194\"\"6\u01947\u0195/\xAA#;\xDC/\xA1$;\xDF/\x98$;\u0169/\x8F$;\xDF/\x86$$%;\xD6/1#;\xE0/($8\":\u0196\"!!)(\"'#&'#0;*%;\xD6/1#;\xE0/($8\":\u0196\"!!)(\"'#&'#&/F$;\u016A/=$%<;\xDF=/##&'!&&#/($8(:\u0197(!\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%$;\xD8.) &;\xD9.# &;\xD70/*;\xD8.) &;\xD9.# &;\xD7&/=#%<;\xDF=/##&'!&&#/($8\":\u018A\"!!)(\"'#&'#"),
          peg$decode("%4\u0198\"\"5!7\u0199/' 8!:\u0191!! )"),
          peg$decode("%2\u019A\"\"6\u019A7\u019B/6#2\u0188\"\"6\u01887\u0189/'$8\":\u019C\" )(\"'#&'#.\u0286 &%2\u019A\"\"6\u019A7\u019B/6#2\u018B\"\"6\u018B7\u018C/'$8\":\u019D\" )(\"'#&'#.\u025D &%2\u019A\"\"6\u019A7\u019B/6#2\xBE\"\"6\xBE7\xBF/'$8\":\u019E\" )(\"'#&'#.\u0234 &%2\u019F\"\"6\u019F7\u01A0/& 8!:\u01A1! ).\u021D &%2\u01A2\"\"6\u01A27\u01A3/& 8!:\u01A4! ).\u0206 &%2\u019A\"\"6\u019A7\u019B/6#2\u01A5\"\"6\u01A57\u01A6/'$8\":\u01A7\" )(\"'#&'#.\u01DD &%2\u019A\"\"6\u019A7\u019B/6#2\u01A8\"\"6\u01A87\u01A9/'$8\":\u01AA\" )(\"'#&'#.\u01B4 &%2\u019A\"\"6\u019A7\u019B/6#2\u01AB\"\"6\u01AB7\u01AC/'$8\":\u01AD\" )(\"'#&'#.\u018B &%2\u019A\"\"6\u019A7\u019B/6#2\u01AE\"\"6\u01AE7\u01AF/'$8\":\u01B0\" )(\"'#&'#.\u0162 &%2\u019A\"\"6\u019A7\u019B/6#2\u01B1\"\"6\u01B17\u01B2/'$8\":\u01B3\" )(\"'#&'#.\u0139 &%2\u019A\"\"6\u019A7\u019B/V#2\u01B4\"\"6\u01B47\u01B5/G$4\u01B6\"\"5!7\u01B7/8$4\u01B6\"\"5!7\u01B7/)$8$:\u01B8$\"! )($'#(#'#(\"'#&'#.\xF0 &%2\u019A\"\"6\u019A7\u019B/v#2\u01B9\"\"6\u01B97\u01BA/g$4\u01B6\"\"5!7\u01B7/X$4\u01B6\"\"5!7\u01B7/I$4\u01B6\"\"5!7\u01B7/:$4\u01B6\"\"5!7\u01B7/+$8&:\u01BB&$#\"! )(&'#(%'#($'#(#'#(\"'#&'#.\x87 &%2\u019A\"\"6\u019A7\u019B/w#2\u01B9\"\"6\u01B97\u01BA/h$2\u01BC\"\"6\u01BC7\u01BD/Y$$4\u01B6\"\"5!7\u01B7/,#0)*4\u01B6\"\"5!7\u01B7&&&#/7$2\u01BE\"\"6\u01BE7\u01BF/($8%:\u01C0%!!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%2\u01C1\"\"6\u01C17\u01C2/@#;\x93/7$2\u01BE\"\"6\u01BE7\u01BF/($8#:\u01C3#!!)(#'#(\"'#&'#"),
          peg$decode("$;\xDD/&#0#*;\xDD&&&#"),
          peg$decode(";\xDD.5 &%<4\u01C4\"\"5!7\u01C5=/##&'!&&#"),
          peg$decode("$;\xDD0#*;\xDD&"),
          peg$decode("%;\xE0/2#2\u01C6\"\"6\u01C67\u01C7/#$+\")(\"'#&'#.) &4\u01C8\"\"5!7\u01C9"),
          peg$decode("$;\xE00#*;\xE0&"),
          peg$decode("$;\xE0/&#0#*;\xE0&&&#"),
          peg$decode("%2\u01CA\"\"6\u01CA7\u01CB/H#$4\u01CC\"\"5!7\u01CD0)*4\u01CC\"\"5!7\u01CD&/,$;\xE1/#$+#)(#'#(\"'#&'#.# &;\xE1"),
          peg$decode("4\u01CE\"\"5!7\u01CF"),
          peg$decode("2\u01BC\"\"6\u01BC7\u01BD"),
          peg$decode("2\u01BE\"\"6\u01BE7\u01BF"),
          peg$decode("%;\xE5/>#%<4\u0168\"\"5!7\u0169=.##&&!&'#/#$+\")(\"'#&'#"),
          peg$decode(";\u0147.\u01F7 &;\xEB.\u01F1 &;\xEA.\u01EB &;\xEC.\u01E5 &;\xED.\u01DF &;\xEF.\u01D9 &;\xEE.\u01D3 &;\xF0.\u01CD &;\xF1.\u01C7 &;\xF2.\u01C1 &;\xF3.\u01BB &;\xF4.\u01B5 &;\xF6.\u01AF &;\xFE.\u01A9 &;\xF7.\u01A3 &;\xF9.\u019D &;\xF8.\u0197 &;\xFF.\u0191 &;\u0100.\u018B &;\u0101.\u0185 &;\u0103.\u017F &;\u0102.\u0179 &;\u0105.\u0173 &;\u0108.\u016D &;\u010A.\u0167 &;\u010B.\u0161 &;\u0109.\u015B &;\u010C.\u0155 &;\u010E.\u014F &;\u010F.\u0149 &;\u013D.\u0143 &;\u0111.\u013D &;\u0112.\u0137 &;\u0113.\u0131 &;\u0114.\u012B &;\u0116.\u0125 &;\u0117.\u011F &;\u011C.\u0119 &;\u011B.\u0113 &;\u011E.\u010D &;\u011F.\u0107 &;\u0120.\u0101 &;\u0122.\xFB &;\u0125.\xF5 &;\u0127.\xEF &;\u0128.\xE9 &;\u0129.\xE3 &;\u012B.\xDD &;\u012D.\xD7 &;\u012E.\xD1 &;\u012F.\xCB &;\u0131.\xC5 &;\u0133.\xBF &;\u0132.\xB9 &;\u0134.\xB3 &;\u0135.\xAD &;\u0137.\xA7 &;\u013A.\xA1 &;\u0139.\x9B &;\u013B.\x95 &;\u013F.\x8F &;\u0140.\x89 &;\u0146.\x83 &;\u0148.} &;\u014B.w &;\u014E.q &;\u0152.k &;\u014F.e &;\u0150._ &;\u0154.Y &;\u0151.S &;\u013C.M &;\u0155.G &;\u0158.A &;\u0159.; &;\u015A.5 &;\u015B./ &;\u015C.) &;\u0160.# &;\u015F"),
          peg$decode("2\u01D0\"\"6\u01D07\u01D1"),
          peg$decode("2\u01D2\"\"6\u01D27\u01D3"),
          peg$decode("2\u01D4\"\"6\u01D47\u01D5"),
          peg$decode("2\u01D6\"\"6\u01D67\u01D7"),
          peg$decode("2\u01D8\"\"6\u01D87\u01D9"),
          peg$decode("2\u01DA\"\"6\u01DA7\u01DB"),
          peg$decode("2\u01DC\"\"6\u01DC7\u01DD"),
          peg$decode("2\u01DE\"\"6\u01DE7\u01DF"),
          peg$decode("2\u01E0\"\"6\u01E07\u01E1"),
          peg$decode("2\u01E2\"\"6\u01E27\u01E3"),
          peg$decode("2\u01E4\"\"6\u01E47\u01E5"),
          peg$decode("2\u01E6\"\"6\u01E67\u01E7"),
          peg$decode("2\u01E8\"\"6\u01E87\u01E9"),
          peg$decode("2\u01EA\"\"6\u01EA7\u01EB"),
          peg$decode("2\u01EC\"\"6\u01EC7\u01ED"),
          peg$decode("2\u01EE\"\"6\u01EE7\u01EF"),
          peg$decode("2\u01F0\"\"6\u01F07\u01F1"),
          peg$decode("2\u01F2\"\"6\u01F27\u01F3"),
          peg$decode("2\u01F4\"\"6\u01F47\u01F5"),
          peg$decode("2\u01F6\"\"6\u01F67\u01F7"),
          peg$decode("2\u01F8\"\"6\u01F87\u01F9"),
          peg$decode("2\u01FA\"\"6\u01FA7\u01FB"),
          peg$decode("2\u01FC\"\"6\u01FC7\u01FD"),
          peg$decode("2\u01FE\"\"6\u01FE7\u01FF"),
          peg$decode("2\u0200\"\"6\u02007\u0201"),
          peg$decode("2\u0202\"\"6\u02027\u0203"),
          peg$decode("2\u0204\"\"6\u02047\u0205"),
          peg$decode("2\u0206\"\"6\u02067\u0207"),
          peg$decode("2\u0208\"\"6\u02087\u0209"),
          peg$decode("2\u020A\"\"6\u020A7\u020B"),
          peg$decode("2\u020C\"\"6\u020C7\u020D"),
          peg$decode("2\u020E\"\"6\u020E7\u020F"),
          peg$decode("2\u0210\"\"6\u02107\u0211"),
          peg$decode("2\u0212\"\"6\u02127\u0213"),
          peg$decode("2\u0214\"\"6\u02147\u0215"),
          peg$decode("2\u0216\"\"6\u02167\u0217"),
          peg$decode("2\u0218\"\"6\u02187\u0219"),
          peg$decode("2\u021A\"\"6\u021A7\u021B"),
          peg$decode("2\u021C\"\"6\u021C7\u021D"),
          peg$decode("2\u021E\"\"6\u021E7\u021F"),
          peg$decode("2\u0220\"\"6\u02207\u0221"),
          peg$decode("2\u0222\"\"6\u02227\u0223"),
          peg$decode("2\u0224\"\"6\u02247\u0225"),
          peg$decode("2\u0226\"\"6\u02267\u0227"),
          peg$decode("2\u0228\"\"6\u02287\u0229"),
          peg$decode("2\u022A\"\"6\u022A7\u022B"),
          peg$decode("2\u022C\"\"6\u022C7\u022D"),
          peg$decode("2\u022E\"\"6\u022E7\u022F"),
          peg$decode("2\u0230\"\"6\u02307\u0231"),
          peg$decode("2\u0232\"\"6\u02327\u0233"),
          peg$decode("2\u0234\"\"6\u02347\u0235"),
          peg$decode("2\u0236\"\"6\u02367\u0237"),
          peg$decode("2\u0238\"\"6\u02387\u0239"),
          peg$decode("2\u023A\"\"6\u023A7\u023B"),
          peg$decode("2\u023C\"\"6\u023C7\u023D"),
          peg$decode("2\u023E\"\"6\u023E7\u023F"),
          peg$decode("2\u0240\"\"6\u02407\u0241"),
          peg$decode("2\u0242\"\"6\u02427\u0243"),
          peg$decode("2\u0244\"\"6\u02447\u0245"),
          peg$decode("2\u0246\"\"6\u02467\u0247"),
          peg$decode("2\u0248\"\"6\u02487\u0249"),
          peg$decode("2\u024A\"\"6\u024A7\u024B"),
          peg$decode("2\u024C\"\"6\u024C7\u024D"),
          peg$decode("2\u024E\"\"6\u024E7\u024F"),
          peg$decode("2\u0250\"\"6\u02507\u0251"),
          peg$decode("2\u0252\"\"6\u02527\u0253"),
          peg$decode("2\u0254\"\"6\u02547\u0255"),
          peg$decode("2\u0256\"\"6\u02567\u0257"),
          peg$decode("2\u0258\"\"6\u02587\u0259"),
          peg$decode("2\u025A\"\"6\u025A7\u025B"),
          peg$decode("2\u025C\"\"6\u025C7\u025D"),
          peg$decode("2\u025E\"\"6\u025E7\u025F"),
          peg$decode("2\u0260\"\"6\u02607\u0261"),
          peg$decode("2\u0262\"\"6\u02627\u0263"),
          peg$decode("2\u0264\"\"6\u02647\u0265"),
          peg$decode("2\u0266\"\"6\u02667\u0267"),
          peg$decode("2\u0268\"\"6\u02687\u0269"),
          peg$decode("2\u026A\"\"6\u026A7\u026B"),
          peg$decode("2\u026C\"\"6\u026C7\u026D"),
          peg$decode("2\u026E\"\"6\u026E7\u026F"),
          peg$decode("2\u0270\"\"6\u02707\u0271"),
          peg$decode("2\u0272\"\"6\u02727\u0273"),
          peg$decode("2\u0274\"\"6\u02747\u0275"),
          peg$decode("2\u0276\"\"6\u02767\u0277"),
          peg$decode("2\u0278\"\"6\u02787\u0279"),
          peg$decode("2\u027A\"\"6\u027A7\u027B"),
          peg$decode("2\u027C\"\"6\u027C7\u027D"),
          peg$decode("2\u027E\"\"6\u027E7\u027F"),
          peg$decode("2\u0280\"\"6\u02807\u0281"),
          peg$decode("2\u0282\"\"6\u02827\u0283"),
          peg$decode("2\u0284\"\"6\u02847\u0285"),
          peg$decode("2\u0286\"\"6\u02867\u0287"),
          peg$decode("2\u0288\"\"6\u02887\u0289"),
          peg$decode("2\u028A\"\"6\u028A7\u028B"),
          peg$decode("2\u028C\"\"6\u028C7\u028D"),
          peg$decode("2\u028E\"\"6\u028E7\u028F"),
          peg$decode("2\u0290\"\"6\u02907\u0291"),
          peg$decode("2\u0292\"\"6\u02927\u0293"),
          peg$decode("2\u0294\"\"6\u02947\u0295"),
          peg$decode("2\u0296\"\"6\u02967\u0297"),
          peg$decode("2\u0298\"\"6\u02987\u0299"),
          peg$decode("2\u029A\"\"6\u029A7\u029B"),
          peg$decode("2\u029C\"\"6\u029C7\u029D"),
          peg$decode("2\u029E\"\"6\u029E7\u029F"),
          peg$decode("2\u02A0\"\"6\u02A07\u02A1"),
          peg$decode("2\u02A2\"\"6\u02A27\u02A3"),
          peg$decode("2\u02A4\"\"6\u02A47\u02A5"),
          peg$decode("2\u02A6\"\"6\u02A67\u02A7"),
          peg$decode("2\u02A8\"\"6\u02A87\u02A9"),
          peg$decode("2\u02AA\"\"6\u02AA7\u02AB"),
          peg$decode("2\u02AC\"\"6\u02AC7\u02AD"),
          peg$decode("2\u02AE\"\"6\u02AE7\u02AF"),
          peg$decode("2\u02B0\"\"6\u02B07\u02B1"),
          peg$decode("2\u02B2\"\"6\u02B27\u02B3"),
          peg$decode("2\u02B4\"\"6\u02B47\u02B5"),
          peg$decode("2\u02B6\"\"6\u02B67\u02B7"),
          peg$decode("2\u02B8\"\"6\u02B87\u02B9"),
          peg$decode("2\u02BA\"\"6\u02BA7\u02BB"),
          peg$decode("2\u02BC\"\"6\u02BC7\u02BD"),
          peg$decode("2\u02BE\"\"6\u02BE7\u02BF"),
          peg$decode("2\u02C0\"\"6\u02C07\u02C1"),
          peg$decode("2\u02C2\"\"6\u02C27\u02C3"),
          peg$decode("2\u02C4\"\"6\u02C47\u02C5"),
          peg$decode("2\u02C6\"\"6\u02C67\u02C7"),
          peg$decode("2\u02C8\"\"6\u02C87\u02C9"),
          peg$decode("2\u02CA\"\"6\u02CA7\u02CB"),
          peg$decode("2\xB7\"\"6\xB77\xB8"),
          peg$decode("2\u02CC\"\"6\u02CC7\u02CD"),
          peg$decode("2/\"\"6/70"),
          peg$decode("2U\"\"6U7V"),
          peg$decode("%2\u02CE\"\"6\u02CE7\u02CF/B#%<2\u02CE\"\"6\u02CE7\u02CF=.##&&!&'#/'$8\":\u02D0\" )(\"'#&'#"),
          peg$decode("2\u01BC\"\"6\u01BC7\u01BD"),
          peg$decode("2\u01BE\"\"6\u01BE7\u01BF"),
          peg$decode("2\u012F\"\"6\u012F7\u0130"),
          peg$decode("2\u0159\"\"6\u01597\u015A"),
          peg$decode("2\xE4\"\"6\xE47\xE5")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 334 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }


      var _bindings={};
      var _locals={};
      var reCache={};
      var Entity=false;
      var FunctionChain=false;
      var SafetyFetch=false;
      var LeakedMagic=/\^\{([a-z0-9]+)\}/;
      var References={};
      var lp='_'; // prefix for bareword variables
      
      function addLocal(v,a) { 
        if (References[v]) return;
        if (_bindings[v]) return;
        _locals._hasLocals=true;
        if (!_locals[v]) {
          _locals[v]=a?(v+a):v;
        } else if (a) {
          _locals[v]=v+a;
        }
      }
      
      function removeLocal(v) {
        delete _locals[v];
      }
      
      function getLocals() { 
        if (!_locals._hasLocals) return ''; 
        var k=[]; 
        for (var i in _locals) if (i!=='_hasLocals') {
          if (i!=_locals[i]) {
            k.push(_locals[i]);
          } else {
            k.unshift(_locals[i]);
          }
        } 
        var finalk=[];
        //console.log("references");
        //console.log(References);
        for (var i in k) {
          //console.log(k[i]);
          if (!References[k[i]]) finalk.push(k[i]);
        }
        //console.log(finalk);
        var r='var '+finalk.join(',')+';\n'; 
        _locals={};
        return r; 
      }

      function rep(list,val) {
        var j;
        for (var i in list) {
          if (j==val[list[i]]) list[i]=j;
        }
      }
     
      function RV(code,varnames) {
        if (!varnames) varnames={};
        if (!code.replace) {
          code=code.toString();
        }
        var repl=function(key) {
          var val=varnames[key];
          if (undefined===val || null===val || false===val) val=tempvar();
          var re=reCache[key]; if (!re) re=reCache[i]=new RegExp('\\^\\{'+key+'\\}','g');
          //console.log(" -- replace "+key+" with "+val)
          code=code.replace(re,val);
        };
        //console.log("###############################")
        //console.log(code);
        //console.log("........................");
        //console.log(varnames);
        var completed={};
        var precedence=['block','this','key','list','counter'];
        for (var j in precedence) {
          var i=precedence[j];
          if (varnames.hasOwnProperty(i)) {
            //console.log("intercept "+i+" with "+varnames[i]);
            repl(i);
            completed[i]=true;
          }
        }
        for (var i in varnames) {
          if (undefined===completed[i]) {
            repl(i);
          }
        }
        //console.log(code)
        //console.log("---------------------------------")
        return code;
      }
      
      var varnum=0;
      function tempvar() {
        var v="$"+(varnum++);
        return v;
      }
      
      function quoted(v) {
        return "'"+v.replace(/\'/g,"\\\'")+"'";
      }
      
      var accessors = {
        firstfetch: { // [0]+key+[1]
          this: [ '$' , '' ],
          currentthis: [ 'this' , ''],
          local: [ '' , '' ], 
          arguments: [ 'arguments','' ],
          parameters: [ 'p','' ],
          it: [ '^{this}','' ],
          key: [ '^{key}','' ],
          counter: [ '^{counter}','' ],
          trial: [ '^{trial}','' ],
          sum: [ '^{sum}','' ],
          error: [ '^{error}','' ],
          self: [ '^{self}','' ],
          super: [ '^{super}','' ],
          paren: [ '', '' ],
          bound: [ '' , '' ],
          global: [ '' , '' ],
          function: [ '' , '' ],
          literal: ['','']
        },
        nextfetch: { // +[0]+key+[1]
          function: [ '(' , ')' ],
          attribute: [ '.' , '' ], 
          index: [ '[' , ']' ],
        },
        firststore: { //[0]+key+[1]
          function: [ '' , '' ],
          paren: [ '', '' ],
          local: [ '' , ''  ],
          error: [ '^{error}','' ],
          attribute: [ '^{this}.' ,  '' ],
          self: [ '^{self}','' ],
          sum: [ '^{sum}' , '' ],
          property: [ '$["' , '"]' ], 
          parameter: [ 'p["','"]' ],
        },
        laststore: { // +[0]+key+[1]
          attribute: [ '.' , '' ], 
          index: [ '[' , ']'  ],
        }
      };

      function safetyFetch(root,leaf) {
        SafetyFetch=true;
        return '(undefined===($_b=('+root+'))?undefined:($_b'+leaf+'))';
      }

      function ValueCompositor(v,safe) {
        //console.log("Value Compositor...");
        //console.log(v);
        var code='';
        if (v[0][0]=='local') {
          var test=v[0][1].substr(lp.length,v[0][1].length-lp.length);
          var binding=options.globals[test];
          if (binding) {
            v[0][0]='bound';
            v[0][1]=binding;
          }
        }
        if (v[0][0]=='local') {
          code+=VarUse(v[0][1]);
        }
        var patternbase=accessors.firstfetch;
        var i=0; while (i<v.length) {
          var pattern=patternbase[v[i][0]]; 
          patternbase=accessors.nextfetch;
          if (!pattern) error("RV Couldn't construct dereference from "+v[i]+' because '+pattern+' is false');
          var leaf=pattern[0] + v[i][1] + pattern[1];
          if (i>0 && safe) {
            code=safetyFetch(code,leaf);
          } else {
            code=code+leaf;
          }
          i++;
        }
        return code;
      }

      var itselfops = {
        '+': '^{1} += ^{2}' , // test 'self +'
        '-': '^{1} -= ^{2}' , // test 'self -'
        
        '*': '^{1} *= ^{2}' , // test 'self *'
        '/': '^{1} /= ^{2}' , // test 'self /'
        '%': '^{1} %= ^{2}' , // test 'self %'
        '<<': '^{1} <<= ^{2}' , // 
        '>>': '^{1} >>= ^{2}' , // 
        '>>>': '^{1} >>>= ^{2}' , // 
        '**': '^{1} = Math.pow(^{1},^{2})' , // test 'self **'

        xorb: '^{1} ^= ^{2}' , // test 'self xorb'
        andb: '^{1} &= ^{2}' , // test 'self andb'
        orb: '^{1} |= ^{2}' , // test 'self orb'

        and: '^{1} = ^{1} && ^{2}', // test 'self and'
        or: '^{1} = ^{1} || ^{2}', // test 'self or'
        xor: '^{1} = $AI.xor(^{1},^{2})',  // test 'self xor'
        nand: '^{1} = (!((^{1})&&(^{2})))', // test 'self nand'
        nor: '^{1} = (!((^{1})||(^{2})))', // test 'self nor'

        '?>': '^{1} = Math.max(^{1},^{2})', // test 'self ?>'
        '?<': '^{1} = Math.min(^{1},^{2})', // test 'self ?<'
        
        update: '^{1} = $AI.update(^{1},^{2})', // test 'self update'
        delete: '$AI.delete(^{1},^{2})', // test 'self delete*'
        default: 'if (undefined===^{1}) ^{1}=^{2}', // test 'self default*'
        concat: '^{1} = $AI.concat(^{1},^{2}, true)', // test 'self concat inplace*'
      };

      var unops={
        '-': '^{1}=-(^{1})' , // test 'self negate'
        'not': '^{1}=!(^{1})', // test 'self not'
        'notb': '^{1}=~(^{1})', // test 'self notb'
        'inc': '^{1}++', // test 'self inc'
        'dec': '^{1}--', // test 'self dec'
        'delete': 'delete ^{1}', // test 'self delete'
        'collect': '^{1} = $AI.collect(^{1})' // test 'self collect*'
      };  

      
      function assembleLiteral(v) {
        var build='';
        var result=[];
        for (var i in v) {
          var c=v[i];
          if (c[0]) {
            build+=c[1];
          } else {
            if (build.length) result.push(quoted(build));
            build='';
            if (!result.length) result.push(quoted(''));
            result.push(c[1]);
          }
        }
        if (build.length) result.push(quoted(build));
        if (!result.length) result=[quoted('')];
        return result.join('+');
      }

      var Lists={};
      function addToList(list,e) {
        var list=Lists[list] || (Lists[list]=[]);
        list.push(e);
      }
      function getList(list) {
        var list=Lists[list] || (Lists[list]=[]);
        if (list.length) {
          return '["'+list.join('","')+'"]';
        } 
        return '[]';
      }
      function clearLists() {
        Lists={};
      }
        
      function GetExpectsTester(x,name) {
        var l =[];
        for (var i in x) {
          var t=x[i][1] || 'true';
          var p='"'+x[i][0][1]+'":'+x[i][1];
          l.push(p);
        }
        return '$AI.expectsThrow(p,{'+l.join(',')+'},'+quoted(name)+');\n';
      }
      
      
      // expects
      // as
      // kind
      // body
      // preface
      // appendix
      function TaskClauseFormatter(o) {
        var params=['p'];
        var expects='',locals=[];//$unused=this';
        if (o.expects && o.as) Error("cannot have both EXPECTS and AS in a function declaration");
        if (o.expects && o.expects.length) {
          expects=GetExpectsTester(o.expects,'in-line');
        } else if (o.as) {
          for (var i in o.as) {
            if (i==0) {
              locals.push(o.as[i][0][1]+'=p');
            } else {
              params.push(o.as[i][0][1]);
            }
          }
        }
        if (!o.preface) o.preface='';
        if (!o.postface) o.postface='';
        var finallocals=[];
        for (var i in locals) if (!References[locals[i]]) finallocals.push(locals[i]);
        locals=locals.length?('var '+finallocals.join(',')+';'):'';
        var code = o.kind+'('+params.join(',')+'){'+o.preface+FunStart()+locals+expects+'{'+o.block+'}'+FunStop()+o.postface+'}';
        if (o.execute) code+='()';
        return code;
      }

      
      // prefix (v0)
      // name (v1)
      // as (v2)
      // expects (v3)
      // kind 
      // body (k)
      function TaskFormatter(o) {
        
        var fn=(o.prefix?o.prefix+'_':'')+o.name;
        var params='p';
        var paramspec=o.as||[];
        
        for (var i in paramspec) {
          var pname=paramspec[i][0][1];
          if (i==0) {
            addLocal(pname,'=p');
          } else {
            removeLocal(pname);
            params+=','+pname;
          }
        }

        if (SafetyFetch) { addLocal('$_b'); SafetyFetch=false; }
        if (FunctionChain) { addLocal('$_c'); addLocal('$_d'); FunctionChain=false; }
        addLocal('$','=this');
        var head='', tail='';
        var sup=GlobVar();
        if (o.prefix!='get' && o.prefix!='set') {
          addToList('lock',fn);
          head='var '+sup+'=prototype['+fn+'];\n';
          head+='prototype['+fn+']=';
          tail=';\n';
        }
      
        var fun=o.kind+'('+params+') {\n'+FunStart()+getLocals();
        if (o.expects) {
          fun+=GetExpectsTester(o.expects,fn);
        }
        fun+='{'+o.body+'}'+FunStop(); // function body
        fun+='}';
      
        if (o.name) {
          if (fun.indexOf('^{this}')>-1) error("Cannot use unrooted . accessor without a context\n\n"+fun);
        }
        var r=RV(head+fun+tail,{this:false,super:sup});
      
        return r;

      }

      function VerbCat(v) {
    //       console.log("VerbCat");
    //       console.log(v);
         if (v.left) {
           return v.left+v.base+v.right;
    //     } else if (v.call) {
    //       if (test) {
    //         return RV('((undefined===($_c=^{verb}(($_d=^{base}),^{param})))?$_d:$_c)',v);
    //       } else {
    //         return v.verb+'('+v.base+(v.param?(','+v.param):'')+')';
    //       }
         } else {
           if (v.test) {
             return RV('((undefined===($_c=(($_d=^{base})^{verb}(^{param}))))?$_d:$_c)',v);
           } else {
             return v.base+v.verb+'('+v.param+')';
           }
         }
      }
     
      function AssembleVerb(v) {
         if (v.length==1) {
    //       console.log("AV 1");
    //       console.log(v[0]);
           return VerbCat(v[0]);
         }
         FunctionChain=true;
         var base=v[0].base;
         for (var i in v) {
           v[i].base=base;
           v[i].test=true;
           base=VerbCat(v[i]);
         }
         return base;
      }
      
      function EnumCheck(v) {
        var start=1;
        for (var i in v) {
          if (v[i][1]==='enum') {
            v[i][1]=start++;
          } else {
            var n=parseInt(v[i][1],10);
            if (!isNaN(n)) {
              start=n+1;
            }
          }
        }
        return v;
      }
      
      function GlobVar() {
        return '$'+(options.persist.globalcount++)+'g';
      }
      function FunStart() {
        return '';
        //return ' /*:FUNSTART:*/ ';
      }
      function FunStop() {
        return '';
        //return ' /*:FUNSTOP:*/ ';
      }
      function VarUse(v) {
        return '';
        //return [].concat(v).map(function(v) { return ' /*:VAR:'+v+':*/ '});
      }
      function FixVars(code) {
      }

      function MagicCheck(code) {
        var lm=LeakedMagic.exec(code);
        if (lm) error("Magic variable '"+lm[1]+"' used in the wrong place (but I can't tell you where yet, please search for your use of this variable and make sure it is contained within a construct that uses it.)");
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()