#!/usr/bin/env sai-run

object Comps main 1.0.0

Instantiate task

  // test data
  set friends to:
   :name 'Sara', age 23, #cat, province 'ON'
   :name 'John', age 19, #cat, #dog, province 'ON'
   :name 'Ellie', age 22, province 'QC'
   :name 'Marshal', age 21, #dog, province 'ON'
   :name 'Doug', age 18, province 'ON'
   :name 'Ann', age 23, #cat, province 'QC'
   :name 'Harry', age 31, province 'QC'
   :name 'Jenna', age 28, #dog, province 'ON'

  set rentAge to: ON 25, QC 21

  // HAS filter function
  set CanRent to task given row
    return row.age >= rentAge[row.province]

  // BY sort function
  set ProvinceAge to task given a, b
    return a.province <=> b.province or a.age <=> b.age

  // GATHER reduction function
  set AgeTotal to task given accumulator, row
    return accumulator + row.age

  // create an "adding machine tape" of results to display
  // nb. a single backtick indicates remainder of line is a string literal
  
  set tape to:
  
    `HAS\nWho likes cats?
    friends #cat 

    `Who doesn't like dogs?
    friends !#dog

    `Who likes both?
    friends #dog #cat

    `Who is 21 or over?
    friends has .cat or .dog

    `Who is 21 or over?
    friends has .age >= 21

    `Who lives in Quebec and likes cats or dogs?
    friends has (.province = 'QC') and (.cat or .dog)

    `Under 21 and likes cats?
    friends #cat has .age < 21 

    `Who can rent a car?
    friends has .age >= rentAge[.province]

    `Who can rent a car? (code block)
    friends has
      return .age >= rentAge[.province]

    `Who can rent a car (named task)
    friends has using CanRent

    `BY\nSorted names
    friends by .name

    `Oldest to youngest
    friends by .age descending

    `Length of name, then age
    friends by .name.length by .age

    `Oldest friend
    friends highest .age

    `Youngest cat-loving friend
    friends #cat lowest .age

    `Ages by province (code block)
    friends by
      return a.province <=> b.province or a.age <=> b.age

    `Ages by province (named task)
    friends by using ProvinceAge

    `Just the names in alpha order
    friends by .name thru .name

    `THRU\nJust the names in alpha order (alternate)
    friends thru .name by .

    `Summary of cat-fanciers
    friends #cat thru '${.name} (${.age}), lives in ${.province}'

    `Numbered list of friends
    friends thru
      return '${key+1}) ${.name}'

    `All-caps names
    friends thru
      return it overlay: name from .name.toUpperCase

    `INTO\nTotal ages (inline)
    friends into 0 sum + .age

    `Total ages (task)
    friends into 0 using AgeTotal  

    `Count friends in each province
    friends into blank
      set sum[.province] to (self default 0) + 1

    `Five youngest friends
    friends by .age limit 5

    `Five oldest friends
    friends by .age limit -5

    `Second page of five youngest
    friends by .age limit 5,5

    `Last friend in the list
    friends last
  

  ply tape as line,lineno
    debug line
    if lineno andb 1
      debug ''

  
    

