
object Comps 1.0.0
Instantiate task





  set friends to:
   :name 'Sara', age 23, #cat, province 'ON'
   :name 'John', age 19, #cat, #dog, province 'ON'
   :name 'Ellie', age 22, province 'QC'
   :name 'Marshal', age 21, #dog, province 'ON'
   :name 'Doug', age 18, province 'ON'
   :name 'Ann', age 23, #cat, province 'QC'
   :name 'Harry', age 31, province 'QC'
   :name 'Jenna', age 28, #dog, province 'ON'

  debug "\nWho likes cats?"
  debug friends #cat 

  debug "\nWho doesn't like dogs?"
  debug friends !#dog
  
  debug "\nWho likes both?"
  debug friends #dog #cat
  
  debug "\nWho is 21 or over?"
  debug friends having .cat or .dog
  
  debug "\nWho is 21 or over?"
  debug friends having .age >= 21
  
  debug "\nWho lives in Quebec and likes cats or dogs?"
  debug friends having (.province = 'QC') and (.cat or .dog)
  
  debug "\nUnder 21 and likes cats?"
  debug friends #cat having .age < 21 
  
  debug "\nWho can rent a car?"
  set rentAge to: ON 25, QC 21
  debug friends having .age >= rentAge[.province]
  
  debug "\nWho can rent a car? (code block)"
  debug friends filter
    return .age >= rentAge[.province]

  debug "\nWho can rent a car (named task)"
  set CanRent to task as row
    return row.age >= rentAge[row.province]
  debug friends filter CanRent
  
  debug "\n\nSorted names"
  debug friends by .name
  
  debug "\nOldest to youngest"
  debug friends by .age descending
  
  debug "\nLength of name, then age"
  debug friends by .name.length by .age
  
  debug "\nOldest friend"
  debug friends highest .age
  
  debug "\nYoungest cat-loving friend"
  debug friends #cat lowest .age
  
  debug "\nAges by province (code block)"
  debug friends sort
    return a.province <=> b.province or a.age <=> b.age
  
  debug "\nAges by province (named task)"
  set ProvinceAge to task as a, b
    return a.province <=> b.province or a.age <=> b.age
  debug friends sort ProvinceAge
  
  debug "\n\nJust the names in alpha order"
  debug friends by .name thru .name
  
  debug "\n\nJust the names in alpha order (alternate)"
  debug friends thru .name by .
  
  debug "\nSummary of cat-fanciers"
  debug friends #cat thru '${.name} (${.age}), lives in ${.province}'

  debug "\nNumbered list of friends"
  debug friends map
    return '${key+1}) ${.name}'

  debug "\nAll-caps names"
  debug friends map
    return it overlay: name from .name.toUpperCase
  
  debug "\n\nHow many friends live in each province?"
  debug chain friends 
    reduce into blank
      set accum[.province] to (self default 0) + 1
      
      
    

