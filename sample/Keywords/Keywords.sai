#!/usr/bin/env sai-run

// sample code from Keywords documentation 
// (maybe not all of it, and not in order)

object Keywords main 1.0.0

Instantiate task

  set fruit to list Apple, Banana, Citron

  set friends to:
   :name 'Sara', age 23, #cat, province 'ON'
   :name 'John', age 19, #cat, #dog, province 'ON'
   :name 'Ellie', age 22, province 'QC'
   :name 'Marshal', age 21, #dog, province 'ON'
   :name 'Doug', age 18, province 'ON'
   :name 'Ann', age 23, #cat, province 'QC'
   :name 'Harry', age 31, province 'QC'
   :name 'Jenna', age 28, #dog, province 'ON'

  set
    width to 10
    height to 5
    angle to 45o

  // ACCUM
  debug '\nACCUM'
  debug friends into 0
    set sum + .age

  // SET
  debug '\nSET'
  debug 4 set 5*it+2 set it/7
  
  debug friends by .age set
    set .length to 3
    
  set ExtractFirst to task
    return $[0]
  debug friends #cat set using ExtractFirst

  // AND
  debug '\nAND'
  debug 1 and 0
  debug 1 and false
  debug 0 and 1
  debug false and 1
  debug 1 and 1
  debug true and 'Fred'
  
  // ANDB
  debug '\nANDB'
  debug 5 andb 11
  
  // ARRAY
  debug '\nARRAY'
  debug array 1+1, 2*3, 'Fred'
  
  debug array
    width * ~Math.cos(angle)
    height * ~Math.sin(angle)
    
  debug array
    1, 1, 2, 5
    14, 42, 132, 429
    1430, 4862
    
  debug array 5, 3, 2, 7, 4; has it%2
  
  debug array
    array 1, 2, 3;, array 4, 5, 6
    array
      7, 8, 9
  
  // AS
  debug '\nAS'
  set six to (1+2 as three)+3
  debug array three, six
  
  set tally to blank
  set AddRow to task given item, quantity
    set tally[item] to (self default 0) + quantity
  AddRow 'socks', 3
  AddRow 'pants', 6
  debug tally 
  
  // ASCENDING
  debug '\nASCENDING'
  debug list Bob, Carol, Ted, Alice; by ascending
  
  // AUDIT
  debug '\nAUDIT'
  set b to chain fruit
    observe debug('Pre-sort')
    audit debug('Fruit #${key+1} is ${it}') 
    by desc
    observe debug('Post-sort')
    audit debug('Fruit #${key+1} is ${it}') 
  debug b
  
  // BY
  debug '\nBY'
  debug (friends by .name thru .name).join(', ')
  set result to friends by .name.length by .age
  debug (result thru '${.name}: ${.age}').join('\n')
  set result to friends by
   return a.province <=> b.province or a.age <=> b.age
  debug (result thru '${.name}: ${.province}, ${.age}').join('\n')

  // ERROR
  debug '\nERROR'
  try
    noFunction
  catch
   debug error
  
  // FIELDS
  debug '\nFIELDS'
  debug fields
    str 16, dex 34, mag 14
    con 42, wil 21, cun 45
  debug fields x 5, y 4, z 3; thru it*2
  
  
  // NAND
  debug '\nNAND'
  debug 0 nand 0
  debug 1 nand 0
  debug 0 nand 1
  debug 1 nand 1
  
  // NOR
  debug '\nNOR'
  debug 0 nor 0
  debug 1 nor 0
  debug 0 nor 1
  debug 1 nor 1
  
  // NOT
  debug '\nNOT'
  debug not 0
  debug not false
  debug not 'Sam'
  debug not empty
  
  // XOR
  debug '\nXOR'
  debug 'Fred' xor 'Daphne'
  debug 'Shaggy' xor 0
  debug 0 xor 'Scooby'
  debug 0 xor 0
  
  // XORB
  debug '\nXORB'
  debug 3 xorb 6
  
  // LOWEST
  debug '\nLOWEST'
  debug friends lowest .age
  
  // KEYS
  debug '\nKEYS'
  debug fruit keys
  debug friends first keys
  
  // ISNT
  debug '\nISNT'
  debug 1 != true
  debug 1 isnt true
  
  // IS
  debug '\nIS'
  debug 0 = false
  debug 0 is false

  // INTO
  debug '\nINTO'
  debug friends into 0 sum + .age  
  debug friends into blank
    set sum[.province] to (self default 0)+1
  set ageTotal to task given accumulator, row
    return accumulator+row.age
  debug friends into 0 using ageTotal

  
  // HIGHEST
  debug '\nHIGHEST'
  debug friends highest .age

  // VALUES
  debug '\nVALUES'
  debug fruit values
  debug friends first values
  
  // SELECT
  debug '\nSELECT'
  debug fruit select: 2, 0
  debug friends #cat thru it select list name, age
  
  // CHAIN
  debug '\nCHAIN'
  set a to: 1,2,3
  chain a
    reverse
  debug a
  
  // CHAIN ${}
  debug '\n\${}'
  set FriendSummary to task 
    return 'Name: ${$name}; age: ${$age}'
  ply friends limit 3 as friend
    debug 'Subject ${key+1}: ${FriendSummary(friend)}'
  
  // +
  debug '\n+'
  debug 1+1
  debug '1'+1
  debug 1+'1'
  debug '1'+'1'
  
  // -
  debug '\n-'
  debug 3-5
  debug 3+-5
  
  // /
  debug '\n/'
  debug 22/7
  debug 355/113
  
  // ;
  debug '\n;'
  debug list 3, 2, 1 by it
  debug array 3, 2, 1 by it
  debug array 3, 2, 1; by it
  debug list =3, =2, =1 by it
  debug list =3, =2, =1; by it
  
  // <
  debug '\n<'
  debug 1 < 1
  debug 1 < 2
  debug 'a' < 'b'
  debug 'a' < 'B'
  
  // <=>
  debug '\n<=>'
  debug 1<=>0
  debug 1<=>1
  debug 1<=>2
  debug 'b'<=>'a'
  debug 'b'<=>'b'
  debug 'b'<=>'c'
  
  // isNaN
  debug '\nisNaN'
  set a to ~parseInt('This is not a number.')
  debug a
  debug a = 0
  debug a = false
  debug a = NaN
  debug isNaN a
  
  // isa
  debug '\nisa'
  set a to create 'Fruit'
  set b to create 'Pear'
  
  // isof
  debug '\nisof'
  debug a.isof
  debug b.isof

  // iterate
  debug '\niterate'
  iterate friends
    debug it
    
  // key
  debug '\nkey'
  ply friends
    debug key
  each friends[0]
    debug key
    
  count 3
    count 3
      debug counter
      
  count 3 as i
    count 3
      debug i+','+counter
      
  count 3
    count 3 as j
      debug counter+','+j
      
  // nan
  debug '\nNaN'
  debug ~parseInt('The one ring.')
  debug number 'The one ring.'
  debug NaN = ~parseInt('The one ring.')
  debug NaN is ~parseInt('The one ring.')
  debug isNaN ~parseInt('The one ring.')
  
  // update
  debug '\nOVERLAY'
  set list1 to list Apple, Banana, Citron
  set list2 to list Kiwi, undefined, Mango
  set traits1 to: a 1, b 2, c 3
  set traits2 to: '1' 4, d 5
  debug list1 update list2
  debug list1 update traits2
  debug traits1 update traits2
  debug traits1 update list2
  
  // collect
  debug '\nCOLLECT'
  set Odds to process
    local i to 1
    while i
      yield i
      set i + 2
      
  debug Odds() limit 10 collect
  
  
  
  
  // update
  debug '\nUPDATE'
  set a to copy fruit
  debug fruit
  set fruit update traits '1' Pear, '3' Guava
  debug fruit
  set fruit update list Grape, undefined, Melon
  debug fruit
  set fruit to a
  
  set friend to friends.1
  debug friend
  set friend update: name 'Jon', province 'QC'
  debug friend
  set friends update: undefined, friend
  debug friends
  
  // inherit
  debug '\nINHERIT'
  set myCar to create 'Sedan'
  debug myCar
  debug myCar.isa
  debug myCar.isof
  
  set rot13 to task
    set out to ''
    count $length
      set char to $charCodeAt(counter)
      if char<65 or char>122 
        nop
      else if char > 109
        set char self - 13
      else if char > 96
        set char + 13
      else if char > 90
        nop
      else if char > 77
        set char self - 13
      else
        set char + 13
      set out + ~String.fromCharCode(char)
    return out
        
  set instrument to task
    debug $$
    
  // thru
  debug '\nTHRU'
  debug friends #cat thru '${.name}, age ${.age}, lives in ${.province}'
  debug fruit thru using rot13
  debug fruit thru using instrument
  
  // instruments
  debug '\nINSTRUMENTS'
  debug 'line: ${__line}'

  // task
  debug '\nTASK'
  debug @Instrument.toString()
  set anon to task given name, value
    orphan
    debug `${@context} ${name}: ${value}
  debug anon.toString()
  debug @SetPolar.toString()
  
  // expects
  debug '\nEXPECTS'
  //@AddStudent name 'Sally', age '12'
  
  set newStudent to: name 'Sally', age '12'
  set studentRules to: name 'string', age 'number'
  debug newStudent expects studentRules

  // promise
  debug '\nPROMISE'
  set doThing to promise given url
    HeyServer url, task given request, result
      if result.success
        resolve result
      else
        reject result
  debug doThing.toString()
  
  // from
  debug '\nFROM'
  set a to task
    unless @cache[$key]
      set @cache[$key] from @ExpensiveCalculation $key
    return @cache[$key]
  debug a.toString()
  
  // down
  debug '\nDOWN'
  count down 15 step -3
    debug counter
  count down 15 
    debug counter
  
  // delete
  debug '\nDELETE'
  set obj to: a 1, b 2, c 3, d 4, e 5, f 6
  set obj delete 'a'
  debug obj
  set obj delete: 'c', 'f'
  debug obj
  set obj delete: b 'B is for Bonobo.', d 'D is for Dixie cups.'
  debug obj
  
  // each
  debug '\nEACH'
  set frined to friends first
  each friend
    debug `${key}: ${it}
  
  // process
  debug '\nPROCESS'
  set Candidates to process
    count 1 to 100 as x
      count 1 to 100 as y
        if 1<x and x<y and x+y<100
          yield: x x, y y, s x+y, p x*y
          
  set iter from Candidates
  debug from iter.next
  debug from iter.next
  debug from iter.next
  debug from iter.next

  set cache to empty
  do until result.done
    set result from iter.next
    cache.push result
  debug cache limit -4
  
  debug Candidates() limit -4
  
  
  // return
  debug '\nRETURN'
  set multiply to task given a,b
    return a*b
  debug from multiply 2, 4
  
  // yield
  debug '\nYIELD'
  set OddNumbers to process
    set i to 1
    while true
      yield i
      set i+2
  set myOdds from OddNumbers
  debug myOdds.next()
  debug myOdds.next()
  debug myOdds.next()

  iterate OddNumbers() limit 4
    debug it
    
  // yielding
  debug '\nYIELDING'
  set Mirror to process given str
    yield str
    yield str.split('').reverse().join('')
    
  set FruitSalad to process
    ply fruit
      yielding Mirror(it)
  
  iterate FruitSalad()
    debug it
  
  // set
  debug '\nSET DYNAMIC'
  set trip to create 'Distance'
  set trip.meters to 500
  debug trip.meters
  debug trip.centimeters
  debug trip.miles
  set trip.miles to 10
  debug trip.meters
  
  // as
  debug '\nAS'
  debug friends thru as friend, index
    return `${index}) ${friend.name} lives in ${friend.province}
  each friends first as value, field
    debug `${field}: ${value}

  // assert
  debug '\nASSERT'
  assert not everythingIsAwesome, 'I have some bad news...'
  
  // copy
  debug '\nCOPY'
  set plate to fruit
  plate.push 'Durian'
  debug fruit
  
  // continue
  debug '\nCONTINUE'
  count 10
    unless counter % 2
      continue
    debug counter
    
  // chain
  debug '\nCHAIN'
  set mirror to task
    return chain $
      split ''
      reverse
      join ''
  debug mirror('A man, a plan, a canal, Panama!')
  debug chain friends
    #cat
    by .name
    thru 'My friend ${.name} likes cats.'
  set double to task
    return chain empty
      concat $
      concat $
    
  debug chain fruit
    set double(it)
    
  // continue
  debug '\n...'
  debug traits
    name Sally
    age 32
    province QC
  ... update traits
    #cat
    province ON
  
  // iterator
  debug '\nIterator'
    
  set inventory to create 'Tally'
  inventory.Count 'apple'
  inventory.Count 'banana'
  inventory.Count 'apple'
  
  debug "iterate inventory"
  iterate inventory
    debug it
  
  debug "ply inventory"
  ply inventory by it.1
    debug it
  
  debug "ply inventory forcing iterator"
  ply inventory iterate by it.1
    debug it
  
  // iterate
  debug '\nITERATE'
  set seen to new ~Set
  seen.add 'horse'
  seen.add 'pig'
  seen.add 'horse'
  iterate seen
    debug it

  // set
  debug '\nSET'
  set a to 2
  set a from ~Math.pow self, 2
  set a * 4
  set a -
  debug a
  
  // super
  debug '\nSUPER'
  set billy to create 'Child' 'Billy', 12
  debug billy

  // enlist
  debug '\nENLIST'
  set data to:
    cats 7
    dogs 12
    
  debug data
  debug data enlist
  
  // entrait
  debug '\nENTRAIT'
  debug 'Coyote' entrait
  debug fruit thru: it, true; entrait
  
  
  set data to:
    list cats, 7
    list dogs, 12
  
  debug data
  debug data entrait

  // shift
  debug  '\SHIFTS'
  debug 4 << 1
  debug -8 << 2
  debug 4.8 << 0
  debug 8 >> 1
  debug -32 >> 2
  debug -32 >>> 2

  debug '\nVERB CHAIN'
  set population empty
  chain friends
    audit 
      set population[.province] to (self default 0) + 1
  debug population


Dump task 
  if ~Array.isArray($)
    return '[ ${$.join(', ')} ]'
  if typeof $ is 'object'
    return '{ ' + chain $
      thru '${key}: ${@Dump(it)}'
      join ', '
    ... + ' }'
  return $
    

AddStudent task expects $name string, $age number
  @students.push copy $  
  
Instrument task given name, value
  debug `${@context} ${name}: ${value}
  
SetPolar task 
  set @x to $magnitude * ~Math.cos($angle)
  set @y to $magnitude * ~Math.sin($angle)
  @SetPolar: angle 45o, magnitude 3
  
  
  