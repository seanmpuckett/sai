// sample code from Keywords documentation 
// (maybe not all of it, and not in order)

object Keywords 1.0.0

Instantiate task

  set fruit to list Apple, Banana, Citron

  set friends to:
   :name 'Sara', age 23, #cat, province 'ON'
   :name 'John', age 19, #cat, #dog, province 'ON'
   :name 'Ellie', age 22, province 'QC'
   :name 'Marshal', age 21, #dog, province 'ON'
   :name 'Doug', age 18, province 'ON'
   :name 'Ann', age 23, #cat, province 'QC'
   :name 'Harry', age 31, province 'QC'
   :name 'Jenna', age 28, #dog, province 'ON'

  set
    width to 10
    height to 5
    angle to 45o

  // ACCUM
  debug '\nACCUM'
  debug friends gather into 0
    set accum + .age

  // ALTER
  debug '\nALTER'
  debug 4 alter 5*it+2 alter it/7
  
  debug friends by .age alter
    set .length to 3
    
  set ExtractFirst to task
    return $[0]
  debug friends #cat alter using ExtractFirst

  // AND
  debug '\nAND'
  debug 1 and 0
  debug 1 and false
  debug 0 and 1
  debug false and 1
  debug 1 and 1
  debug true and 'Fred'
  
  // ANDB
  debug '\nANDB'
  debug 5 andb 11
  
  // ARRAY
  debug '\nARRAY'
  debug array 1+1, 2*3, 'Fred'
  
  debug array
    width * ~Math.cos(angle)
    height * ~Math.sin(angle)
    
  debug array
    1, 1, 2, 5
    14, 42, 132, 429
    1430, 4862
    
  debug array 5, 3, 2, 7, 4; has it%2
  
  debug array
    array 1, 2, 3;, array 4, 5, 6
    array
      7, 8, 9
  
  // AS
  debug '\nAS'
  set six to (1+2 as three)+3
  debug array three, six
  
  set tally to blank
  set AddRow to task as item, quantity
    set tally|item to (self default 0) + quantity
  AddRow 'socks', 3
  AddRow 'pants', 6
  debug tally 
  
  // ASCENDING
  debug '\nASCENDING'
  debug list Bob, Carol, Ted, Alice; by ascending
  
  // AUDIT
  debug '\nAUDIT'
  set b to chain fruit
    observe debug('Pre-sort')
    audit debug('Fruit #${key+1} is ${it}') 
    by desc
    observe debug('Post-sort')
    audit debug('Fruit #${key+1} is ${it}') 
  debug b
  
  // BY
  debug '\nBY'
  debug (friends by .name thru .name).join(', ')
  set result to friends by .name.length by .age
  debug (result thru '${.name}: ${.age}').join('\n')
  set result to friends by
   return a.province <=> b.province or a.age <=> b.age
  debug (result thru '${.name}: ${.province}, ${.age}').join('\n')

  // ERROR
  debug '\nERROR'
  try
    noFunction
  catch
   debug error
  
  // FIELDS
  debug '\nFIELDS'
  debug fields
    str 16, dex 34, mag 14
    con 42, wil 21, cun 45
  debug fields x 5, y 4, z 3; thru it*2
  
  
  // NAND
  debug '\nNAND'
  debug 0 nand 0
  debug 1 nand 0
  debug 0 nand 1
  debug 1 nand 1
  
  // NOR
  debug '\nNOR'
  debug 0 nor 0
  debug 1 nor 0
  debug 0 nor 1
  debug 1 nor 1
  
  // NOT
  debug '\nNOT'
  debug not 0
  debug not false
  debug not 'Sam'
  debug not empty
  
  // XOR
  debug '\nXOR'
  debug 'Fred' xor 'Daphne'
  debug 'Shaggy' xor 0
  debug 0 xor 'Scooby'
  debug 0 xor 0
  
  // XORB
  debug '\nXORB'
  debug 3 xorb 6
  
  // LOWEST
  debug '\nLOWEST'
  debug friends lowest .age
  
  // KEYS
  debug '\nKEYS'
  debug keys fruit
  debug friends first keys
  
  // ISNT
  debug '\nISNT'
  debug 1 != true
  debug 1 isnt true
  
  // IS
  debug '\nIS'
  debug 0 = false
  debug 0 is false
  
  // INITIALIZED
  debug '\nINITIALIZED'
  debug friends into blank
    (accum|.province initialized empty).push .name

  // INTO
  debug '\nINTO'
  debug friends into 0 accum + .age  
  debug friends into blank
    set accum[.province] to (self default 0)+1
  set ageTotal to task as accumulator, row
    return accumulator+row.age
  debug friends into 0 using ageTotal

  
  // HIGHEST
  debug '\nHIGHEST'
  debug friends highest .age

  // VALUES
  debug '\nVALUES'
  debug values fruit
  debug friends first values
  
  // SELECT
  debug '\nSELECT'
  debug fruit select: 2, 0
  debug friends #cat thru it select list name, age
  